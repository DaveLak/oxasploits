/*global Ext: false, USERID: false, TR: false, Base64: false, */
Ext.define('BS350.controller.UsersCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['UsersView', 'BS350.custom.ToggleColumn'],
  stores: ['UsersStore'],

  items: [
    { name: 'grid', query: '#userGrid', actions: {selectionchange: 'selectionChange'}},
    { name: 'addUserBtn', query: '#addUser', actions: {click: 'addUser'} },
    { name: 'removeUserBtn', query: '#removeUser', actions: {click: 'removeUser'} },
    { name: 'editUserBtn', query: '#editUser', actions: {click: 'editUser'} },
    { name: 'saveBtn', query: '#btnSave', actions: {click: 'save'}},
    { name: 'discardBtn', query: '#btnDiscard', actions: {click: 'discard'} },
    { name: 'editUserWin', query: '#userEditWin'},
    { name: 'usersviewId', query: '#usersviewId'}
  ],

  forceClose: false,
  oldName: '',

  init: function (application) {
  },

  initView: function () {
    if (this.access !== 'w') {
      this.view.getDockedItems()[0].hide();
    }
    this.forceClose = false;
    this.store = this.V.grid.getStore();
    this.store.load();

    // Sub-Window
    this.V.editUserWin.down('#editCancel').on('click', this.cancelChanges, this);
    this.V.editUserWin.down('#editConfirm').on('click', this.confirmChanges, this);
    this.V.editUserWin.down('#changePwd').on('click', this.changePassword, this);

    this.store.on('datachanged', this.checkChanges, this);
    this.store.on('update', this.checkChanges, this);
  },

  selectionChange: function (selected) {
    if (selected && selected.selected.length > 0) {
      this.V.removeUserBtn.setDisabled(selected.selected.getAt(0).get('id') === USERID);
      this.V.editUserBtn.setDisabled(false);
    } else {
      this.V.editUserBtn.setDisabled(true);
      this.V.removeUserBtn.setDisabled(true);
    }
  },

  addUser: function () {
    this.editUserDlg(false);
  },

  removeUser: function () {
    var selection = this.V.grid.getSelectionModel().getSelection();
    if (selection.length > 0) {
      this.store.remove(selection[0]);
    }
  },

  editUser: function () {
    this.editUserDlg(true);
  },

  editUserDlg: function (withSel) {
    if (withSel === true)
    {
      //Edit old/new not saved user
      var selection = this.V.grid.getSelectionModel().getSelection();
      if (selection) {
        var item = selection[0];
        this.V.editUserWin.userItem = item;
        this.V.editUserWin.setTitle(item.get('username'));
        this.V.editUserWin.down('#usernameField').setValue(item.get('username'));
        this.V.editUserWin.down('#firstnameField').setValue(item.get('firstname'));
        this.V.editUserWin.down('#lastnameField').setValue(item.get('lastname'));
        this.V.editUserWin.down('#emailField').setValue(item.get('email'));
        this.V.editUserWin.down('#activeField').setValue(item.get('active'));
        this.V.editUserWin.down('#passwordField').setValue(item.get('password'));
        if (item.get('id') !== undefined)
        {
          //The user is not in db yet
          this.V.editUserWin.down('#passwordField').setVisible(false);
          this.V.editUserWin.down('#changePwd').setVisible(true);
        }
        else
        {
          this.V.editUserWin.down('#passwordField').setVisible(true);
          this.V.editUserWin.down('#changePwd').setVisible(false);
        }
        this.V.editUserWin.down('#activeField').setDisabled(item.get('id') === USERID);
        this.oldName = item.get('username');
        this.V.editUserWin.show();
      }
    }
    else
    {
        //create new user
        this.V.editUserWin.userItem = null;
        this.V.editUserWin.setTitle(TR('New User'));
        this.V.editUserWin.down('#usernameField').setValue(TR('New User'));
        //empty all fields when new
        this.V.editUserWin.down('#firstnameField').setValue('');
        this.V.editUserWin.down('#lastnameField').setValue('');
        this.V.editUserWin.down('#emailField').setValue('');
        this.V.editUserWin.down('#activeField').setValue('');
        this.V.editUserWin.down('#activeField').setDisabled(false);
        this.V.editUserWin.down('#passwordField').setValue('');
        this.V.editUserWin.down('#passwordField').setVisible(true);
        this.V.editUserWin.down('#changePwd').setVisible(false);
        this.oldName = '';
        this.V.editUserWin.show();
    }
  },

  cancelChanges: function () {
    this.V.editUserWin.hide();
  },

  confirmChanges: function () {
    var form = this.V.editUserWin.down('form').getForm();
    var valid = true;
    form.getFields().each(function (item) {valid = valid && item.validate(); });
    var username = this.V.editUserWin.down('#usernameField').getValue();
    username = Ext.String.trim(username);
    if (username === '')
    {
      valid = false;
      this.V.editUserWin.down('#usernameField').markInvalid(TR('White spaces'));
    }
    //password is needed when a new user (not in db yet) is added CR10648
    //Modified CR10648 empty password is allowed
    /*var id = this.store.getId(this.oldName);
    if (Ext.String.trim(this.V.editUserWin.down('#passwordField').getValue()) === '' && id === undefined)
    {
      valid = false;
      this.V.editUserWin.down('#passwordField').markInvalid(TR('Password is required'));
    }*/
    if (valid && this.oldName !== username)
    {
      valid = !this.store.userExist(Ext.String.trim(username));
      if (!valid)
      {
        this.V.editUserWin.down('#usernameField').markInvalid(TR('User name exists already'));
      }
    }
    if (valid) {
      var pass = Base64.encode(form.getFieldValues().password);
      form.setValues({"password": pass});
      if (this.V.editUserWin.userItem === null)
      {
        this.store.add(form.getFieldValues());
        this.V.editUserWin.hide();
        this.save();
        return;
      }
      this.V.editUserWin.userItem.set(form.getFieldValues());
      var userItem = this.V.editUserWin.userItem;
      this.V.editUserWin.hide();
      var foundUser = this.store.getById(userItem.get('id'));
      foundUser.set(form.getFieldValues());
      this.save();
    }
  },

  changePassword: function () {
    var item = this.V.editUserWin.userItem;
    //id to get entry from db
    var userId = item.get('id');
    var msg = new Ext.window.MessageBox();
    msg.textField.inputType = 'password';
    msg.prompt(TR('Password'), TR('Please enter the new password') + ':', function (btn, text) {
      if (btn === 'ok') {
        var pass = Base64.encode(text);
        Ext.Ajax.request({
          url: '/BS350/setting/setpassword',
          params: { pwd: pass, id: userId },
          success: function (response) {
            if (response.responseText === 'OK') {
              Ext.Msg.alert(TR('Status'), TR('Password changed successfully'));
            } else {
              Ext.Msg.alert(TR('Status'), TR('Set new password failed.'));
            }
          }
        });
      }
    });
  },

  save: function () {
    var me = this;
    this.store.sync({
      success: function(batch, options) {
        //Ext.Msg.alert(TR('Status'), TR('User updated successfully'));
        me.store.load();
        me.V.saveBtn.setDisabled(true);
        me.V.discardBtn.setDisabled(true);
      },
      failure: function(batch, options) {
        Ext.Msg.alert(TR('Status'), TR('User update failed'));
      },
      callback: function () {
        //me.store.load();
      }
    });
  },

  discard: function () {
    this.store.load();
    this.V.editUserBtn.setDisabled(true);
    this.V.saveBtn.setDisabled(true);
    this.V.discardBtn.setDisabled(true);
  },

  checkChanges: function () {
    var isDirty = this.store.isDirty();
    this.V.saveBtn.setDisabled(!isDirty);
    this.V.discardBtn.setDisabled(!isDirty);
  },

  askclose: function (panel) {
    var me = this;
    if ((me.store.isDirty()) && !me.forceClose) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') { me.forceClose = true; me.store.sync({callback: function () {panel.close(); }}); }
          if (btn === 'no') { me.forceClose = true; panel.close(); }
        },
        icon: Ext.Msg.QUESTION
      });
      return false;
    }
    return true;
  }
});

