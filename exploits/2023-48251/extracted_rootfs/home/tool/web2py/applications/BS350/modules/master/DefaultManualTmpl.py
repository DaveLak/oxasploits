__author__ = 'kai'

import atoms


class MasterjobDefaultManualTmpl:

    def __init__(self):
        self.data = []

    def create(self, user, comment, date, display_time):
        self.data.append('c = require "constants"')
        self.data.append('f = require "runFunctions"')
        self.data.append('plc = require "plcsignals"')
        self.data.append('codes = require "scancodes"')
        self.data.append('')
        self.data.append('local initNode = {')
        self.data.append('   name = "initNode",')
        self.data.append('   timeout = 300,')
        self.data.append('   type = c.TypeIdleStartNode,')
        self.data.append('   selectsCw = 0,')
        self.data.append('   selectsEn = 0,')
        self.data.append('   displayJobSteps = 1,')
        self.data.append('   displayTime = %s,' % display_time)
        self.data.append('   clearIDCode = 0,')
        self.data.append('   ignoreResults = 0,')
        self.data.append('   jobComment = \'%s\',' % comment)
        self.data.append('   jobUser = \'%s\',' % user)
        self.data.append('   jobDate = %d' % date)
        self.data.append('}')
        self.data.append('--globale run Einstellungen setzen')
        self.data.append('local config = {')
        self.data.append('    stopOnNok = false,')
        self.data.append('    stopOnTimeout = false')
        self.data.append('}')
        self.data.append('f.setConfiguration(config)')
        self.data.append('')


        self.data.extend(atoms.Local())
        self.data.extend(atoms.SetEnable())
        self.data.extend(atoms.UnsetEnable())
        self.data.extend(atoms.WaitHMIInput())
        self.data.extend(atoms.TriggerInGrp("\"$WaitHMIInput\""))
        self.data.extend(atoms.PrgNr())
        self.data.extend(atoms.ResetBatchCounter(op_mode=2))
        self.data.extend(atoms.DisplayPrgNrTimeDelay())
        self.data.extend(atoms.JobNr())
        self.data.extend(atoms.DisplayJobNrTimeDelay())
        self.data.extend(atoms.DisplayMsgTimeDelay(time_delay=1))          #Set time
        self.data.extend(atoms.ScanFinalJobOK())
        self.data.extend(atoms.DoNokResult())

        self.data.append('f.publishAtoms(atoms,function (a) cpp.job:addAtom(a) end)')
        self.data.append('')
        self.data.append('nodes = {}')
        self.data.append('nodes["StartWithEnable"] = {}')
        self.data.append('nodes["SetEnableStart"] = {}')
        self.data.append('nodes["StartWithoutEnable"] = {}')
        self.data.append('nodes["WaitHMIInput"] = {}')
        self.data.append('nodes["SetNewJobNr"] = {}')
        self.data.append('nodes["UnsetEnableJob"] = {}')
        self.data.append('nodes["DisplayNewJobNr"] = {}')
        self.data.append('nodes["DisplayNewJobNrDelay"] = {}')

        self.data.append('nodes["SetNewPrgNr"] = {}')
        self.data.append('nodes["ResetBatchCounter"] = {}')
        self.data.append('nodes["SetEnablePrg"] = {}')
        self.data.append('nodes["DisplayNewPrgNr"] = {}')
        self.data.append('nodes["DisplayNewPrgNrDelay"] = {}')
        self.data.append('nodes["DoNokResult"] = {}')
        self.data.append('------------ CS/SE System ------- Channel Signals -------------------------')
        self.data.append('nodes["StartWithEnable"].atom = atoms["$Local"]')
        self.data.append('nodes["StartWithEnable"].successor = {{var = "dummy", val = nil, next = nodes["SetEnableStart"]}}')
        self.data.append('nodes["SetEnableStart"].atom = atoms["$SetEnable"]')
        self.data.append('nodes["SetEnableStart"].successor = {{var = "dummy", val = nil, next = nodes["WaitHMIInput"]}}')
        self.data.append('nodes["StartWithoutEnable"].atom = atoms["$Local"]')
        self.data.append('nodes["StartWithoutEnable"].successor = {{var = "dummy", val = nil, next = nodes["WaitHMIInput"]}}')

        self.data.append('nodes["WaitHMIInput"].atom = atoms["$TriggerInGrp2"]')
        self.data.append('nodes["WaitHMIInput"].successor = {{var = "idcodestatus", val = c.jobResultHMIPrgSelected, next = nodes["SetNewPrgNr"]},')
        self.data.append('				   {var = "idcodestatus", val = c.jobResultHMIJobSelected, next = nodes["SetNewJobNr"]}}')
        self.data.append('--Gutfall Job')
        self.data.append('nodes["SetNewJobNr"].atom = atoms["$JobNr"]')
        self.data.append('nodes["SetNewJobNr"].successor = {{var = "dummy", val = nil, next = nodes["UnsetEnableJob"]}}')
        self.data.append('--Enable wegnehmen')
        self.data.append('nodes["UnsetEnableJob"].atom = atoms["$UnsetEnable"]')
        self.data.append('nodes["UnsetEnableJob"].successor = {{var = "dummy", val = nil, next = nodes["DisplayNewJobNr"]}}')
        self.data.append('--Anzeige Job Nr')
        self.data.append('nodes["DisplayNewJobNr"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["DisplayNewJobNr"].successor = {{var = "dummy", val = nil, next = nodes["DisplayNewJobNrDelay"]}}')
        self.data.append('nodes["DisplayNewJobNrDelay"].atom = atoms["$DisplayJobNrTimeDelay"]')
        self.data.append('nodes["DisplayNewJobNrDelay"].successor = {{var = "dummy", val = nil, next = f.EndNode}}')

        self.data.append('--Gutfall Prg')
        self.data.append('nodes["SetNewPrgNr"].atom = atoms["$PrgNr"]')
        self.data.append('nodes["SetNewPrgNr"].successor = {{var = "dummy", val = nil, next = nodes["ResetBatchCounter"]}}')
        self.data.append('-- reset BatchCounter')
        self.data.append('nodes["ResetBatchCounter"].atom = atoms["$ResetBatchCounter"]')
        self.data.append('nodes["ResetBatchCounter"].successor = {{var = "dummy", val = nil, next = nodes["SetEnablePrg"]}}')
        self.data.append('--Enable setzen')
        self.data.append('nodes["SetEnablePrg"].atom = atoms["$SetEnable"]')
        self.data.append('nodes["SetEnablePrg"].successor = {{var = "dummy", val = nil, next = nodes["DisplayNewPrgNr"]}}')
        self.data.append('--Anzeige Job Nr')
        self.data.append('nodes["DisplayNewPrgNr"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["DisplayNewPrgNr"].successor = {{var = "dummy", val = nil, next = nodes["DisplayNewPrgNrDelay"]}}')
        self.data.append('nodes["DisplayNewPrgNrDelay"].atom = atoms["$DisplayPrgNrTimeDelay"]')
        self.data.append('nodes["DisplayNewPrgNrDelay"].successor = {{var = "dummy", val = nil, next = nodes["DoNokResult"]}}')
        self.data.append('--Kein ID Code -> Beenden Skript')
        self.data.append('nodes["DoNokResult"].atom = atoms["$DoNokResult"]')
        self.data.append('nodes["DoNokResult"].successor = {{var = "dummy", val = nil, next = f.EndNode}}')
        self.data.append('------------ CS/SE System ------- END -------------------------------------')
        self.data.append('--Eigentlicher Start Code--')
        self.data.append('f.setInitNode(initNode)')
        self.data.append('f.checkPlausib(nodes)')
        self.data.append('if (ENABLE == "1") then')
        self.data.append('	f.go(nodes["StartWithEnable"])')
        self.data.append('else')
        self.data.append('	f.go(nodes["StartWithoutEnable"])')
        self.data.append('end')
        self.data.append('f.cleanUpNodes(atoms, nodes)')
        self.data.append('package.loaded["atoms"] = nil')

        return self.data
