/**
 * Created by rick on 11.04.16.
 */
Ext.define('BS350.controller.TypePlateCtrl',
{
    extend: 'BS350.custom.ViewController',
    views: ['TypePlateView'],
    typePlateObj: {},
    restoreTypePlateObj: undefined,
    items: [
        // fields
        {name: 'cbfile', query: '#file', actions: { select: 'selectTypPlt' } },
        {name: 'tfmnr', query: '#mnr' , actions: { change: 'updateButtons'} },
        {name: 'tfplantID', query: '#plantID' , actions: { change: 'updateButtons'} },
        {name: 'tfproductiondate', query: '#productiondate' , actions: { change: 'updateButtons'} },
        {name: 'tfserialnumber', query: '#serialnumber' , actions: { change: 'updateButtons'} },
        {name: 'tftix', query: '#tix' , actions: { change: 'updateButtons'} },
        {name: 'tfcyclenumber', query: '#cyclenumber' , actions: { change: 'updateButtons'} },
        {name: 'msg_lbl_bbar', query: '#msg_lbl_bbar'},
        // buttons
        {name: 'btnWrite', query: '#btnWrite', actions: { click: 'writeTypPlt' } },
        {name: 'btnRead', query: '#btnReadTypPlt', actions: { click: 'readTypPlt' } },
        {name: 'btnDiscard', query: '#btnDiscard', actions: { click: 'discardChanges' } },
        {name: 'btnRestore', query: '#btnRestore', actions: { click: 'restoreTypPlt' } },
        {name: 'btnImport', query: '#btnImport', actions: { click: 'importTemplate' } },
        {name: 'btnExport', query: '#btnExport', actions: { click: 'exportTypePlate'} },
        {name: 'btnExportToPrinter', query: '#btnExportToPrinter', actions: { click: 'exportToPrinter' } }
    ],

    initView: function () {
        this.getTemplateNames();
        this.readTypPlt();
    },

    getTemplateNames: function () {
        var me = APP.getController('TypePlateCtrl');
        Ext.Ajax.request({
            url: 'BS350/servicediagnosis/getTemplateNames',
            timeout: 2000,
            success: function (response) {
                var data = Ext.JSON.decode(response.responseText);
                me.V.cbfile.store.loadRawData(data);
            },
            failure: function () {
                console.log('getTemplateNames finished with failure');
                setTimeout(me.getTemplateNames, 20);
            }
        });
    },

    updateButtons: function () {
        var v = this.V;

        var valid = v.tfserialnumber.isValid() && v.tfplantID.isValid() && v.tfproductiondate.isValid() && v.tftix.isValid() && v.tfcyclenumber.isValid();
        var dirty = v.tfserialnumber.isDirty() || v.tfplantID.isDirty() || v.tfproductiondate.isDirty() || v.tftix.isDirty() || v.tfcyclenumber.isDirty();

        v.btnWrite.setDisabled(!valid);
        v.btnExport.setDisabled(!valid);
        v.btnExportToPrinter.setDisabled(!valid);
        v.btnDiscard.setDisabled(!dirty);
    },

    submitValues: function () {
    // set fieldvalues from typePlateObj
        var me = this;
        if (me.typePlateObj['MNR'] !== undefined) {
            me.V.tfmnr.setValue(me.typePlateObj['MNR']);
            me.V.tfmnr.originalValue = me.V.tfmnr.getValue();
        }
        if (me.typePlateObj['Werkskennung'] !== undefined) {
            me.V.tfplantID.setValue(me.typePlateObj['Werkskennung']);
            me.V.tfplantID.originalValue = me.V.tfplantID.getValue();
        }
        if (me.typePlateObj['Fertigungsdatum'] !== undefined) {
            me.V.tfproductiondate.setValue(me.typePlateObj['Fertigungsdatum']);
            me.V.tfproductiondate.originalValue = me.V.tfproductiondate.getValue();
        }
        if (me.typePlateObj['Seriennummer'] !== undefined) {
            me.V.tfserialnumber.setValue(me.typePlateObj['Seriennummer']);
            me.V.tfserialnumber.originalValue = me.V.tfserialnumber.getValue();
        }
        if (me.typePlateObj['TIX'] !== undefined) {
            me.V.tftix.setValue(me.typePlateObj['TIX']);
            me.V.tftix.originalValue = me.V.tftix.getValue();
        }
        if (me.typePlateObj['ZyklusNr'] !== undefined) {
            me.V.tfcyclenumber.setValue(me.typePlateObj['ZyklusNr']);
            me.V.tfcyclenumber.originalValue = me.V.tfcyclenumber.getValue();
        }
        me.V.btnDiscard.setDisabled(true);
    },

    updateTypePlateObj: function () {
    // update typePlateObj with fieldvalues
        var me = this;
        me.V.tfplantID.originalValue = me.V.tfplantID.getValue();
        me.V.tfproductiondate.originalValue = me.V.tfproductiondate.getValue();
        me.V.tfserialnumber.originalValue = me.V.tfserialnumber.getValue();
        me.V.tftix.originalValue = me.V.tftix.getValue();
        me.V.tfcyclenumber.originalValue = me.V.tfcyclenumber.getValue();

        me.typePlateObj['Werkskennung'] = me.V.tfplantID.getValue();
        me.typePlateObj['Fertigungsdatum'] = me.V.tfproductiondate.getValue();
        me.typePlateObj['Seriennummer'] = me.V.tfserialnumber.getValue();
        me.typePlateObj['TIX'] = me.V.tftix.getValue();
        me.typePlateObj['ZyklusNr'] = me.V.tfcyclenumber.getValue();
    },

    discardChanges: function () {
        var v = this.V;
        v.tfplantID.setValue(v.tfplantID.originalValue);
        v.tfproductiondate.setValue(v.tfproductiondate.originalValue);
        v.tfserialnumber.setValue(v.tfserialnumber.originalValue);
        v.tftix.setValue(v.tftix.originalValue);
        v.tfcyclenumber.setValue(v.tfcyclenumber.originalValue);
    },

    restoreTypPlt: function () {
        if (BS350.custom.Utils.detectIE() !== false){
            for (var key in this.restoreTypePlateObj) {
                this.typePlateObj[key] = this.restoreTypePlateObj[key];
            }
        }
        else {
            this.typePlateObj = Object.assign(this.restoreTypePlateObj);
        }

        this.V.cbfile.setValue('--');
        this.submitValues();
        this.writeTypPlt();
    },

    selectTypPlt: function (myself,value, lastValue, handle) {
        var me = this;
        var tempname = me.V.cbfile.getValue();
        if (tempname.match(/^no template/) !== null){ return }

        Ext.Ajax.request({
            url: 'BS350/servicediagnosis/readTemplate',
            method: 'POST',
            params: {templateName : tempname},
            success: function (response) {
                var tmpArray = response.responseText.split('\n');
                tmpArray.pop();
                me.typePlateObj = {};
                for ( var i in tmpArray) {
                    tmpArray[i] = tmpArray[i].replace(/\n|\r/g,'');
                    me.typePlateObj[tmpArray[i].split(':')[0]] = tmpArray[i].split(':')[1];
                }
                me.submitValues();
            },
            failure: function () {
                console.warn('Ajax request readTemplate finished with failure');
            }
        });
    },

    readTypPlt: function () {
        var me = this;
        me.V.msg_lbl_bbar.setText("");
        me.view.getEl().mask(TR("Reading type plate..."));

        Ext.Ajax.request({
            url: 'BS350/servicediagnosis/readTypePlate',
            timeout: 5000,
            success: function (response) {
                var res = Ext.JSON.decode(response.responseText);

                // transform string to array
                var parser = new DOMParser();
                var xmlDoc = parser.parseFromString(res,"text/xml");
                var tmpString = xmlDoc.childNodes[0].childNodes[1].childNodes[0].nodeValue;
                var tmpArray = tmpString.split('"').filter(function(e){return e !== ""});
                me.typePlateObj = {};
                for ( var i in tmpArray) {
                    tmpArray[i] = tmpArray[i].replace(/\n|\r/g,'');
                    me.typePlateObj[tmpArray[i].split(':')[0]] = tmpArray[i].split(':')[1];
                }

                // save TypePlateObject once at initView
                if (me.restoreTypePlateObj === undefined) {
                    if (BS350.custom.Utils.detectIE() !== false){
                        me.restoreTypePlateObj = {};
                        for (var key in me.typePlateObj) {
                            me.restoreTypePlateObj[key] = me.typePlateObj[key];
                        }
                    }
                    else {
                        me.restoreTypePlateObj = Object.assign({},me.typePlateObj);
                    }
                }
                me.V.cbfile.setValue('--');
                me.submitValues();
                me.view.getEl().unmask();
            },
            failure: function () {
                console.warn('read type plate finished with failure');
                me.view.getEl().unmask();
            }
        });
    },

    writeTypPlt: function () {
        var me = this;
        me.V.btnWrite.setDisabled(true);
        me.V.btnDiscard.setDisabled(true);
        me.view.getEl().mask(TR("Write type plate..."));
        me.V.msg_lbl_bbar.setText("");
        me.updateTypePlateObj();

        var strTypePlate = '';
        for (var key in me.typePlateObj) {
            strTypePlate += key + ':' + me.typePlateObj[key] + '\n';
        }

        Ext.Ajax.request({
            url: 'BS350/servicediagnosis/writeTypePlate',
            method: 'POST',
            params: {'typePlateString': strTypePlate},
            success: function (response) {
                me.readResTypPltWr();
            },
            failure: function () {
                me.V.msg_lbl_bbar.setText(TR("Communication failure"));
                console.warn('Ajax request write TypePlate finished with failure');
                me.view.getEl().unmask();
            }
        });
    },

    readResTypPltWr: function () {
        var me = APP.getController('TypePlateCtrl');

        Ext.Ajax.request({
            url: 'BS350/servicediagnosis/readFromClient',
            success: function (response) {
                if (response.responseText !== 'null') {
                    var res = Ext.JSON.decode(response.responseText);
                    var parser = new DOMParser();
                    var xmlDoc = parser.parseFromString(res,"text/xml");
                    var errorValue = xmlDoc.childNodes[0].childNodes[0].childNodes[0].nodeValue;

                    if (errorValue === "0")
                    {
                        me.V.msg_lbl_bbar.el.replaceCls('', "service-color-ok");
                        me.V.msg_lbl_bbar.setText(TR("Write Type Plate OK"));
                    }
                    else {
                        me.V.msg_lbl_bbar.el.replaceCls('', "service-color-nok");
                        me.V.msg_lbl_bbar.setText(TR("Write Type Plate NOK ({0})".format(errorValue)));
                    }
                    me.view.getEl().unmask();
                }
                else {
                    setTimeout(me.readResTypPltWr(), 1000);
                }
            },
            failure: function () {
                me.V.msg_lbl_bbar.setText(TR("Communication failure"));
                console.warn('Ajax request read Result TypePlateWr finished with failure');
                me.view.getEl().unmask();
            }
        });

    },

    exportToPrinter: function () {
        var me = APP.getController('TypePlateCtrl');
        me.view.getEl().mask(TR("Exporting..."));
        me.V.btnExportToPrinter.setDisabled(true);

        me.updateTypePlateObj();

        var exportTime = +new Date();
        var diff = exportTime - APP.statusTime;

        if( diff < APP.updateDelay ) {
            var mac = '';
            var headerStr = '';
            var valueStr = '';

            Ext.Ajax.request({
                url: 'BS350/servicediagnosis/getMAC',
                timeout: 10000,
                success: function (response) {
                    mac = response.responseText;

                    for (var key in me.typePlateObj) {
                        // filter Checksumme
                        if (key.match(/###.*\*\*\*/) === null) {
                            headerStr += key + ',';
                            valueStr += me.typePlateObj[key] + ',';
                        }
                    }
                    var printStr = headerStr + 'MAC\n' + valueStr + mac;
                    window.location.href = 'BS350/servicediagnosis/exportPrintData?msg=' + encodeURIComponent(printStr);

                    me.V.btnExportToPrinter.setDisabled(false);
                    me.view.getEl().unmask();
                },
                failure: function (response) {
                    console.warn('get MAC finished with failure',response);
                    me.V.btnExportToPrinter.setDisabled(false);
                    me.view.getEl().unmask();
                }
            });
        }
        else{
            setTimeout(me.exportToPrinter, 250);
        }
    },

    exportTypePlate: function () {
        var me = APP.getController('TypePlateCtrl');
        me.view.getEl().mask(TR("Exporting..."));
        me.V.btnExport.setDisabled(true);

        me.updateTypePlateObj();

        var exportTime = +new Date();
        var diff = exportTime - APP.statusTime;

        if( diff < APP.updateDelay ) {
            var str = '';
            for (var key in me.typePlateObj) {
                if (key.match(/###.*\*\*\*/) === null) {
                    str += key + ':' + me.typePlateObj[key] + '\n';
                }else {
                    str += key + '\n';
                }
            }
            window.location.href = 'BS350/servicediagnosis/exportTypePlate?msg=' + encodeURIComponent(str);

            me.V.btnExport.setDisabled(false);
            me.view.getEl().unmask();
        }
        else{
            setTimeout(me.exportTypePlate, 250);
        }
    },

    importTemplate: function () {
        var combobox = this.V.cbfile;
        var uploadWin = Ext.create('Ext.window.Window', {
            title: TR('Import'),
            layout: 'fit',
            modal : true,
            width : 400,
            height: 120,
            closable: false,
            items: [{
                xtype: 'form',
                itemId : 'uploadForm',
                bodyPadding : 15,
                layout : 'anchor',
                defaults: { anchor: '100%' },
                items: [{
                    xtype: 'filefield',
                    name: 'fileupload',
                    fieldLabel: TR('type plate template'),
                    labelWidth: 150,
                    buttonText: TR('Browse...'),
                    listeners: {
                        afterrender: function (cmp) {
                            cmp.fileInputEl.set({
                                accept: '.typ'
                            });
                        },
                        validitychange: function(cmp, valid) {
                            if (valid === true){
                                try {
                                    Ext.ComponentQuery.query("#uploadBtn")[0].handler();
                                }catch(err){}
                            }
                        }
                    },
                    validator: function (value) {
                        if (value.match(/.*\.typ$/) ) {
                            Ext.ComponentQuery.query("#uploadBtn")[0].setDisabled(false);
                            return true;
                        }
                        Ext.ComponentQuery.query("#uploadBtn")[0].setDisabled(true);
                        return TR('have to be a *.typ file');
                    }
                }]
            }],
            buttons: [
                {   text: TR('Cancel'),
                    handler: function () { this.up('window').close(); }
                },
                {   itemId: 'uploadBtn',
                    text: TR('Upload'),
                    handler: function() {
                        var win = this.up('window');
                        var form = win.down('form').getForm();
                        if (form.isValid()) {
                            form.submit({
                                url: 'BS350/servicediagnosis/importTemplate',
                                waitMsg: TR('Importing template...'),
                                success: function (form, action) {
                                    combobox.store.reload();
                                    combobox.setValue( (action.result['msg']) );
                                    combobox.fireEvent('select');
                                    win.close();
                                },
                                failure: function (form, action) {
                                    switch (action.failureType) {
                                        case Ext.form.action.Action.CLIENT_INVALID:
                                            Ext.Msg.alert(TR('Failure'), TR('Form fields may not be submitted with invalid values'));
                                            break;
                                        case Ext.form.action.Action.CONNECT_FAILURE:
                                            Ext.Msg.alert(TR('Failure', TR('Ajax communication failed')));
                                            break;
                                        case Ext.form.action.Action.SERVER_INVALID:
                                            Ext.Msg.alert(TR('Failure'), TR(action.result.msg));
                                            break;
                                        default:
                                            Ext.Msg.alert(TR('Failure'), TR(action.result.msg));
                                            break;
                                    }
                                    win.close();
                                }
                            });
                        }
                    }
                }]
        });

        uploadWin.on('show', function(){
            try{
                if (!Ext.isIE10m) {
                    uploadWin.down('form').down('filefield').fileInputEl.dom.click();
                }
            }catch(err){}
        }, this);
        uploadWin.show();
    }
});