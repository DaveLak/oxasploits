/**
 * Controller for HardwareView
 *
 * @author rthiele on 04.04.16.
 */
Ext.define('BS350.controller.HardwareCtrl',
{
    extend: 'BS350.custom.ViewController',
    views: ['HardwareView'],
    items: [
        {name: 'btnStartTest', query: '#btnStartTest', actions: {click: 'startTest'}},
        {name: 'btnSelectAll', query: '#btnSelectAll', actions: {click: 'selectAll'}},
        {name: 'btnDeselectAll', query: '#btnDeselectAll', actions: {click: 'deselectAll'}},
        {name: 'btnExportTestLog', query: '#btnExpTestLog', actions: {click: 'exportTestLog'}},
        {name: 'testsGrid', query:'#testsGrid'},
        {name: 'bginfotext', query:'#bginfotext'},
        {name: 'outputarea', query:'#outputarea'},
        {name: 'resulttext', query:'#resulttext'},
        {name: 'resultpanel', query:'#resultpanel'},
        {name: 'progressBar', query:'#progressBar'},
        {name: 'timeoutBar', query:'#timeoutBar'},
        {name: 'timeoutLabel', query:'#timeoutLabel'}
    ],
    selectedTests: [],  // all by user selected tests
    actualTestId: -1,
    client_running: false,
    LoadingMask: null,
    timerID: 0,
    service_ctrl : ['HardwareCtrl', 'TypePlateCtrl', 'UpdateCtrl'],

    onLaunch: function () {
        var ctrl = APP.getController('NavigationCtrl');
        var headerctrl = APP.getController('HeaderCtrl');
        var me = this;

        Ext.Ajax.request({
            url: 'BS350/servicediagnosis/client_running',
            timeout: 5000,
            success: function (response) {
                me.client_running = Number(response.responseText);
            },
            failure: function () {
                console.warn('client running failed');
            }
        });

        ctrl.V.navGrid.on('itemclick', function(self,record) {
            if (ctrl.V.navGrid.title === TR('Service diagnosis')) {
                me.checkVersion();
                if (!me.client_running) {
                    // close all opened tabs
                    var items = APP.tabview.items.items;
                    for (var i1 = items.length-1; i1 >= 0; --i1) {
                        items[i1].close();
                    }
                    // ctrl.setPath(record.raw.path);

                    headerctrl.disconnectedMsgEnabled = false;
                    me.LoadingMask = new Ext.LoadMask(Ext.getBody(), {msg:TR('Start Pruefsoftware...')});
                    me.LoadingMask.show();
                    me.client_running = true;

                    Ext.Ajax.request({
                        url: 'BS350/servicediagnosis/startClient',
                        timeout: 5000,
                        success: function (res) {
                            var resData = Ext.JSON.decode(res.responseText);
                            if (!resData['success']) {
                                Ext.Msg.show({
                                    title:'ERROR',
                                    msg: resData['msg'],
                                    buttons: Ext.Msg.OK,
                                    icon: Ext.Msg.WARNING});
                            }else {
                                setTimeout(me.setClient, 10000);
                            }
                        },
                        failure: function (response) {
                            me.client_running = false;
                            headerctrl.disconnectedMsgEnabled = true;
                            me.LoadingMask.hide();
                            Ext.Msg.show({title:TR('Warning'),
                                    msg: "Start PruefSoftware failed",
                                    buttons: Ext.Msg.OK,
                                    icon: Ext.Msg.WARNING});
                        }
                    });
                }
            }else if (me.client_running) {
                try {
                    // close open tabs from service diagnosis
                    var l = APP.tabview.items.items.length;
                    for (var i2 = l-1; i2 >= 0; --i2) {
                        var tmpname = APP.tabview.items.items[i2].ctrlName;
                        if (Ext.Array.contains(me.service_ctrl,tmpname)) {
                            APP.tabview.items.items[i2].close();
                        }
                    }
                    ctrl.setPath(record.raw.path);
                    me.closeClient();
                } catch (e) {
                    console.warn('Error occured',e);
                }
            }
        });
    },

    // check dirs on sd card
    checkVersion: function () {
        var me = APP.getController('NavigationCtrl');
        Ext.Ajax.request({
            url: 'servicediagnosis/isFullVersion',
            success: function(response) {
                if (response.responseText === 'True') {
                    var items = me.navData.home.items.diagnosis.items.service_diagnosis.items;
                    if (items['typeplate'] === undefined) {
                        items['typeplate'] = { icon: 'ico24-typeplate', name: TR('Type Plate'), ctrl: 'TypePlateCtrl' };
                        items['fw_update'] = { icon: 'ico24-firmware', name: TR('Update firmware'), ctrl: 'UpdateCtrl' };
                    }
                }
                me.setPath('/home/diagnosis');  // needed to show new items
                me.setPath('/home/diagnosis/service_diagnosis');
            },
            failure: function() {
                console.warn('Ajax request isFullVersion finished with failure');
            }
        });
    },

    initView: function () {
    },

    setClient: function () {
        var me = APP.getController('HardwareCtrl');
        Ext.Ajax.request({
            url: 'BS350/servicediagnosis/client_running',
            timeout: 5000,
            success: function (response) {
                var client_ready = Number(response.responseText);

                if (client_ready) {
                    me.LoadingMask.hide();
                }
                else setTimeout(me.setClient, 1000);
            },
            failure: function () {
                setTimeout(me.setClient, 1000);
            }
        });
    },

    closeClient: function (logout) {
        var me = this;
        me.LoadingMask = new Ext.LoadMask(Ext.getBody(), {msg:TR('Stop Pruefsoftware...')});
        me.LoadingMask.show();
        Ext.Ajax.request({
            url: 'BS350/servicediagnosis/closeClient',
            timeout: 10000,
            success: function () {
                me.resetClient(logout);
            },
            failure: function (response) {
                console.warn('close Client finished with failure',response);
                me.LoadingMask.hide();
            }
        });
    },

    resetClient: function(logout){
        var me = APP.getController('HardwareCtrl');
        Ext.Ajax.request({
            url: 'BS350/servicediagnosis/client_running',
            timeout: 5000,
            success: function (response) {
                var client_ready = Number(response.responseText);

                if (!client_ready)
                {
                    Ext.Ajax.request({
                        url: 'BS350/servicediagnosis/resetClient',
                        timeout: 10000,
                        success: function () {
                            me.client_running = false;
                            me.LoadingMask.hide();
                            APP.getController('HeaderCtrl').disconnectedMsgEnabled = true;
                            if (logout) {
                                window.location = './logout';
                            }
                        },
                        failure: function (response) {
                            if (response.statusText === "communication failure"){
                                setTimeout(function() { me.resetClient(logout); }, 1000);
                            }else console.warn('reset Client finished with failure', response);
                        }
                    });
                } else setTimeout(function() { me.resetClient(logout); }, 1000);
            },
            failure: function () {
                setTimeout(function() { me.resetClient(logout); }, 1000);
            }
        });
    },

    selectAll: function () {
        this.toggleAll(true);
    },

    deselectAll: function () {
        this.toggleAll(false);
    },

    toggleAll: function (value) {
        // var value = this.V.testsGrid.store.data.items[0].get('active');
        this.V.testsGrid.store.data.each( function(record) {
            if (record.get('cmd') === 'LicTst' && value) {
                return;
            }
            // record.set('active', !value);
            record.set('active', value);
        });
        this.V.btnStartTest.setDisabled(!value);
    },

    disableButtons: function (value)
    {
        var me = this;
        me.V.btnStartTest.setDisabled(value);
        me.V.testsGrid.setDisabled(value);
        me.V.btnSelectAll.setDisabled(value);
        me.V.btnDeselectAll.setDisabled(value);
        me.V.btnExportTestLog.setDisabled(value);
    },

    /**
     *  start first selected test
     */
    startTest: function() {
        var me = this;
        me.disableButtons(true);
        me.selectedTests = [];

        // get all selected testcmds
        me.V.testsGrid.store.data.each( function(record,id) {
            if (record.get('active') === true) {
                me.selectedTests.push({cmd: record.get('cmd'), name: record.get('name'), id: id });
            }
        });
        var test = me.selectedTests.shift();
        if (test === undefined) {
            me.disableButtons(false);
            return
        }
        me.writeCommand(test);
    },

    /**
     * send command to start testfunction
     *
     * @param test : name of the testfunction
     */
    writeCommand: function (test) {
        var me = APP.getController('HardwareCtrl');
        me.V.progressBar.updateText(test.name + ' 0%');
        me.V.resulttext.setText(test.name + ' started');
        me.V.resultpanel.setBodyStyle('background: #ffffff 0 0 ');
        me.V.testsGrid.store.data.items[test.id].set('result', -1);
        me.actualTestId = test.id;
        Ext.Ajax.request({
            url: 'BS350/servicediagnosis/writeToClient',
            method: 'POST',
            params: {'command': test.cmd },
            timeout: 5000,
            success: function () {
                me.readFromClient()
            },
            failure: function () {
                console.warn('writeToClient finished with failure', this);
                me.disableButtons(false);
            }
        });
    },

    /**
     * read from client until 'Rueckgabewert' received
     * then start next selected test
     */
    readFromClient: function () {
        var me = APP.getController('HardwareCtrl');
        Ext.Ajax.request({
            url: 'BS350/servicediagnosis/readFromClient',
            timeout: 5000,
            success: function (response) {
                var res = Ext.JSON.decode(response.responseText);

                if( res !== null) {
                    var parser = new DOMParser();
                    var xmlDoc = parser.parseFromString(res,"text/xml");
                    var d = new Date();
                    var t = d.toLocaleDateString() + ' ' + d.toLocaleTimeString();
                    var nodeName = xmlDoc.childNodes[0].nodeName;

                    switch (nodeName) {
                        case 'PrintProgressBar':
                            var newVal = parseInt(xmlDoc.childNodes[0].childNodes[1].childNodes[0].nodeValue, 10);
                            me.V.progressBar.updateProgress(newVal/100);
                            me.V.progressBar.updateText(me.V.progressBar.text.replace(/[\d]+/,newVal));
                            break;
                        case 'Timeout':
                            var timeout = xmlDoc.childNodes[0].childNodes[0].childNodes[0].nodeValue;
                            // TODO better solution for -5s
                            me.timerID = me.startTimer(timeout-5);
                            me.V.outputarea.setValue(t +' '+ xmlDoc.childNodes[0].attributes[1].nodeValue +' '+ xmlDoc.childNodes[0].childNodes[0].childNodes[0].nodeValue +'s'+'\n'+ me.V.outputarea.getValue());
                            break;
                        case 'PrintMainText':
                            // TODO try html tag <b> or using gridpanel for single line
                            me.V.outputarea.setValue(t +' '+ xmlDoc.childNodes[0].childNodes[0].nodeValue +'\n'+ me.V.outputarea.getValue());
                            break;
                        case 'Rueckgabewert':
                            var info = xmlDoc.childNodes[0].attributes[1].nodeValue;
                            var errorcode = xmlDoc.getElementsByTagName("Wert")[0].childNodes[0].nodeValue;
                            me.V.outputarea.setValue(t +' '+ info +' Errorcode: '+ errorcode +'\n'+ me.V.outputarea.getValue());
                            me.V.resulttext.setText(info +'\nErrorcode: '+ errorcode);
                            me.stopTimer();

                            var retVal = parseInt(xmlDoc.childNodes[0].childNodes[0].childNodes[0].nodeValue);
                            me.V.testsGrid.store.data.items[me.actualTestId].set('result', retVal);

                            // set background color to green if no error otherwise red
                            if (retVal === 0) {
                                me.V.resultpanel.setBodyStyle('background: #339933 0 0 ');
                            } else {
                                me.V.resultpanel.setBodyStyle('background: #ff3300 0 0 ');
                            }

                            // if more selected test available start next
                            if (me.selectedTests.length) {
                                var test = me.selectedTests.shift();
                                setTimeout(me.writeCommand(test), 500);
                            }else {
                                me.disableButtons(false);
                            }
                    }
                    // read until rueckgabewert
                    if (nodeName != 'Rueckgabewert')
                        setTimeout(me.readFromClient, 10);
                }else {
                    setTimeout(me.readFromClient, 200);
                }
            },
            failure: function () {
                console.warn('readFromClient finished with failure', this);
                setTimeout(me.readFromClient, 230);
                me.disableButtons(false);
            }
        });
    },

    startTimer: function(timeout) {
        var me = this;
        var startTime = new Date().getTime();

        var timerID = setInterval(function() {
            var elapsedTime = (new Date().getTime() - startTime)/ 1000;
            var progress = 1 - elapsedTime/timeout;
            var remainingTime = Math.round(timeout - elapsedTime);

            me.V.timeoutBar.updateProgress(progress);
            me.V.timeoutLabel.setText(me.V.timeoutLabel.text.replace(/:.*/,': ' + remainingTime + 's'));

            if (remainingTime <= 0) {
                clearInterval(timerID);
            }
        }, 1000, startTime);

        return timerID;
    },

    stopTimer: function () {
        clearInterval(this.timerID);
    },

    exportTestLog: function () {
        var me = APP.getController('HardwareCtrl');
        me.view.getEl().mask(TR("Exporting..."));
        me.V.btnExportTestLog.setDisabled(true);

        var exportTime = +new Date();
        var diff = exportTime - APP.statusTime;
        if( diff < APP.updateDelay ) {
            // write header with info from typeplate
            Ext.Ajax.request({
                url: 'BS350/servicediagnosis/readTypePlate',
                success: function (response) {
                    var res = Ext.JSON.decode(response.responseText);

                    // transform string to array
                    var parser = new DOMParser();
                    var xmlDoc = parser.parseFromString(res,"text/xml");
                    var tmpString = xmlDoc.childNodes[0].childNodes[1].childNodes[0].nodeValue;
                    var tmpArray = tmpString.split('"').filter(function(e){return e !== ""});
                    var obj = {};
                    for ( var i in tmpArray) {
                        tmpArray[i] = tmpArray[i].replace(/\n|\r/g,'');
                        obj[tmpArray[i].split(':')[0]] = tmpArray[i].split(':')[1];
                    }
                    var cycle = APP.getController('HeaderCtrl').status.cycle;
                    var header = 'MNR: '+obj['MNR'] +' Code: '+obj['Code']+ ' FD: '+obj['Fertigungsdatum'] +' SN: '+obj['Seriennummer'] +' Cycle: ' + cycle ;

                    window.location.href = 'BS350/servicediagnosis/exportTestLog?data=' + encodeURIComponent(header + '\n\n' + me.V.outputarea.getValue());
                    me.V.btnExportTestLog.setDisabled(false);
                    me.view.getEl().unmask();
                },
                failure: function () {
                    console.warn('exportTestLog finished with failure', this);
                    me.V.btnExportTestLog.setDisabled(false);
                    me.view.getEl().unmask();
                }
            });
        }
        else{
            setTimeout(me.exportTestLog, 250);
        }
    }
});