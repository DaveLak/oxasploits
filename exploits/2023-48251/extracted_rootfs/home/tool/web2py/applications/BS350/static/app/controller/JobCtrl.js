/*global Ext: false, TR: false */
Ext.define('BS350.controller.JobCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['JobView'],
  stores: ['JobStore', 'JobGridStore'],

  items: [
    { name: 'jobSelect', query: '#selectCombo', actions: {beforeselect: 'checkChanges'}},
    { name: 'jobSelect', query: '#selectCombo', actions: {change: 'selectJob'}},
    { name: 'saveButton', query: '#jobSaveButton', actions: {click: 'saveJob'}},
    { name: 'infoButton', query: '#jobInfoButton', actions: {click: 'showInfo'}},
    { name: 'deleteJobButton', query: '#removeJobButton', actions: {click: 'deleteJob'}},
    { name: 'renameJobButton', query: '#renameJobButton', actions: {click: 'renameJob'}},
    { name: 'importJobButton', query: '#importJobButton', actions: {click: 'importJob'}},
    { name: 'exportJobButton', query: '#exportJobButton', actions: {click: 'exportJob'}},
    { name: 'myJobview', query: '#myJobview'},
    { name: 'importAllButton', query: '#importAllButton', actions: {click: 'importAll'}},
    { name: 'exportAllButton', query: '#exportAllButton', actions: {click: 'exportAll'}},
    { name: 'viewButton', query: '#viewButton', actions: {click: 'editStep'}},
    { name: 'waitButton', query: '#waitButton', actions: {click: 'addWaitStep'}},
    { name: 'idcodeButton', query: '#idcodeButton', actions: {click: 'addIDCodeStep'}},
    { name: 'tightButton', query: '#tightButton', actions: {click: 'addTightStep'}},
    /*{ name: 'branchButton', query: '#branchButton', actions: {click: 'addBranch'}},*/
    { name: 'removeButton', query: '#removeButton', actions: {click: 'removeStep'}},
    { name: 'editButton', query: '#editButton', actions: {click: 'editStep'}},
    { name: 'msg_lbl_bbar', query: '#msg_lbl_bbar'}


  ],

  currentJob: null,
  showErrorOnExit: {'hasPrgStep': false, 'lastStepPrgStep': false, 'minSteps': false, 'scanGrouping': false},
  forceClose: false,
  maxJobSteps: 20,
  jobID: 0,
  disableScanBtn: false,
  maxScanSteps: [],
  scangroup: false,

  init: function (application) {
    this.forceClose = false;
    this.jobStore = Ext.create('BS350.store.JobStore');
    this.jobStore.on('update', this.jobStoreChanged, this);
    this.jobStore.on('datachanged', function () { this.saving = false; }, this);
  },

  initView: function () {
    if (this.access !== 'w') {
      this.V.saveButton.hide();
      this.V.deleteJobButton.hide();
      this.V.renameJobButton.hide();
      this.V.importJobButton.hide();
      this.V.exportJobButton.hide();
      this.V.importAllButton.hide();
      this.V.exportAllButton.hide();
      this.V.tightButton.hide();
      this.V.waitButton.hide();
      this.V.idcodeButton.hide();
      /*this.V.branchButton.hide();*/
      this.V.removeButton.hide();
      this.V.editButton.hide();
      this.V.viewButton.show();
      if (this.V.viewButton !== undefined) {
        this.V.viewButton.show();
      }
    }
    this.view.on('select', this.stepSelected, this);
    this.view.on('itemdblclick', this.editStep, this);
    this.forceclose = false;
    this.V.msg_lbl_bbar.show();

    this.V.waitButton.hide();
    //if (this.access === 'w') {
    this.impDirectJobCtrl = this.getController('ImpDirectJobCtrl');
    this.impDirectJobCtrl.on('eventImportAllJobs', this.updateJobsAftImpAll, this);
    this.expDirectJobCtrl = this.getController('ExpDirectJobCtrl');
    //}

    // Disable select program combo store load function.
    // Combo store will be filled manually
    this.V.jobSelect.getStore().load = function () {};

    this.stepCtrl = this.getController('JobStepCtrl');
    this.stepCtrl.access = this.access;
    var me = this;

    me.view.getEl().mask(TR("Loading..."));
    Ext.Ajax.request({
      url: '/BS350/job/getLastEditJob',
      timeout: 180000,
      success: function (response) {
        var data = Ext.JSON.decode(response.responseText);
        if (data !== null) {
          var idx = data.lastModif;
          me.loadData(idx);
        } else {
          //when we fail then CR8956
          me.loadData(0);
        }
      },
      failure: function (response, opts) {
        //when we fail then CR8956
        me.loadData(0);
      }
    });

    this.on('stepadded', function () {
      if (this.maxJobStepReached()) {
        this.V.msg_lbl_bbar.setText(TR('Maximal job steps reached'));
        this.V.tightButton.setDisabled(true);
        this.V.idcodeButton.setDisabled(true);
      }
      this.countScanSteps();
      this.stepSelected(null, null, this.getSelectedStepPos().row, this.getSelectedStepPos().col + 1);
    });
    this.on('stepremoved', function () {
      if (!this.maxJobStepReached()) {
        this.V.tightButton.setDisabled(false);
        this.V.idcodeButton.setDisabled(false);
      }
      this.countScanSteps();
      this.stepSelected(null, null, this.getSelectedStepPos().row, this.getSelectedStepPos().col + 1);
    });
  },

  loadData: function (defaultJob) {
    this.jobStore.load({
      scope: this,
      callback: function () {
        this.updateJobStore(defaultJob);
      }
    });
  },

  updateJobStore: function (defaultJob) {
    var me = this,
        comboStore = me.V.jobSelect.getStore(),
        id,
        job,
        item;
    comboStore.removeAll();
    for (id = 1; id <= me.jobStore.count(); id++) {
      job = me.jobStore.getById(id);
      comboStore.add({jobId: id, jobName: job.get('Name'), jobSlot: job.get('Slot')});
    }
    if (defaultJob !== undefined) {
      item = comboStore.getAt(comboStore.findExact('jobSlot', defaultJob));
      me.V.jobSelect.select(item);

      me.innerSelectJob(me.V.jobSelect, item.get('jobId'));
    } else {
      me.V.jobSelect.select(comboStore.first());
      me.view.getEl().unmask();
    }
  },

  updateJobsAftImpAll : function(){
    if (!this.view) return;
    var cuslot = 0;
    if (this.currentJob !== null) {
      cuslot = this.currentJob.get('Slot');
    }
    this.loadData(cuslot);
  },

  showValidationErrorsSummary: function () {
    var hasProgramStep = false;
    if (this.currentJob.steps().data.items.length < 3) {
      this.V.msg_lbl_bbar.setText(TR('Step: Job needs at least one step'));
      if(this.currentJob.data.Name != "n.a") {
        this.showErrorOnExit['minSteps'] = false;
      }else{
        this.showErrorOnExit['minSteps'] = true;
      }
      this.V.msg_lbl_bbar.show();
    }
    else
    {
      this.showErrorOnExit['minSteps'] = true;
      if (this.scangroup)
      {
        this.V.msg_lbl_bbar.setText(TR('Every ID code group can contain 5 ID code steps per single program'));
        this.showErrorOnExit['scanGrouping'] = false;
        this.V.msg_lbl_bbar.show();
      }
      else
      {
        // this.V.msg_lbl_bbar.hide();
        Ext.Array.forEach(this.currentJob.steps().data.items, function(item) {
          if(item.data.Type === 1 ) {
            hasProgramStep = true;
          }
        });
        if(hasProgramStep) {
          this.V.msg_lbl_bbar.setText(TR(''));
          this.showErrorOnExit['hasPrgStep'] = true;
          this.showErrorOnExit['scanGrouping'] = true;
        }
        else {
          this.V.msg_lbl_bbar.setText(TR('Single Program step is needed!'));
          this.showErrorOnExit['hasPrgStep'] = false;
        }

      }
    }
  },
  jobStoreChanged:  function (store, record) {

    var me = this, comboStore, comboRec;
    me.verifyScanSteps();
    this.showValidationErrorsSummary();
    if (!this.currentJob.isValid()) {
      this.V.saveButton.setDisabled(true);
      return;
    }
    if (this.saving) { return; }
    if (!this.deleting && this.currentJob.get('Name') === 'n.a') {
      this.currentJob.set({Name: ''});
    }
    this.V.saveButton.setDisabled(!this.jobStore.hasChanged());

    comboStore = this.V.jobSelect.getStore();
    comboRec = comboStore.getAt(record.getId() - 1);
    comboRec.set('jobName', this.currentJob.get('Name'));
    this.V.jobSelect.select(comboRec);

  },

  checkChanges: function(combo, jobId) {
    var me = this;
    if (this.jobStore.hasChanged()  &&  me.showErrorOnExit['hasPrgStep']  &&  me.showErrorOnExit['lastStepPrgStep'] && me.showErrorOnExit['scanGrouping'] && me.showErrorOnExit['minSteps']) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') {
            me.saveJob(null, null, {callback: function () {
              me.V.saveButton.setDisabled(!me.jobStore.hasChanged());
              me.saving = false;
              me.V.jobSelect.select(jobId);
            } });
          }
          else if (btn === 'no') {
            me.jobStore.discardChanges();
            me.V.saveButton.setDisabled(!me.jobStore.hasChanged());
            me.V.jobSelect.select(jobId);
          }else{
            //do nothing
          }
        },
        icon: Ext.Msg.QUESTION
      });
      return false
    } else if (this.jobStore.hasChanged()) {
      if (!me.showErrorOnExit['hasPrgStep']) {
        Ext.Msg.alert(TR('Info'), TR('Single Program step is needed!'));
        return false;
      }
      else if (!me.showErrorOnExit['lastStepPrgStep']) {
        Ext.Msg.alert(TR('Info'), TR('Last step need to be a single program step'));
        return false;
      }
      else if (!me.showErrorOnExit['scanGrouping']) {
        Ext.Msg.alert(TR('Info'), TR('Every ID code group can contain 5 ID code steps per single program'));
        return false;
      }
      else if (!me.showErrorOnExit['minSteps']) {
        Ext.Msg.alert(TR('Info'), TR('Step: Job needs at least one step'));
        return false;
      }
    }
    return true;
  },



  selectJob: function (combo, jobId) {
    var me = this;
    me.view.getEl().mask(TR("Loading..."));
    me.innerSelectJob(combo, jobId);
  },

  innerSelectJob: function (combo, jobId) {
    var me = this;
    var job;
    var store;
    var jobLoaded;
    var importexport;
    var maxCol;

    me.view.getSelectionModel().deselectAll();
    store = me.view.getStore();
    me.V.removeButton.setDisabled(true);
    me.V.editButton.setDisabled(true);
    me.V.tightButton.setDisabled(true);
    me.V.idcodeButton.setDisabled(true);


    this.jobID = jobId;
    this.currentJob = me.jobStore.getById(jobId);

    if(this.currentJob.get('Name') !== 'n.a'){
      Ext.Ajax.request({
        url: '/BS350/job/singleJob',
        method: 'GET',
        params: {slot: me.currentJob.get('Slot')},
        success: function (res) {
          var data;
          if (res.responseText !== "None") {
            data = Ext.JSON.decode(res.responseText);

            var jobData = data.job;
            me.hasScanner = data.hasScanner;
            me.jobStore.loadRawData(jobData, true);

            job = me.jobStore.getById(jobId);
            me.currentJob = job;

            if (!job) {return; }

            if(me.currentJob.get('Comment').length > 0){
              me.V.infoButton.setText(TR('Info')+' [...]');
            }
            else{
              me.V.infoButton.setText(TR('Info'));
            }

            if (job && job.steps) {
              jobLoaded = store.loadFromSteps(job.steps());

              if(!jobLoaded){
                Ext.Ajax.request({
                  url: '/BS350/job/removeJob',
                  method: 'POST',
                  params: {slot: me.currentJob.get('Slot'), defectJob: true},
                  success: function (res) {
                    me.loadData(me.currentJob.get('Slot'));
                  }
                });
              }

              maxCol = store.getMaxCol(0, 0);
              me.view.setNumColumns(maxCol + 1);
            } else {
              store.removeAll();
              me.view.setNumColumns(1);
            }

            if (!job.steps().hasListener('update')) {
              job.steps().addListener('update', function () { me.jobStoreChanged(store, job); });
            }

            me.V.jobSelect.setFieldLabel('Job ' + job.get('Slot'));

            importexport = job.get('Name') !== 'n.a';
            me.V.exportJobButton.setDisabled(!importexport);
            me.V.exportAllButton.setDisabled(false);
            me.showValidationErrorsSummary();
            me.view.getEl().unmask();
            me.countScanSteps();
            me.verifyScanSteps();

            Ext.Array.each(job.steps().data.items, function(item){
              Ext.Array.each(item.data.children[0].children, function(child){
                if(child.myText == 'Name'){
                  item.data.Name = child.myValue;
                }
              })
            });
            Ext.ComponentQuery.query('#myJobview')[0].view.refresh();
          }
        }
      });
    }
    else{
      job = this.jobStore.getById(jobId);
      if (!job) {return; }
      if (!job.steps) { alert('Job has no "steps"'); return; }
      me.V.infoButton.setText(TR('Info'));

      if (job && job.steps) {
        store.loadFromSteps(job.steps());
        maxCol = store.getMaxCol(0, 0);
        this.view.setNumColumns(maxCol + 1);
      } else {
        store.removeAll();
        this.view.setNumColumns(1);
      }

      if (!job.steps().hasListener('update')) {
        job.steps().addListener('update', function () { me.jobStoreChanged(store, job); });
      }
      this.V.jobSelect.setFieldLabel('Job ' + job.get('Slot'));

      importexport = job.get('Name') !== 'n.a';
      this.V.exportJobButton.setDisabled(!importexport);
      this.V.exportAllButton.setDisabled(false);
      this.showValidationErrorsSummary();
      var myJobview = Ext.ComponentQuery.query('#myJobview')[0];
      myJobview.getSelectionModel().setCurrentPosition({row: myJobview.getStore().getCount() - 1, column: 1});
      me.view.getEl().unmask();
    }

  },

  stepSelected: function (model, record, row, column) {
    var gridStore = this.view.getStore(),
        item = gridStore.getItem(row, column - 1),
        buttonStatus = {tightButton: false, /*branchButton: false,*/ removeButton: false},
        i, scanRow = [],
        prevItem,
        k, s;

    this.verifyScanSteps();

    if (!item || item.type === START_STEP || item.type === NOK_STEP || item.type === NOK_CONN_STEP) {
      buttonStatus = {tightButton: false, /* branchButton: false, */ removeButton: false, waitButton: false, idcodeButton: false};
    } else {
      if (item.type === END_STEP) {
        prevItem = gridStore.getItem(row - 1, column - 1);
        if (prevItem.type === NOK_STEP) {
          buttonStatus = {tightButton: true, /*branchButton: false,*/ removeButton: true, waitButton: true, idcodeButton: true};
        } else {
          buttonStatus = {tightButton: true, /*branchButton: false,*/ removeButton: false, waitButton: true, idcodeButton: true};
        }
      }
      else if (item.type === TIGHTB_STEP) {
        buttonStatus = {tightButton: true, /*branchButton: false,*/ removeButton: true, waitButton: true, idcodeButton: true};
      }

      else if(item.type === IDCODE_STEP || PROGRAM_STEP || END_STEP){
        if(this.maxScanSteps.length > 0){
          for(i=0;i < this.maxScanSteps.length; i++){
            for(k= this.maxScanSteps[i]-5; k <= this.maxScanSteps[i];k++){
              scanRow.push(k+1);
            }
          }
          if(Ext.Array.contains(scanRow, row)){
            buttonStatus = {tightButton: true, /*branchButton: true,*/ removeButton: true, waitButton: true, idcodeButton: false};
          }
          else{
            buttonStatus = {tightButton: true, /*branchButton: true,*/ removeButton: true, waitButton: true, idcodeButton: true};
          }
        }
        else{
          buttonStatus = {tightButton: true, /*branchButton: true,*/ removeButton: true, waitButton: true, idcodeButton: true};
        }
      }
      else{
        buttonStatus = {tightButton: true, /*branchButton: true,*/ removeButton: true, waitButton: true, idcodeButton: true};
      }
    }
    if (item) {
      buttonStatus.editButton = true;
    } else {
      buttonStatus.editButton = false;
    }
    if (this.maxJobStepReached()) {
      buttonStatus.tightButton = false;
      buttonStatus.idcodeButton = false;
    }

    for (s in buttonStatus) {
      if (buttonStatus.hasOwnProperty(s)) {
        this.V[s].setDisabled(!buttonStatus[s]);
      }
    }

  },

  saveJob: function (button, event, eOpts) {
    var me = this, importexport;
    this.saving = true;
    if (!eOpts.callback) {
      me = this;
      eOpts.callback = function () { me.saving = false; me.view.getEl().unmask();};
    }
    var myJobview = Ext.ComponentQuery.query('#myJobview')[0];
    me.view.getEl().mask(TR("Saving..."));

    //eOpts.callback = function () {   me.saving = false;};

    this.jobStore.upload(eOpts.callback);
    eOpts.callback = null;

    this.V.saveButton.setDisabled(true);
    importexport = this.currentJob.get('Name') !== 'n.a';
    this.V.exportJobButton.setDisabled(!importexport);
    this.V.exportAllButton.setDisabled(false);

  },

  deleteJob: function (button) {
    var me = this;
    Ext.Msg.show({
      title: TR('Remove Job'),
      msg: TR('All job data will be removed. Are you sure?'),
      buttons: Ext.Msg.YESNO,
      buttonText: {yes: TR('Continue'), no: TR('Cancel')},
      icon: Ext.Msg.QUESTION,
      fn: function (btn) {
        if (btn === 'yes') {
          me.deleting = true;
          var myJobview = Ext.ComponentQuery.query('#myJobview')[0];
          me.view.getEl().mask(TR("Deleting..."));
          Ext.Ajax.request(
              {
                url: '/BS350/job/removeJob',
                method: 'POST',
                params: {slot: me.currentJob.get('Slot')},
                success: function (res) {
                  me.loadData(me.currentJob.get('Slot'));
                }
              }
          );

          me.deleting = false;
        }
      }
    });
  },

  importJob: function () {
    var me = this,
        currSlot = this.currentJob.get('Slot'),

        uploadWin = Ext.create('Ext.window.Window', {
          title: TR('Import'),
          layout: 'fit',
          modal : true,
          width : 400,
          height: 120,
          closable: false,
          items: [
            {
              xtype: 'form',
              itemId : 'uploadForm',
              bodyPadding : 15,
              hidden: false,

              layout : 'anchor',
              defaults: { anchor: '100%' },
              items : [{
                xtype: 'filefield',
                name: 'fileupload',
                itemId: 'fileupload',
                fieldLabel: TR('Job File'),
                labelWidth: 100,
                msgTarget: 'side',
                allowBlank: false,
                toignore: false,
                buttonText: TR('Browse...'),
                listeners:{
                    afterrender: function(cmp){
                      cmp.fileInputEl.set({
                        accept: '.nxjob'
                      });
                    },
                    validitychange: function(cmp, valid) {
                      if (valid === true){
                        try {
                          Ext.ComponentQuery.query("#uploadBtn")[0].handler();
                        }catch(err){}
                      }
                    }
                },
                validator: function (value) {
                  if (value.match(/\.nxjob$/g)) {
                    Ext.ComponentQuery.query("#uploadBtn")[0].setDisabled(false);
                    return true;
                  }
                  Ext.ComponentQuery.query("#uploadBtn")[0].setDisabled(true);
                  return TR('File must be a *.nxjob Job');
                }
              }]
            }
          ],
          buttons: [
            { itemId: 'uploadBtn', text: TR('Upload'),
              handler: function () {

                var win = this.up('window'),
                    form = win.down('form').getForm(),
                    submitForm = function () {
                      if (form.isValid()) {
                        form.submit({
                          url: '/BS350/job/importJobFile',
                          params: { job: currSlot },
                          waitMsg: TR('Importing job...'),
                          success: function (form, action) {
                            //var jobCtrl = APP.getController("JobCtrl");
                            me.view.getEl().mask(TR("Importing..."));
                            me.loadData(currSlot);
                            win.close();
                          },
                          failure: function (form, action) {
                            switch (action.failureType) {
                              case Ext.form.action.Action.CLIENT_INVALID:
                                Ext.Msg.alert(TR('Failure'), TR('Form fields may not be submitted with invalid values'));
                                break;
                              case Ext.form.action.Action.CONNECT_FAILURE:
                                Ext.Msg.alert(TR('Failure', TR('Ajax communication failed')));
                                break;
                              case Ext.form.action.Action.SERVER_INVALID:
                                Ext.Msg.alert(TR('Failure'), TR(action.result.msg));
                                break;
                              default:
                                Ext.Msg.alert(TR('Failure'), TR(action.result.msg));
                                break;
                            }
                            win.close();
                          }
                        });
                      }
                    };
                Ext.Ajax.request({
                  url: "/BS350/job/existingJobs",
                  success: function (response) {
                    var existingJobs = Ext.JSON.decode(response.responseText);
                    if (Ext.Array.contains(existingJobs, currSlot)) {
                      Ext.Msg.confirm(TR("Job exists"), TR("Job for this slot exists already. Do you want to overwrite?"), function (arg) {
                        if (arg === "no") {
                          win.close();
                        } else if (arg === "yes") {
                          Ext.ComponentQuery.query('#fileupload')[0].hide();
                          submitForm();
                        }
                      });
                    } else {
                      Ext.ComponentQuery.query('#fileupload')[0].hide();
                      submitForm();
                    }
                  },
                  failure: function () {
                    // silent failing
                  }
                });
              }
            },
            { itemId: 'cancelBtn', text: TR('Cancel'), handler: function () {this.up('window').close(); } }
          ]
        });
    uploadWin.on('show', function(){
      try{
        if (!Ext.isIE10m) {
          uploadWin.down('form').down('filefield').fileInputEl.dom.click();
        }
      }catch(err){}
    }, this);
    uploadWin.show();
  },

  exportJob: function () {
    var me = this;
    me.view.getEl().mask(TR("Exporting..."));

    Ext.Ajax.request({
      url: '/BS350/job/exportJobFile',
      method: 'GET',
      params: {num: me.currentJob.get('Slot'), name: me.currentJob.get('Name')},
      success: function (res) {
        var resData = Ext.JSON.decode(res.responseText);
        if (!resData.success) {
          Ext.Msg.alert('Export failed:', resData.msg);
        } else {
          window.location.href = '/BS350/fs/downloadR?f=' + encodeURIComponent(resData.msg);
        }
        me.view.getEl().unmask();
      },
      failure: function (res) {
        me.view.getEl().unmask();
        Ext.Msg.alert('Export failure:', res);
      }
    });
  },

  importAll: function () {
    var me = this;
    me.impDirectJobCtrl.createView(undefined, {}).show();
  },

  exportAll: function () {
    var me = this;
    me.expDirectJobCtrl.createView(undefined, {}).show();
  },

  showInfo: function () {
    var win = Ext.create('Ext.window.Window', this.view.infoDialog);
    win.readonly = this.access !== 'w';
    win.setJob(this.currentJob);
    win.show();
  },

  renameJob: function () {
    var me = this,
        modalWin = Ext.create('Ext.window.Window', {
          title: TR('Name'),
          height: 130,
          width: 250,
          modal: true,
          resizable: false,
          layout: { type: 'vbox', align: 'middle', padding: 10, defaultMargin: 10 },
          items: [
            { xtype: 'label', text: TR('Enter the new job name:') },
            {  xtype: 'textfield',
              width: 220,
              itemId: 'renameJobTxtId',
              enforceMaxLength: false,
              maxLength: 20,
              maskRe: /[^\"\'\\]/,
              validator: function (value) {
                if (value.indexOf("'") > -1 || value.indexOf('"') > -1 || value.indexOf("\\") > -1) {
                  return TR("No quotations marks or backslashes are allowed");
                }
                return true;
              },
              value: me.currentJob.get('Name') },
            { xtype: 'container', layout: { type: 'hbox', pack: 'stretch', align: 'bottom', padding: 10},
              items: [
                {  xtype: 'button', itemId: 'okButton', text: TR('OK'), width: 70, margin: '0 0 0 20',
                  handler: function () {
                    var renameJobTxtId = modalWin.down('#renameJobTxtId');
                    if (renameJobTxtId.isValid()) {
                      me.currentJob.set({Name: renameJobTxtId.value });
                      modalWin.hide();
                      //me.updateJobStore(me.currentJob.get('Slot'));
                    }
                  }
                },
                {  xtype: 'button', itemId: 'cancelButton', text: TR('Cancel'), margin: '0 0 0 20', autoWidth: true, handler: function () { modalWin.hide(); } }
              ]
            }
          ]
        }).show();
  },

  maxJobStepReached: function () {
    if (this.currentJob !== null) {
      if(this.maxJobSteps < (this.currentJob.stepsStore.data.items.length + 1)) {
        return true;
      }
    }
    return false;
  },

  countScanSteps: function () {
    var job = this.view.getStore(),
        me= this,
        i=1;

    Ext.Array.forEach(job.data.items, function(item) {
      if(item.data['A'].ref.data.Type === 1){
        i = 1;
      }
      if(item.data['A'].ref.data.Type === 5){
        if(i <= 5){
          item.data['A'].ref.data.children[0].children[0].myValue = "ID Input" + i;
          i+=1;
        }
        else{
          i = 1;
          item.data['A'].ref.data.children[0].children[0].myValue = "ID Input" + i;
          i+=1;
        }
      }
    });
    Ext.ComponentQuery.query('#myJobview')[0].view.refresh();
  },

  verifyScanSteps: function () {
    var me = this, hasPrg, prgRow = [], scancount = 1, job;
    me.maxScanSteps = [];
    me.scangroup = false;
    me.disableScanBtn = false;

    job = me.view.getStore();
    Ext.Array.forEach(job.data.items, function(item) {
      if(item.data['A'].ref.data.Type === 1){
        hasPrg = true;
        prgRow.push(item.data['A'].ref.data.Row);
        scancount = 1;
      }
      if(item.data['A'].ref.data.Type === 5){
        scancount += 1;
        if(scancount > 6){
          me.scangroup = true;
          me.disableScanBtn = true;
        }
      }
    });
    if(job.getItem(prgRow[prgRow.length-1]+1, 0) !== undefined){
      if(job.getItem(prgRow[prgRow.length-1]+1, 0).ref.data.Type === 2 || job.getItem(prgRow[prgRow.length-1]+1, 0).ref.data.Type === 1){
        this.showValidationErrorsSummary();
        this.showErrorOnExit['lastStepPrgStep'] = true;
      }
      else {
        this.V.msg_lbl_bbar.setText(TR('Last step need to be a single program step'));
        me.V.idcodeButton.setDisabled(true);
        this.showErrorOnExit['lastStepPrgStep'] = false;
        me.V.saveButton.setDisabled(true);
      }
    }
    else{
      this.V.msg_lbl_bbar.setText(TR('Single Program step is needed'));
      //me.V.idcodeButton.setDisabled(true);
      me.V.saveButton.setDisabled(true);
    }
    Ext.Array.forEach(job.data.items, function(item) {
      if(item.data['A'].ref.data.Type === 5){
        if(item.data['A'].ref.data.children[0].children[0].myValue === "ID Input5"){
          me.maxScanSteps.push(item.data['A'].ref.data.Row);
        }
      }
    });

    if(me.disableScanBtn){
      me.V.saveButton.setDisabled(true);
    }

  },


  addTightStep: function () {
    this.insertItem(PROGRAM_STEP);
    this.fireEvent('stepadded');
  },

  addIDCodeStep: function () {
    this.insertItem(IDCODE_STEP);
    this.fireEvent('stepadded');
  },

  addWaitStep: function () {
    this.insertItem(WAIT_STEP);
    this.fireEvent('stepadded');
  },


  addBranch: function () {
    this.insertItem(TIGHTB_STEP);
  },

  removeStep: function () {
    this.removeItem();
    this.fireEvent('stepremoved');
    this.countScanSteps();
  },

  editStep: function () {
    var stepPos = this.getSelectedStepPos(),
        stepRecord, step, stepView;

    if (stepPos) {
      stepRecord = this.view.getStore().getItem(stepPos.row, stepPos.col);
      step = stepRecord.ref;
      this.stepCtrl.step = step;
      stepView = this.stepCtrl.createView(undefined, {stepType: step.get('Type')}).show();

      if (this.access !== 'w') {

        stepView.down('#btnCancel').setText(TR('Close'));
        Ext.each(Ext.ComponentQuery.query('textfield, checkbox, combobox', stepView), function (e) { e.setReadOnly(true); });
      }
    }
  },

  getScanStepCount: function () {
    var row = this.getSelectedStepPos().row,
        column = this.getSelectedStepPos().col,
        gridStore = this.view.getStore();

    return gridStore.getItem(row-1, column);
  },

  getSelectedStepPos: function () {
    var sel = this.view.getSelectionModel(), row, col;
    if (!sel.selection){
      return null;
    }
    row = sel.selection.row;
    col = sel.selection.column - 1; // -1 Due to numbering col
    if (row < 0 || col < 0) { return null; }
    return { row: row, col: col };
  },

  searchTree: function (object, searchObject){
    var me = this;
    if(object.myText === searchObject){
        return object;
    }
    if (object.children){
        var result = null, i;
        for(i=0; result === null && i < object.children.length; i++){
             result = me.searchTree(object.children[i], searchObject);
        }
        return result;
    }
    return null;
  },

  incrementIdentifier: function(stepPos, stepToBeAdded) {
    var me = this, count = 0, gridStore = this.view.getStore(), prgStepWiped=false;

    Ext.each(gridStore.data.items, function(item, index) {

      if (stepToBeAdded === 1 && !prgStepWiped) {

        if (item.data.A.type === 1 && item.data.A.ref.data.Row > stepPos.row) {
          //if (item.data.A.ref.data.children[1].myValue === "true") {

          var combineID = me.searchTree(item.data.A.ref.data, "Combine multiple ID Inputs to one ID Code");

          if(combineID !== null) {
            if (combineID.myValue === "true") {
              Ext.Msg.alert(TR('Info'), TR('ID Code combination of following Single Program is cleared'));

              for (var i = 0; i < combineID.children.length; i++) {
                if (Ext.String.startsWith(combineID.children[i].myValue, "$ID Input")) {
                  combineID.children[i].myValue = "";
                }
              }
            }
          }
          prgStepWiped = true;
        }
      }

      if (item.data.A.type === 1 && item.data.A.ref.data.Row >= stepPos.row) {
        if(count > 0)
        {
          var combineID = me.searchTree(item.data.A.ref.data, "Combine multiple ID Inputs to one ID Code");
          if(combineID !== null) {
            for (var i = 0; i < combineID.children.length; i++) {
              if (Ext.String.startsWith(combineID.children[i].myValue, "$ID Input")) {
                var rowSpec = parseInt(combineID.children[i].myValue.split('@A')[1], 10) + 1;
                combineID.children[i].myValue = combineID.children[i].myValue.substr(0, 12) + (rowSpec).toString();

              }
            }
          }
        }
        count += 1
      }
    });

  },

  insertItem: function (itemType) {
    var stepPos = this.getSelectedStepPos(), addCol;
    if (stepPos) {
      addCol = this.view.getStore().insertItem(stepPos.row, stepPos.col, itemType);
      this.view.setNumColumns(this.view.columns.length + addCol - 1);
      this.incrementIdentifier(stepPos, itemType)
    }
  },

  refreshScanIdentifier: function(stepPos, stepToBeRemoved){
    var ididentifier, oneShot = 0, gridStore = this.view.getStore(), delStep = false, actualItem = stepToBeRemoved,
        deletedId, me = this, nextStepReached = false, prgStepWiped = false, idSpec;


    ididentifier = "$"+ actualItem.ref.data.children[0].children[0].myValue;
    deletedId= parseInt(actualItem.ref.data.children[0].children[0].myValue.split('ID Input')[1], 10);

    Ext.each(gridStore.data.items, function(item, index) {

      if (item.data.A.type === 1 && item.data.A.ref.data.Row >= stepPos.row) {

        var combineID = me.searchTree(item.data.A.ref.data, "Combine multiple ID Inputs to one ID Code");
        if(combineID !== null){

          for (var i = 0; i < combineID.children.length; i++) {
            if (Ext.String.startsWith(combineID.children[i].myValue, "$ID Input")) {

              var rowSpec = parseInt(combineID.children[i].myValue.split('@A')[1], 10);
              if (rowSpec > stepPos.row)
                combineID.children[i].myValue = combineID.children[i].myValue.substr(0, 12) + (rowSpec - 1).toString();
              else
                combineID.children[i].myValue = combineID.children[i].myValue.substr(0, 12) + (rowSpec).toString();
            }
          }
          if (actualItem.type === 1 && !prgStepWiped) {
            if (item.data.A.type === 1 && item.data.A.ref.data.Row >= stepPos.row) {
              if (combineID.myValue === "true") {
                Ext.Msg.alert(TR('Info'), TR('ID Code combination of following Single Program is cleared'));

                for (var i = 0; i < combineID.children.length; i++) {
                  if (Ext.String.startsWith(combineID.children[i].myValue, "$ID Input")) {
                    combineID.children[i].myValue = "";
                  }
                }
              }
              prgStepWiped = true;
            }
          }
        }
      }
      if (actualItem.type === 5 && item.data.A.type === 1 && item.data.A.ref.data.Row >= stepPos.row) {

        if (!nextStepReached) {

          var combineID = me.searchTree(item.data.A.ref.data, "Combine multiple ID Inputs to one ID Code");
          if (combineID !== null) {

            for (var i = 0; i < combineID.children.length; i++) {
              if (Ext.String.startsWith(combineID.children[i].myValue, ididentifier)) {
                combineID.children[i].myValue = "";
                delStep = true;
              }
            }
            nextStepReached = true;
            if (delStep) {
              for (var i = 0; i < combineID.children.length; i++) {
                if (Ext.String.startsWith(combineID.children[i].myValue, "$ID Input")) {

                  idSpec = parseInt(combineID.children[i].myValue.split('@A')[0].split('$ID Input')[1], 10);

                  if (deletedId < idSpec) {
                    combineID.children[i].myValue = combineID.children[i].myValue.substr(0, 9) + (idSpec - 1).toString() + combineID.children[i].myValue.substr(10);
                  }
                }
              }
            }
          }
        }
      }
    });

  },


  removeItem : function () {
    var stepPos = this.getSelectedStepPos(), remCol, gridStore = this.view.getStore(), stepToBeRemoved;
    if (stepPos && stepPos.row > 0) {
      stepToBeRemoved = gridStore.getItem(stepPos.row, stepPos.col);
      remCol = this.view.getStore().removeItem(stepPos.row, stepPos.col);
      this.view.setNumColumns(this.view.columns.length - remCol - 1);
      this.refreshScanIdentifier(stepPos, stepToBeRemoved);
    }
    this.showValidationErrorsSummary();

    if (!this.currentJob.isValid()) {
      this.V.saveButton.setDisabled(true);
      return;
    }
  },

  askclose: function (panel) {
    var me = this;
    if (me.jobStore.hasChanged() && !me.forceclose && me.showErrorOnExit['hasPrgStep'] && me.showErrorOnExit['lastStepPrgStep'] && me.showErrorOnExit['scanGrouping'] && me.showErrorOnExit['minSteps']) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') { me.saveJob(null, null, {callback: function () {me.view.getEl().unmask(); panel.close(); }}); }
          if (btn === 'no') { me.forceclose = true; panel.close(); }
        },
        icon: Ext.Msg.QUESTION
      });
      return false;
    } else if(me.jobStore.hasChanged()) {
      if( !me.showErrorOnExit['hasPrgStep'] ){
         Ext.Msg.alert(TR('Info'), TR('Single Program step is needed!'));
        return false;
      }
      else if( !me.showErrorOnExit['lastStepPrgStep'] ){
         Ext.Msg.alert(TR('Info'), TR('Last step need to be a single program step'));
        return false;
      }
      else if( !me.showErrorOnExit['scanGrouping'] ){
         Ext.Msg.alert(TR('Info'), TR('Every ID code group can contain 5 ID code steps per single program'));
        return false;
      }
      else if( !me.showErrorOnExit['minSteps'] ){
         Ext.Msg.alert(TR('Info'), TR('Step: Job needs at least one step'));
        return false;
      }
    }
    return true;
  }
});
