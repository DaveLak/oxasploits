/**
 * Created by frank on 5/20/15.
 */
Ext.define('BS350.controller.ResNfsCtrl', {
  extend: 'BS350.custom.ViewController',

  items: [
    /*{name: 'restreeid', query: '#restreeid'},
    {name: 'resformid', query: '#resformid'},
    {name: 'active', query: '#active'},
    {name: 'bgInfo1', query: '#bgInfo'},
    {name: 'bgInfo2', query: '#bgInfo2'},
    {name: 'bgInfo3', query: '#bgInfo3'},
    //{ name: 'rescommonparamtreeid', query: '#rescommonparamtreeid' },
    //{name: 'resstepparamtreeid', query: '#resstepparamtreeid'},
    {name: 'btnMenuUp', query: '#btnMenuUp', actions: {click: 'menuUp'}},
    {name: 'btnMenuDown', query: '#btnMenuDown', actions: {click: 'menuDown'}},
    {name: 'btnSave', query: '#btnSave', actions: {click: 'save'}},
    {name: 'btnDiscard', query: '#btnDiscard', actions: {click: 'getData'}},
    {name: 'btnParams', query: '#btnParams', actions: {click: 'paramsDia'}},
    //{name: 'btnStorage', query: '#btnStorage', actions: {click: 'storageDia'}},
    {name: 'btnResetToFactory', query: '#btnResetToFactory', actions: {click: 'resetToFactory'}}*/
  ],

  view: 'ResNfsView',

  views: ['ResNfsView'],
  controllerName: 'ResNfsCtrl',
  type: 'nfs',
  origData: {},

  forceClose: false,

  initView: function () {
    var me = this;

    if (me.access !== 'w') {
      Ext.each(Ext.ComponentQuery.query('checkbox, combobox, textfield, numberfield', me.view), function (e) {
        e.setReadOnly(true);
      });
      me.view.getDockedItems()[0].hide();
    }

    me.forceClose = false;
    me.view.on('dirtychange', me.updateButtons, me);
    me.view.on('validitychange', me.updateButtons, me);
    me.view.down('#restreeid').myController = me.controllerName;
    var restreeid = me.view.down('#restreeid');
    restreeid.on('load', me.adjustVisibility, restreeid);
    restreeid.on('afteritemexpand', me.adjustVisibility, restreeid);
    restreeid.on('viewready', me.adjustVisibility, restreeid);
    restreeid.on('afterlayout', me.adjustVisibility, restreeid);
    restreeid.on('beforeedit', me.checkReadonly, restreeid);
    restreeid.on('cellclick', me.toggleCheckboxServer, me);
    restreeid.getPlugin().on('edit', me.updateButtons, me);
    me.view.down('#btnStorage').on('click', me.storageDia, me);
    me.view.down('#btnSave').on('click', me.save, me);
    me.view.down('#btnDiscard').on('click', me.discard, me);
    me.view.down('#btnParams').on('click', me.paramsDia, me);
    me.view.down('#btnStorage').on('click', me.storageDia, me);
    me.view.down('#btnResetToFactory').on('click', me.resetToFactory, me);
    me.view.getEl().mask(TR("Loading..."));
    me.getData();
  },

  innerToggleCheckbox: function (here, td, cellIndex, record) {
    if (record.get('type') === 'CHECKBOX' && !record.get('readonly') && cellIndex === 1) {
      if (record.get('myValue') === "true") {
        record.set('myValue', "false");
      } else if (record.get('myValue') === "false" || record.get('myValue') === "") {
        record.set('myValue', "true");
      }
    }
  },

  innerToggleCheckboxIoNioTransmit: function (here, td, cellIndex, record) {
    function setState(dataIndex) {
      dataIndex = dataIndex || 'iotransmit';
      if (record.get(dataIndex) === "true") {
        record.set(dataIndex, "false");
        record.cascadeBy(function (el) {
          el.set(dataIndex, "false");
        });
      } else if (record.get(dataIndex) === "false") {
        if (record.get('tristate')) {
          record.set(dataIndex, "undefined");
          var is_changed = false;
          var parentMyText = record.get('myText');
          record.cascadeBy(function (el) {
            if (el.get('leaf') === true) {
              if (el.isModified(dataIndex)) {
                el.set(dataIndex, el.get(dataIndex) === "true" ? "false": "true");
                is_changed = true;
              }
            } else {
              if (parentMyText !== el.get('myText')) {
                if (el.isModified(dataIndex)) {
                  el.set(dataIndex, el.get(dataIndex) === "true" ? "false" : "true");
                  if (el.isModified(dataIndex)) {
                    el.set(dataIndex, "undefined");
                  }
                  is_changed = true;
                }
              }
            }
          });
          if (is_changed === false) {
            record.set(dataIndex, "true");
            record.cascadeBy(function (el) {
              el.set(dataIndex, "true");
            });
          }
        } else {
          record.set(dataIndex, "true");
          record.cascadeBy(function (el) {
            el.set(dataIndex, "true");
          });
        }
      } else if (record.get(dataIndex) === "undefined") {
        record.set(dataIndex, "true");
        record.cascadeBy(function (el) {
          el.set(dataIndex, "true");
        });
      }

      var depth = record.get('depth');
      var currentRec = record;
      while (depth > 0) {
        var children = currentRec.childNodes;
        if (children.length === 0) {
          // do nothing
        } else {
          var first = true;
          var res = "undefined";
          for (i = 0; i < children.length; i++) {
            var e = children[i];
            if (first) {
              res = e.get(dataIndex);
              first = false;
            } else {
              if (res !== e.get(dataIndex)) {
                res = "undefined";
                //break;
              }
            }
          }
          currentRec.set(dataIndex, res);
        }
        if (currentRec.parentNode !== undefined && currentRec.parentNode !== null) {
          currentRec = currentRec.parentNode;
          depth = currentRec.get('depth');
        }
      }


    }

    if (record.get('type') === 'CHECKBOX' && !record.get('readonly') && cellIndex === 1) {
      setState('iotransmit');
    } else if (record.get('type') === 'CHECKBOX' && !record.get('readonly') && cellIndex === 2) {
      setState('niotransmit');
    }
  },

  innerToggleCheckboxTransmit: function (here, td, cellIndex, record) {

    setState = function (name) {
      if (record.get('myValue') === "true") {
        record.set('myValue', "false");
      } else if (record.get('myValue') === "false") {
        record.set('myValue', "true");
      }
    };

    if (record.get('type') === 'CHECKBOX' && !record.get('readonly') && cellIndex === 1) {
      setState('transmit');
      var setToReadonlyToGetAtLeastOne = function (record) {
        var amount_checked = 0;
        if (record.parentNode.get('myText') === "name") {
          record.parentNode.cascadeBy(function (n) {
            if (n.parentNode.get('myText') === "name") {
              if (n.get('myValue') === "true") {
                amount_checked += 1;
              }
            }
          });
          record.parentNode.cascadeBy(function (n) {
            if (n.parentNode.get('myText') === "name") {
              if (amount_checked < 2) {
                if (n.get('myValue') === "true") {
                  n.set('readonly', true);
                }
              } else {
                n.set('readonly', false);
              }
            }
          });
        }
      };
      setToReadonlyToGetAtLeastOne(record);
    }
  },
  toggleCheckboxServer: function (here, td, cellIndex, record) {
    this.view.down('#bgInfo').setText(TR(record.get('myText') + "_bgInfo"));
    this.innerToggleCheckbox(here, td, cellIndex, record);
  },
  checkDirty: function (tree, targetList) {
    var dirty = false;
    if (tree.getStore().getRemovedRecords().length > 0) {
      dirty = true;
    }
    if ( ! dirty) {
      tree.getStore().getRootNode().cascadeBy(function (el) {
        if (el.get("myText") === "name") {
        }
        if (el.dirty) {
          dirty = true;
          return false;
        }
      });
    }

    if (targetList !== undefined) {
      var i;
      for (i = 0; i < targetList.length; i++) {
        targetList[i].setDisabled(!dirty);
      }
    }
    return dirty;
  },
  checkAllowedActions: function (dialog, relevantParents, record) {
    dialog.down('#btnAdd').setDisabled(true);
    dialog.down('#btnEdit').setDisabled(true);
    dialog.down('#btnRemove').setDisabled(true);
    dialog.down('#btnMenuUp').setDisabled(true);
    dialog.down('#btnMenuDown').setDisabled(true);
    if (Ext.Array.contains(relevantParents, record.parentNode.get('myText')) || Ext.Array.contains(relevantParents, record.get('myText'))) {
      dialog.down('#btnAdd').setDisabled(false);
    }
    if (Ext.Array.contains(relevantParents, record.parentNode.get('myText')) && record.get('itemtype') === 'user') {
      dialog.down('#btnEdit').setDisabled(false);
      dialog.down('#btnRemove').setDisabled(false);
    }
    if (Ext.Array.contains(relevantParents, record.parentNode.get('myText'))) {
      var parent = record.parentNode;
      var treeIndex = parent.indexOf(record);
      if (treeIndex > 0) {
        dialog.down('#btnMenuUp').setDisabled(false);
      }
      if (treeIndex + 1 < record.parentNode.childNodes.length) {
        dialog.down('#btnMenuDown').setDisabled(false);
      }
    }
  },
  disableButtons: function (dialog) {
    dialog.down('#btnAdd').setDisabled(true);
    dialog.down('#btnEdit').setDisabled(true);
    dialog.down('#btnRemove').setDisabled(true);
    dialog.down('#btnMenuUp').setDisabled(true);
    dialog.down('#btnMenuDown').setDisabled(true);
  },
  toggleCheckboxCommonFormat: function (here, td, cellIndex, record) {
    var ctrl = APP.getController(this.myController);
    var myres = ctrl.innerToggleCheckboxIoNioTransmit(here, td, cellIndex, record);
    if (record.get('itemtype') === 'user') {
      ctrl.paramsDialog.down("#bgInfo2").setText("--");
    } else {
      ctrl.paramsDialog.down("#bgInfo2").setText(TR(record.get('myText') + "_bgInfo"));
    }
    ctrl.checkDirty(ctrl.paramsDialog.down('#rescommonparamtreeid'), [ctrl.paramsDialog.down('#btnSaveParams')]);
    return myres;
  },
  updateStorageBgInfo: function (record) {
    if (Ext.Array.contains(['name', 'subdir'], record.parentNode.get('myText'))) {
      var resStr = "";
      var following = false;
      record.parentNode.eachChild(function (el) {
        var user = false;
        var transmit = el.get('myValue') === "true" ? true: false;
        if (transmit) {
          user = el.get('itemtype') === 'user';
          if (following) {
            resStr += " + ";
          }
          if (user) {
            resStr += "\"";
          } else {
            resStr += "[";
          }
          resStr += el.get('myText');
          if (user) {
            resStr += "\"";
          } else {
            resStr += "]";
          }
          following = true;
        }
      });
      this.storageDialog.down("#bgInfo2").setText(resStr);
    } else {
      this.storageDialog.down("#bgInfo2").setText(TR(record.get('myText') + "_bgInfo"));
    }
  },
  toggleCheckboxStorageFormat: function (here, td, cellIndex, record) {
    this.updateStorageBgInfo(record);
    res = this.innerToggleCheckboxTransmit(here, td, cellIndex, record);
    if (record.get('leaf') && cellIndex === 1) {
      layer_iotransmit = "undefined";
      layer_iotransmit_is_changed = false;
      var layer = record.parentNode.childNodes;
      var i;
      for (i = 0; i < layer.length; i++) {
        if (!layer_iotransmit_is_changed) {
          layer_iotransmit = layer[i].iotransmit;
        } else if (layer_iotransmit !== layer[i].iotransmit) {
          layer_iotransmit = "undefined";
          break;
        }
      }
      record.parentNode.set('iotransmit', layer_iotransmit);
    }
    return res;
  },
  adjustVisibility: function () {
    var me = this;
    var node = me.getRootNode();
    node.cascadeBy(function (currNode) {
      if (currNode.raw.invisible === true) {
        me.setNodeVisible(currNode, false);
      }
    });
  },
  checkReadonly: function (sm, record) {
    if (record.record.get('readonly')) {
      return false;
    }
  },
  checkTreeAccess: function (me, store) {
    if (me.access !== 'w') {
      store.getRootNode().cascadeBy(function (el) {
        el.set("readonly", true);
      });
    }
    me.view.updateLayout();
  },

  discard: function () {
    var me = this;
    me.view.getEl().mask(TR("Discarding..."));
    me.getData();
  },

  getData: function () {
    var me = this;
    Ext.Ajax.request({
      url: '/BS350/ressrv/processCfg?proc={0}'.format(me.type.toUpperCase()),
      success: function (res) {
        me.origData = Ext.JSON.decode(res.responseText);
        me.view.down('#resformid').getForm().setValues({active: me.origData.active});
        var treePanel = me.view.down('#restreeid');
        var store = treePanel.getStore();
        var data = store.loadDefaultData(me.origData, me.type);
        if (me.type === "nfs") {
          for (i = 0; i < data.children.length; i++) {
            if (Ext.Array.contains(['user', 'pass'], data.children[i].treeId)) {
              data.children[i].invisible = false;
            }
          }
        }
        store.loadNewData(data, me.checkTreeAccess, me, store);

        //me.view.form.setValues(me.origData);
        me.view.down('#btnSave').setDisabled(true);
        me.view.down('#btnDiscard').setDisabled(true);
        if (me.type === "nfs") {
          var type = store.getRootNode().findChild('treeId', 'type', true);
          var pass = store.getRootNode().findChild('treeId', 'pass', true);
          var user = store.getRootNode().findChild('treeId', 'user', true);
          if (type.get('myValue') === "cifs") {
            user.set('invisible', false);
            pass.set('invisible', false);
            treePanel.setNodeVisible(user, true);
            treePanel.setNodeVisible(pass, true);
          } else {
            user.set('invisible', true);
            pass.set('invisible', true);
            treePanel.setNodeVisible(user, false);
            treePanel.setNodeVisible(pass, false);
          }
        }
        if (me.type === "http") {
          var pass = store.getRootNode().findChild('treeId', 'pass', true);
          var user = store.getRootNode().findChild('treeId', 'user', true);
          var path = store.getRootNode().findChild('treeId', 'path', true);
          var ssl = store.getRootNode().findChild('treeId', 'ssl', true);
          user.set('invisible', true);
          pass.set('invisible', true);
          //path.set('invisible', true);
          ssl.set('invisible', true);
          treePanel.setNodeVisible(user, false);
          treePanel.setNodeVisible(pass, false);
          //treePanel.setNodeVisible(path, false);
          treePanel.setNodeVisible(ssl, false);
        }
        treePanel.doLayout();
        me.view.getEl().unmask();
      },
      failure: function () {
        me.view.getEl().unmask();
      }
    });
  },

  getTransferData: function (succeedingCallback) {
    var me = this;
    Ext.Ajax.request({
      url: '/BS350/ressrv/transferCfg?proc={0}'.format(me.type.toUpperCase()),
      success: function (res) {
        me.origTransferData = Ext.JSON.decode(res.responseText);
        var store = me.paramsDialog.down("#rescommonparamtreeid").getStore();
        var data = store.mergeTransferData(me.origTransferData, me.type);
        store.loadNewData(data, me.checkTreeAccess, me, store);
        //me.view.form.setValues(me.origData);
        me.disableButtons(me.paramsDialog);
        me.paramsDialog.down('#btnSaveParams').setDisabled(true);
        me.view.down('#btnSave').setDisabled(true);
        me.view.down('#btnDiscard').setDisabled(true);
        if (succeedingCallback) {
          succeedingCallback();
        }
      }
    });
  },

  getTransferStorageData: function (succeedingCallback) {
    var me = this;
    Ext.Ajax.request({
      url: '/BS350/ressrv/storageCfg?proc={0}'.format(me.type.toUpperCase()),
      success: function (res) {
        me.origTransferStorageData = Ext.JSON.decode(res.responseText);
        var store = me.storageDialog.down("#resstorageparamtreeid").getStore();
        var data = store.mergeTransferStorageData(me.origTransferStorageData, me.type);
        store.loadNewStorageData(data.tree, me.checkTreeAccess, me, store);
        //me.view.form.setValues(me.origData);
        me.disableButtons(me.storageDialog);
        me.storageDialog.down('#btnSaveParams').setDisabled(true);
        me.view.down('#btnSave').setDisabled(true);
        me.view.down('#btnDiscard').setDisabled(true);
        if (succeedingCallback) {
          succeedingCallback();
        }
      }
    });
  },

  updateButtons: function () {
    var dirty = false;
    if (this.view.down('#resformid') !== null) {
      dirty = this.view.down('#resformid').isDirty();
    }
    var trees = [this.view.down('#restreeid')];
    var i;
    if (!dirty) {
      for (i = 0; i < trees.length; i++) {
        var rootNode = trees[i].getStore().getRootNode();
        rootNode.cascadeBy(function (el) {
          if (el.dirty) {
            dirty = true;
            return;
          }
        });
      }
    }
    this.view.down('#btnSave').setDisabled(!dirty);
    this.view.down('#btnDiscard').setDisabled(!dirty);
  },

  menuUp: function () {
    var sm = this.view.down('#rescommonparamtreeid').getSelectionModel();
    var store = this.view.down('#rescommonparamtreeid').getStore();
    if (sm.hasSelection()) {
      var rec = sm.getSelection()[0];
      if (rec.previousSibling !== null) {
        var prev = rec.previousSibling;
        var rnode = store.getRootNode();
        rnode.insertBefore(rec, prev);
      }
    }
  },

  menuDown: function () {
    var sm = this.view.down('#rescommonparamtreeid').getSelectionModel();
    var store = this.view.down('#rescommonparamtreeid').getStore();
    if (sm.hasSelection()) {
      var rec = sm.getSelection()[0];
      if (rec.nextSibling !== null) {
        var next = rec.nextSibling;
        var rnode = store.getRootNode();
        rnode.insertBefore(next, rec);
      }
    }
  },

  paramsDialog: undefined,
  storageDialog: undefined,

  paramsDia: function () {
    var me = this;
    BS350.custom.ResParamsDialog.getDialog(me);
  },

  cancelParameters: function () {
    this.paramsDialog.hide();
    this.updateButtons();
  },

  cancelStorageParameters: function () {
    this.storageDialog.hide();
    this.updateButtons();
  },

  storageDia: function () {
    var me = this;
    BS350.custom.ResStorageDialog.getDialog(me);
  },

  saveParameters: function (tree) {
    var me = this;
    var res = {};
    var getItem = function (el) {
      var item = {};
      Ext.Array.each(['itemtype', 'column', 'outputkey', 'outputval', 'outputtype', 'iotransmit', 'niotransmit'], function (name, index, myarray) {
        if (el.get(name) !== undefined && el.get(name) !== null) {
          if (name === 'iotransmit' || name === 'niotransmit') {
            item[name] = el.get(name) === "true" ? true : false;
          } else {
            item[name] = el.get(name);
          }
        }
      });
      return item;
    };
    tree.getStore().getRootNode().cascadeBy(function (el) {
      if (el.get('myText') === 'allsteps' && el.get('itemtype') === "") {
        if (res.transmit === undefined) {
          res.transmit = {};
        }
        if (res.transmit.stepdata === undefined) {
          res.transmit.stepdata = {};
        }
        res.transmit.stepdata.allsteps = {
          iotransmit: el.get('iotransmit') === "true" ? true : false,
          niotransmit: el.get('niotransmit') === "true" ? true : false
        };
      }
      if (Ext.Array.contains(['column', 'user', 'system'], el.get('itemtype'))) {
        var path = el.get('treeId').split(".");
        var i;
        var parent = res;
        for (i = 0; i < path.length; i++) {
          if (parent[path[i]] === undefined) {
            if (i === path.length - 1) {
              parent[path[i]] = [];
            } else {
              parent[path[i]] = {};
            }
          }
          parent = parent[path[i]];
          if (i === path.length - 1) {
            parent.push(getItem(el));
          }
        }
      }
    });
    Ext.Ajax.request({
      url: '/BS350/ressrv/restransfer',
      method: 'POST',
      params: {type: me.type},
      jsonData: res,
      success: function (res) {
        //me.paramsDialog.hide(); CR15889 keep window open
        tree.getStore().sync();
        me.updateButtons();
        me.checkDirty(me.paramsDialog.down('#rescommonparamtreeid'), [me.paramsDialog.down('#btnSaveParams')]);
      }
    });
  },

  saveStorageParameters: function (tree) {
    var me = this;
    var resout = {'resultfile': {}};
    var res = resout.resultfile;
    var format = tree.getStore().getRootNode().findChild("myText", "Output format");
    var name = tree.getStore().getRootNode().findChild("myText", "name");
    var subdir = tree.getStore().getRootNode().findChild("myText", "subdir");
    var suffix = tree.getStore().getRootNode().findChild("myText", "suffix");
    var nr_files = tree.getStore().getRootNode().findChild("myText", "nr_files");

    if (nr_files !== null) {
      var nr_files_res = parseInt(nr_files.get('myValue'), 10);
      if ( ! isNaN(nr_files_res)) {
        resout['nr_files'] = nr_files_res;
      }
    }

    if (format !== null) {
      var children = format.get('children');
      var json_formatted_output = format.findChild("myText", "json formatted output", true);
      children[1].myValue = json_formatted_output.get('myValue') == "1" ? "No" : "Yes";
      /* CR14021 START remove i18n for choice of formatted output true / false */
      var choice = json_formatted_output.get('choice');
      for (var j = 0; j < choice.length; j++) {
        if (choice[j][0] === "0") {
          choice[j][1] = "Yes";
        } else if (choice[j][0] === "1") {
          choice[j][1] = "No";
        }
      }
      /* CR14021 END */
      var i;
      for (i = 0; i < children.length; i++) {
        delete children[i].expanded;
        delete children[i].leaf;
      }
      res['format'] = {
        children: format.get('children'),
        myText: format.get('myText')
      };
    }
    function getTransformedRes(root, key, res) {
      if (root !== null) {
        res[key] = [];
        if (root.firstChild !== null) {
          root.cascadeBy(function (el) {
            if (el === root) {
            } else {
              var resel = {
                "itemtype": el.get('itemtype'),
                "outputval": el.get('outputval'),
                "transmit": el.get('myValue') === "true" ? true : false
              };
              if (el.get('column') !== undefined && el.get('column') !== null) {
                resel['column'] = el.get('column');
              }
              res[key].push(resel);
            }
          });
        }
      }
    }
    getTransformedRes(name, 'name', res);
    getTransformedRes(subdir, 'subdir', res);

    if (suffix !== null) {
      res['suffix'] = suffix.get('myValue');
    }

    Ext.Ajax.request({
      url: '/BS350/ressrv/resstorage',
      method: 'POST',
      params: {type: me.type },
      jsonData: resout,
      success: function (res) {
        //me.storageDialog.hide();   CR15889 keep window open
        tree.getStore().sync();
        me.updateButtons();
        me.checkDirty(me.storageDialog.down('#resstorageparamtreeid'), [me.storageDialog.down('#btnSaveParams')]);
      }
    });
  },

  save: function (button, event, eOpts) {
    var me = this;
    me.view.getEl().mask(TR("Saving..."));
    var data = me.view.form.getFieldValues();
    var rootNode = me.view.down('#restreeid').getStore().getRootNode();
    var res = {
      active: data['active'],
      server: {},
      commonparams: {}
    };
    rootNode.cascadeBy(function (el) {
      if (Ext.String.trim(el.get('treeId')) !== "") {
        res.server[el.get('treeId')] = el.get('myValue');
      }
    });

    Ext.Ajax.request({
      url: '/BS350/ressrv/processCfg?proc={0}'.format(me.type.toUpperCase()),
      method: 'POST',
      jsonData: res, //me.origData,
      success: function (res) {
        me.getController('NavigationCtrl').updateActives();
        if (eOpts !== undefined && eOpts.callback) {
          eOpts.callback();
        } else {
          me.getData();
          //me.getTransferData();
        }
        me.view.getEl().unmask();
      },
      failure: function () {
        me.view.getEl().unmask();
      }
    });
    this.view.down('#btnSave').setDisabled(true);
    this.view.down('#btnDiscard').setDisabled(true);
  },

  askclose: function (panel) {
    var me = this;
    if (!me.forceClose && (me.view.down('#restreeid').getStore().isDirty() || me.view.down('#resformid').isDirty())) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') {
            me.forceClose = true;
            me.view.getEl().mask(TR("Saving..."));
            me.save(null, null, {
              callback: function () {
                panel.close();
              }
            });
          }
          if (btn === 'no') {
            me.forceClose = true;
            panel.close();
          }
        },
        icon: Ext.Msg.QUESTION
      });
      return false;
    }
    return true;
  },

  resetTransfer: function () {
    var me = this;
    Ext.MessageBox.confirm(
      TR("Reset to Factory"),
      TR("Reset transfer configuration. Are you sure?"),
      function (answer, anything, obj) {
        if (answer === "yes") {
          me.paramsDialog.getEl().mask(TR("Resetting..."));
          Ext.Ajax.request({
            url: '/BS350/ressrv/reset_transfer',
            method: 'GET',
            params: {type: me.type },
            failure: function () {
              me.paramsDialog.getEl().unmask();
              Ext.alert(TR("Resetting failed"), TR("Resetting was not successful"));
            },
            success: function (res) {
              me.getTransferData(function () {
                me.paramsDialog.down('#btnAdd').setDisabled(true);
                me.paramsDialog.down('#btnEdit').setDisabled(true);
                me.paramsDialog.down('#btnRemove').setDisabled(true);
                me.paramsDialog.down('#btnMenuUp').setDisabled(true);
                me.paramsDialog.down('#btnMenuDown').setDisabled(true);
                me.paramsDialog.down('#btnSaveParams').setDisabled(true);
                //me.paramsDialog.down('#btnCancelParams').setDisabled(true);
                me.paramsDialog.getEl().unmask();
              });
            }
          });
        }
      }
    );

  },

  resetStorage: function () {
    var me = this;
    Ext.MessageBox.confirm(
      TR("Reset to Factory"),
      TR("Reset storage configuration. Are you sure?"),
      function (answer, anything, obj) {
        if (answer === "yes") {
          me.storageDialog.getEl().mask(TR("Resetting..."));
          Ext.Ajax.request({
            url: '/BS350/ressrv/reset_storage',
            method: 'GET',
            params: {type: me.type},
            failure: function () {
              me.storageDialog.getEl().unmask();
              Ext.alert(TR("Resetting failed"), TR("Resetting was not successful"));
            },
            success: function (res) {
              me.getTransferStorageData(function () {
                me.storageDialog.down('#btnAdd').setDisabled(true);
                me.storageDialog.down('#btnEdit').setDisabled(true);
                me.storageDialog.down('#btnRemove').setDisabled(true);
                me.storageDialog.down('#btnMenuUp').setDisabled(true);
                me.storageDialog.down('#btnMenuDown').setDisabled(true);
                me.storageDialog.down('#btnSaveParams').setDisabled(true);
                //me.storageDialog.down('#btnCancelParams').setDisabled(true);
                me.storageDialog.getEl().unmask();
              });
            }
          });
        }
      }
    );
  },

  resetToFactory: function () {
    var me = this;
    var reset = function () {
      me.view.getEl().mask(TR("Resetting..."));
      Ext.Ajax.request({
        url: '/BS350/ressrv/processCfg?proc={0}&factory=true'.format(me.type.toUpperCase()),
        success: function (res) {
          me.getController('NavigationCtrl').updateActives();
          me.getData();
          me.view.getEl().unmask();
        },
        failure: function () {
          me.view.getEl().unmask();
        }
      });
    };

    var title = TR('Reset to factory');
    var msg = TR('Do you want to discard the current configuration and reset to factory? All relevant configuration files are to be overwritten.');
    BS350.custom.Utils.showResetToFactoryConfirmation(reset, title, msg);
  }
});