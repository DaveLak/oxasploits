/*global Ext: false, TR: false, BS350: false, START_STEP: false, END_STEP: false, SCAN_STEP: false*/
Ext.define('BS350.controller.MasterJobCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['MasterJobView'],
  stores: ['MasterJobStore', 'MasterJobGridStore'],

  items: [
    { name: 'saveButton', query: '#masterSaveButton', actions: {click: 'saveJob'}},
    { name: 'infoButton', query: '#masterInfoButton', actions: {click: 'showInfo'}},
    { name: 'viewButton', query: '#viewButton', actions: {click: 'editStep'}},
    { name: 'branchButton', query: '#branchButton', actions: {click: 'addNewBranch'}},
    { name: 'removeBranchButton', query: '#removeBranchButton', actions: {click: 'removeBranch'}},
    { name: 'scanButton', query: '#scanButton', actions: {click: 'addScanStep'}},
    { name: 'removeButton', query: '#removeButton', actions: {click: 'removeStep'}},
    { name: 'editButton', query: '#editButton', actions: {click: 'editStep'}},
    { name: 'resetButton', query: '#reset', actions: {click: 'reset'}},
    { name: 'msg_lbl_bbar', query: '#msg_lbl_bbar'},
    { name: 'importModeButton', query: '#importModeButton', actions: {click: 'importMode'}},
    { name: 'exportModeButton', query: '#exportModeButton', actions: {click: 'exportMode'}}
  ],

  currentJob: null,
  forceClose: false,
  storeChanged: false,
  maxScanLimit: 2,
  currentColumn: 0,
  maximumColumns: 2,
  activeColumn: 0,

  /**jslint unparam: false */
  init: function (application) {
    /*jslint unparam: true */
    this.forceClose = false;
    this.jobStore = Ext.create('BS350.store.MasterJobStore');
    this.jobStore.on('update', this.jobStoreChanged, this);
    this.jobStore.on('datachanged', function () { this.saving = false; }, this);
  },

  initView: function () {
    var me = this;
    if (this.access !== 'w') {
      this.V.saveButton.hide();
      this.V.scanButton.hide();
      this.V.branchButton.hide();
      this.V.removeBranchButton.hide();
      this.V.resetButton.hide();

      this.V.removeButton.hide();
      this.V.editButton.hide();
      this.V.importModeButton.hide();
      this.V.exportModeButton.hide();
      this.V.viewButton.show();
    }
    Ext.Ajax.request({
      url: 'BS350/channel/hasScanner',
      //async: false,
      timeout: 6000,
      success: function (res) {
        var result = Ext.JSON.decode(res.responseText);
        me.hasScanner = result;
      }
    });
    this.view.on('select', this.stepSelected, this);
    this.view.on('itemdblclick', this.editStep, this);
    this.forceclose = false;


    //this.V.msg_lbl_bbar.hide();
    // Disable select program combo store load function.
    // Combo store will be filled manually

    this.stepCtrl = this.getController('MasterJobStepCtrl');
    this.stepCtrl.access = this.access;

    this.view.getEl().mask(TR("Loading..."));
    this.loadData();

    this.V.scanButton.setDisabled(true);
    this.V.removeButton.setDisabled(true);
    this.V.removeBranchButton.setDisabled(true);
    this.V.editButton.setDisabled(true);
  },

  loadData: function () {
    this.jobStore.load({
      scope: this,
      callback: function () {
        this.view.getEl().unmask();
        this.selectJob();
        this.jobStoreChanged();
      }
    });
  },

  selectJob: function () {
    var me = this,
        store = me.view.getStore(),
        job = this.jobStore.data.getByKey(1); // fixed getById issue since ext4.2.1
    this.currentJob = job;

    if (me.currentJob && me.currentJob.get('Comment').length > 0) {
      me.V.infoButton.setText(TR('Info') + ' [...]');
    } else {
      me.V.infoButton.setText(TR('Info'));
    }
    if (job) {
      if (job.steps().data.items[0].get('Type') === SELECTION_STEP) {
        me.activeColumn = job.steps().data.get(0).get('children')[0].children[0].myValue;
      }
      store.loadFromSteps(job.steps());
      me.currentColumn = store.getMaxCol(0, 0) + 1;
      this.view.setNumColumns(me.currentColumn);
    } else {
      store.removeAll();
      this.view.setNumColumns(1);
      me.currentColumn = 1;
    }

    this.V.branchButton.setDisabled(!(me.currentColumn < me.maximumColumns));

    if (!job.steps().hasListener('update')) {
      job.steps().addListener('update', function () { me.jobStoreChanged(); });
    }
    var myModeView = Ext.ComponentQuery.query('#myMasterJobview')[0];
    if (myModeView.getStore().getCount() === 2) {
      myModeView.getSelectionModel().setCurrentPosition({row: myModeView.getStore().getCount() - 1, column: 1});
    }

  },

  /*
   checkTriggerValidity: function () {
   var steps = this.currentJob.steps();
   var start_steps;
   var valid = true;

   start_steps = steps.queryBy(function (r) {
   return r.get('Type') === START_STEP;
   });

   if (start_steps.length >= 2) {
   // For now check only first 2 column -> expand later to all
   if (start_steps.items[0].data.children[2].children[1].myValue ===
   start_steps.items[1].data.children[2].children[1].myValue) {
   valid = false;
   }
   }
   return valid;
   },*/


  checkScanStepsValidity: function () {

    var steps = this.currentJob.steps();
    var valid = {}, scan_steps;

    if (steps.data.length > 3) {
      for (var col = 0; col < this.currentColumn; col++) {
        valid[col] = true;

        scan_steps = steps.queryBy(function (r) {
          return r.get('Type') === SCAN_STEP && r.get('Column') === col;
        });

        if (scan_steps.length >= 2) {
          scan_steps.sortBy(function(rec1, rec2) {
            return rec1.get('Row') > rec2.get('Row') ? 1 : -1;
          });

          if (scan_steps.get(0).data.children[2].children[1].myValue === "1" &&
              (scan_steps.get(1).data.children[2].children[1].myValue === "4")) {}
          else
            valid[col] = false

        }
      }
    }
    return valid;
  },

  jobStoreChanged:  function () {

    //var triggerValid = this.checkTriggerValidity();
    var validObj = this.checkScanStepsValidity();
    var scanValid = true;

    for (var i in validObj) {
        if (validObj[i] === false) {
            scanValid = false;
            break;
        }
    }


    if (scanValid) {
      this.V.msg_lbl_bbar.hide();//setText("");
    }
    else if (!scanValid) {
      this.V.msg_lbl_bbar.show();
      this.V.msg_lbl_bbar.setText(TR('Two ID Input steps can only be used with ID Code as target in first step and ID Input Assignment in second step'));
    }
    /*
     else if (scanValid && !triggerValid) {
     this.V.msg_lbl_bbar.show();
     this.V.msg_lbl_bbar.setText(TR("Trigger source in Start steps cannot be the same"));
     }
     else {
     this.V.msg_lbl_bbar.setText(TR('ID Input target and trigger source are invalid'));
     }*/

    var valid = this.storeChanged && scanValid;// && triggerValid;

    this.V.saveButton.setDisabled(!valid);
  },



  /**jslint unparam: false */
  stepSelected: function (model, record, row, column) {
    /*jslint unparam: true */
    this.V.editButton.setDisabled(true);
    var gridStore = this.view.getStore();
    var item = gridStore.getItem(row, column - 1);
    var buttonStatus = {removeButton: false};

    if (!item) {
      buttonStatus = {removeButton: false, scanButton: false, editButton: false };
    }
    else if(item.type === ROW_CONN_STEP || item.type === COL_CONN_STEP)
    {
      buttonStatus = {removeButton: false, scanButton: false, editButton: false };
    }
    else if (item.type === START_STEP || item.type === SELECTION_STEP) {
      buttonStatus = {removeButton: false, scanButton: false, editButton: true };
    }
    else {
      if (item.type === END_STEP)
      {
        var prevItem = gridStore.getItem(row - 1, column - 1);
        buttonStatus = {removeButton: false, scanButton: true, editButton: true };
      } else {
        buttonStatus = {removeButton: true, scanButton: true, editButton: true };
      }
    }
    if (this.maxScanStepsInColReached(column-1)) {
      buttonStatus.scanButton = false;
    }

    buttonStatus.branchButton = (this.currentColumn < this.maximumColumns);
    buttonStatus.removeBranchButton = (this.currentColumn > 1) && column > 1;

    var s;
    for (s in buttonStatus) {
      if (buttonStatus.hasOwnProperty(s)) {
        this.V[s].setDisabled(!buttonStatus[s]);
      }
    }
  },


  /**jslint unparam: false */
  saveJob: function (button, event, eOpts) {
    /*jslint unparam: true */
    this.saving = true;
    if (!eOpts.callback) {
      var me = this;
      eOpts.callback = function () { me.saving = false; me.view.getEl().unmask(); };
    }
    this.view.getEl().mask(TR("Saving..."));
    try {
      this.jobStore.upload(eOpts.callback);
    } catch (e) {
      eOpts.callback();
    }

    eOpts.callback = null;

    this.V.saveButton.setDisabled(true);
    this.storeChanged = false;
  },

  showInfo: function () {
    var win = Ext.create('Ext.window.Window', this.view.infoDialog);
    win.readonly = this.access !== 'w';
    win.setJob(this.currentJob);
    win.show();
    this.jobStoreChanged();
  },


  maxScanStepsInColReached: function (col) {
    var scan_count = 0;

    Ext.Array.each(this.currentJob.stepsStore.data.items, function(rec){
      if (rec.get('Column') === col)
        if (rec.get('Type') === SCAN_STEP)
          scan_count++;
    })

    return (scan_count >= this.maxScanLimit);
  },


  addNewBranch: function () {
    var me = this;
    if ( (me.currentColumn) < me.maximumColumns) {

      this.view.getStore().setColItem(0, (me.currentColumn), COL_CONN_STEP);
      this.view.getStore().setColItem(1, (me.currentColumn), ROW_CONN_STEP);

      this.view.getStore().insertStartEnd(2, (me.currentColumn), START_STEP);
      this.view.getStore().insertStartEnd(3, (me.currentColumn), END_STEP);

      this.storeChanged = true;
      this.jobStoreChanged();
      me.currentColumn++;
      this.view.setNumColumns((me.currentColumn));
    }

    this.V.branchButton.setDisabled(!(me.currentColumn < me.maximumColumns));
    this.V.removeBranchButton.setDisabled(!(this.currentColumn > 1));
  },


  removeBranch: function () {
    var me = this;
    var stepPos = this.getSelectedStepPos();

    if (stepPos && stepPos.col > 0) {
      me.view.getStore().deleteColumn(stepPos.col)

      me.storeChanged = true;
      me.jobStoreChanged();
      me.currentColumn--;
      me.view.setNumColumns((me.currentColumn));

      if (me.currentJob.steps().data.items[0].get('Type') === SELECTION_STEP) {
        var active = me.currentJob.steps().data.get(0).get('children')[0].children[0].myValue;
        if (active >= me.currentColumn)
        {
          me.currentJob.steps().data.get(0).get('children')[0].children[0].myValue = 0;
          me.activeColumn = 0;
          me.view.view.refresh();
        }
      }

      me.V.branchButton.setDisabled(!(me.currentColumn < me.maximumColumns));
      me.V.removeBranchButton.setDisabled(!(me.currentColumn > 1));
    }
  },


  addScanStep: function () {
    this.insertItem(SCAN_STEP);
    this.V.saveButton.setDisabled(false);
    this.V.removeButton.setDisabled(false);
    this.storeChanged = true;
    this.jobStoreChanged();
  },

  removeStep: function () {
    this.removeItem();
    var stepPos = this.getSelectedStepPos();
    // addition of one prevents off-by-one error:
    this.stepSelected(null, null, stepPos.row, stepPos.col + 1);
    this.V.saveButton.setDisabled(false);
    this.storeChanged = true;
    this.jobStoreChanged();
  },

  editStep: function () {
    var stepPos = this.getSelectedStepPos();

    if (stepPos) {
      var stepRecord = this.view.getStore().getItem(stepPos.row, stepPos.col);

      if (stepRecord.type === COL_CONN_STEP || stepRecord.type === ROW_CONN_STEP)
        return;

      var step = stepRecord.ref;

      this.stepCtrl.step = step;
      this.stepCtrl.selectedColumn = stepPos.col;
      this.stepCtrl.columnCnt = this.currentColumn;
      var stepView = this.stepCtrl.createView(undefined, {stepType: step.get('Type')}).show();

      if (this.access !== 'w') {
        stepView.down('#btnCancel').setText(TR('Close'));
      }
    }
  },

  reset: function () {
    var me = this;
    var resetToFactory = function () {
      me.view.getEl().mask(TR("Resetting..."));
      Ext.Ajax.request({
        url: '/BS350/master/reset',
        success: function () {
          me.jobStore.removeAll();
          me.jobStore.reload();
          me.view.getEl().unmask();
        },
        failure: function () {
          me.view.getEl().unmask();
        }
      });
    };

    var title = TR('Reset to factory');
    var msg = TR('Do you want to discard the current configuration and reset to factory? All relevant configuration files are to be overwritten.');
    BS350.custom.Utils.showResetToFactoryConfirmation(resetToFactory, title, msg);
  },

  getSelectedStepPos: function () {
    var sel = this.view.getSelectionModel();
    if (!sel.selection) { return null; }
    var row = sel.selection.row;
    var col = sel.selection.column - 1; // -1 Due to numbering col
    if (row < 0 || col < 0) { return null; }
    return { row: row, col: col };
  },


  insertItem: function (itemType) {
    var stepPos = this.getSelectedStepPos();
    if (stepPos) {
      this.view.getStore().insertItem(stepPos.row, stepPos.col, itemType);
      this.view.setNumColumns(this.currentColumn);
    }
  },

  removeItem : function () {
    var stepPos = this.getSelectedStepPos();
    if (stepPos && stepPos.row > 0) {
      this.view.getStore().removeItem(stepPos.row, stepPos.col);
      this.view.setNumColumns(this.currentColumn);
    }
    if (!this.currentJob.isValid()) {
      this.V.saveButton.setDisabled(true);
      return;
    }
  },

  importMode: function () {
    var me = this,
        uploadWin = Ext.create('Ext.window.Window', {
          title: TR('Import'),
          layout: 'fit',
          modal : true,
          width : 400,
          height: 120,
          closable: false,
          items: [
            {
              xtype: 'form',
              itemId : 'uploadForm',
              bodyPadding : 15,
              hidden: false,

              layout : 'anchor',
              defaults: { anchor: '100%' },
              items : [{
                xtype: 'filefield',
                name: 'fileupload',
                itemId: 'fileupload',
                fieldLabel: TR('Mode File'),
                labelWidth: 100,
                msgTarget: 'side',
                allowBlank: false,
                toignore: false,
                buttonText: TR('Browse...'),
                listeners:{
                  afterrender: function(cmp){
                    cmp.fileInputEl.set({
                      accept: '.nxmod'
                    });
                  },
                  validitychange: function(cmp, valid) {
                    if (valid === true){
                      try {
                        Ext.ComponentQuery.query("#uploadBtn")[0].handler();
                      }catch(err){}
                    }
                  }
                },
                validator: function (value) {
                  if (value.match(/\.nxmod$/g)) {
                    Ext.ComponentQuery.query("#uploadBtn")[0].setDisabled(false);
                    return true;
                  }
                  Ext.ComponentQuery.query("#uploadBtn")[0].setDisabled(true);
                  return TR('File must be a *.nxmod Mode');
                }
              }]
            }
          ],
          buttons: [
            { itemId: 'uploadBtn', text: TR('Upload'),
              handler: function () {

                var win = this.up('window'),
                    form = win.down('form').getForm(),
                    submitForm = function () {
                      if (form.isValid()) {
                        form.submit({
                          url: '/BS350/master/importMode',
                          waitMsg: TR('Importing mode...'),
                          success: function (form, action) {
                            me.view.getEl().mask(TR("Importing..."));
                            me.loadData();
                            win.close();
                          },
                          failure: function (form, action) {
                            switch (action.failureType) {
                              case Ext.form.action.Action.CLIENT_INVALID:
                                Ext.Msg.alert(TR('Failure'), TR('Form fields may not be submitted with invalid values'));
                                break;
                              case Ext.form.action.Action.CONNECT_FAILURE:
                                Ext.Msg.alert(TR('Failure', TR('Ajax communication failed')));
                                break;
                              case Ext.form.action.Action.SERVER_INVALID:
                                Ext.Msg.alert(TR('Failure'), TR(action.result.msg));
                                break;
                              default:
                                Ext.Msg.alert(TR('Failure'), TR(action.result.msg));
                                break;
                            }
                            win.close();
                          }
                        });
                      }
                    };
                Ext.Msg.confirm(TR("Overwrite Mode"), TR("Do you want to overwrite the mode?"), function (arg) {
                  if (arg === "no") {
                    win.close();
                  } else if (arg === "yes") {
                    Ext.ComponentQuery.query('#fileupload')[0].hide();
                    submitForm();
                  }
                });
              }
            },
            { itemId: 'cancelBtn', text: TR('Cancel'), handler: function () {this.up('window').close(); } }
          ]
        });
    uploadWin.on('show', function(){
      try{
        if (!Ext.isIE10m) {
          uploadWin.down('form').down('filefield').fileInputEl.dom.click();
        }
      }catch(err){}
    }, this);
    uploadWin.show();
  },

  exportMode: function () {
    var me = this;
    me.view.getEl().mask(TR("Exporting..."));

    Ext.Ajax.request({
      url: '/BS350/master/exportMode',
      method: 'GET',
      //params: {num: me.currentJob.get('Slot'), name: me.currentJob.get('Name')},
      success: function (res) {
        var resData = Ext.JSON.decode(res.responseText);
        if (!resData.success) {
          Ext.Msg.alert('Export failed:', resData.msg);
        } else {
          window.location.href = '/BS350/fs/downloadR?f=' + encodeURIComponent(resData.msg);
        }
        me.view.getEl().unmask();
      },
      failure: function (res) {
        me.view.getEl().unmask();
        Ext.Msg.alert('Export failure:', res);
      }
    });
  },

  askclose: function (panel) {
    var me = this;
    if (me.storeChanged && !me.forceclose) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') { me.saveJob(null, null, {callback: function () {panel.close(); }}); }
          if (btn === 'no') { me.forceclose = true; me.storeChanged = false; panel.close(); }
        },
        icon: Ext.Msg.QUESTION
      });
      return false;
    }
    return true;
  }
});
