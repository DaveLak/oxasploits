__author__ = 'frank'

import atoms

class IdleEnTmpl:

    def __init__(self):
        self.data = []

    def requires(self):
        self.data.append('c = require "constants"')
        self.data.append('f = require "runFunctions"')
        self.data.append('plc = require "plcsignals"')
        self.data.append('codes = require "scancodes"')
        self.data.append('')

    def initNode(self, user, comment, date, display_time):
        self.data.append('local initNode = {')
        self.data.append('   name = "initNode",')
        self.data.append('   timeout = 300,')
        self.data.append('   type = c.TypeIdleStartNode,')
        self.data.append('   selectsCw = 0,')
        self.data.append('   selectsEn = 0,')
        self.data.append('   displayJobSteps = 1,')
        self.data.append('   displayTime = %s,' % display_time)
        self.data.append('   clearIDCode = 0,')
        self.data.append('   jobComment = \'%s\',' % comment)
        self.data.append('   jobUser = \'%s\',' % user)
        self.data.append('   jobDate = %d' % date)
        self.data.append('}')
        self.data.append('')

    def localNode(self):
        self.data.append('-- Atoms for Idle Script ---')
        self.data.append('atoms  = {}')
        self.data.append('')
        self.data.append('-- Lokaler Knoten --')
        self.data.append('atoms["$Local"] = {')
        self.data.append('   type = c.TypeDevice, ')
        self.data.append('   mode = c.DeviceModeLocal,')
        self.data.append('   dest = "1"')
        self.data.append('}')
        self.data.append('')

    def jobEnable(self):
        self.data.append('atoms["$JobEnable"]={')
        self.data.append('   text ="",')
        self.data.append('   type = c.TypeTriggerOut,		-- TriggerIn --')
        self.data.append('   mode = c.TriggerOutModeBmsIn, 		-- Warten auf Job Cw --')
        self.data.append('   dest  = plc.In.JobEnable,')
        self.data.append('   state = 1,')
        self.data.append('   range = 1,')
        self.data.append('   valueList = {}')
        self.data.append('}')

    def waitJobEnable(self):
        self.data.extend(atoms.WaitJobEnable())

    def bmsEnable(self):
        self.data.extend(atoms.BmsEnable())

    def publishAtoms(self):
        self.data.append('f.publishAtoms(atoms,function (a) cpp.job:addAtom(a) end)')
        self.data.append('')

    def nodes(self):
        self.data.append('nodes = {}')
        self.data.append('nodes[1] = {}')
        self.data.append('nodes[2] = {}')
        self.data.append('nodes[3] = {}')
        self.data.append('nodes[4] = {}')
        self.data.append('nodes[5] = {}')
        self.data.append('nodes[6] = {}')
        self.data.append('nodes[7] = {}')
        self.data.append('nodes[8] = {}')
        self.data.append('')
        self.data.append('')

    def workflow(self, job, prg):
        self.data.append('------------ CS/SE System ------- Channel Signals -------------------------')
        self.data.append('nodes[1].atom = atoms["$Local"]')
        self.data.append('nodes[1].successor = {{var = "dummy",val = nil, next = nodes[2] }}')
        self.data.append('')
        if prg or job:
          self.data.append('nodes[2].atom = atoms["$JobEnable"]')
          self.data.append('nodes[2].successor = {{var = "dummy",val = nil, next = nodes[3] }}')
          self.data.append('')
          self.data.append('nodes[3].atom = atoms["$WaitJobEnable"]')
          self.data.append('nodes[3].successor = {{var = "dummy",val = nil, next = f.EndNode }}')
          self.data.append('')
          """self.data.append('nodes[3].successor = {{var = "dummy",val = nil, next = nodes[4] }}')
          self.data.append('')
          self.data.append('nodes[4].atom = atoms["$BmsEnable"]')
          self.data.append('nodes[4].successor = {{var = "dummy",val = nil, next = f.EndNode }}')"""
        else:
          self.data.append('nodes[2].atom = atoms["$WaitJobEnable"]')
          self.data.append('nodes[2].successor = {{var = "dummy",val = nil, next = nodes[3] }}')
          self.data.append('')
          self.data.append('nodes[3].atom = atoms["$BmsEnable"]')
          self.data.append('nodes[3].successor = {{var = "dummy",val = nil, next = f.EndNode }}')
        self.data.append('------------ CS/SE System ------- END -------------------------------------')
        self.data.append('')
        self.data.append('')
        self.data.append('--Eigentlicher Start Code--')
        self.data.append('f.setInitNode(initNode)')
        self.data.append('f.checkPlausib(nodes)')
        self.data.append('f.go(nodes[1])')
        self.data.append('f.cleanUpNodes(atoms, nodes)')
        self.data.append('package.loaded["atoms"]=nil')

    def create(self, prg, job, user, comment, date, display_time):
        self.requires()
        self.initNode(user, comment, date, display_time)
        self.localNode()
        if prg or job:
            self.jobEnable()
        self.data.append('')
        self.waitJobEnable()
        if not (prg or job):
            self.bmsEnable()
        self.publishAtoms()
        self.nodes()
        self.workflow(job, prg)

        return self.data

