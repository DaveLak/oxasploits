/*global Ext: false, TR: false, BS350: false */
Ext.define('BS350.controller.FccTestModeCtrl', {
  extend: 'BS350.custom.ViewController',
  views: ['FccTestModeView'],
  items: [
    { name: 'form', query: '#fccTestModeForm', actions: { dirtychange: 'updateButtons', validitychange: 'updateButtons' } },
    { name: 'fccTestModeActive', query: '#fcc-test-mode' },
    { name: 'saveBtn', query: '#btnSave', actions: { click: 'save' } },
    { name: 'startBtn', query: '#btnStartTx', actions: { click: 'startTx' } },
    { name: 'stopBtn', query: '#btnStopTx', actions: { click: 'stopTx' } },
    { name: 'discardBtn', query: '#btnDiscard', actions: { click: 'discardData' } },
    { name: 'restartBtn', query: '#btnRestart', actions: { click: 'restartWlan' } },
    { name: 'resetBtn', query: '#btnReset', actions: { click: 'resetToFactory' } },
    { name: 'msg_lbl_bbar', query: '#msg_lbl_bbar' }
  ],

  initView: function () {
    var fcctestmodepanel = Ext.ComponentQuery.query("#fcctestmodeview")[0];
    this.view.getEl().mask(TR("Loading..."));
    this.updateData();
    this.V.form.form.reset();

  },

  discardData: function () {
    this.view.getEl().mask(TR("Discarding..."));
    this.updateData();
  },

  updateData: function () {
    var me = this;
    var fcctestmodepanel = Ext.ComponentQuery.query("#fcctestmodeview")[0];
    Ext.Ajax.request({
      url: '/BS350/wlan/fcc',
      success: function (res) {
        var data = Ext.JSON.decode(res.responseText);
        me.V.form.form.setValues(data);
        me.view.getEl().unmask();
      }
    });
  },

  _BoolTo_0_1: function (prop) {
    if (prop === false) {
      return 0;
    }
    if (prop === true) {
      return 1;
    }
  },

  startTx: function (button, event, eOpts) {
    var me = this;
    me.V.startBtn.setDisabled(true);
    Ext.Ajax.request({
      url: '/BS350/wlan/fccStartTx',
      success: function (res) {
        var data = Ext.JSON.decode(res.responseText);
        if (res.responseText === "0") {
          me.V.msg_lbl_bbar.setText(TR("Successfully started Continuous TX"));
          var fadeOut = new Ext.util.DelayedTask(function () {
            me.V.msg_lbl_bbar.setText("");
            me.V.startBtn.setDisabled(false);
          });
          fadeOut.delay(7000);
        } else {
          me.V.msg_lbl_bbar.setText(TR("Starting Continuous TX returned with errorcode") + ": " + res.responseText);
          me.V.startBtn.setDisabled(false);
        }
      },
      failure: function (res) {
        me.V.startBtn.setDisabled(false);
      }
    });
  },
  stopTx: function (button, event, eOpts) {
    var me = this;
    me.V.stopBtn.setDisabled(true);
    Ext.Ajax.request({
      url: '/BS350/wlan/fccStopTx',
      success: function (res) {
        var data = Ext.JSON.decode(res.responseText);
        if (res.responseText === "0") {
          me.V.msg_lbl_bbar.setText(TR("Successfully stopped Continuous TX"));
          var fadeOut = new Ext.util.DelayedTask(function () {
            me.V.msg_lbl_bbar.setText("");
            me.V.stopBtn.setDisabled(false);
          });
          fadeOut.delay(7000);
        } else {
          me.V.msg_lbl_bbar.setText(TR("Stopping Continuous TX returned with errorcode") + ": " + res.responseText);
          me.V.stopBtn.setDisabled(false);
        }
      },
      failure: function (res) {
        me.V.stopBtn.setDisabled(false);
      }
    });
  },

  save: function (button, event, eOpts) {
    var me = this;
    var data = me.V.form.form.getFieldValues();
    if (data['fcc-test-mode'] === undefined) {
      data['fcc-test-mode'] = false;
    }
    data.DcfOnOff = this._BoolTo_0_1(data.DcfOnOff);
    data.Scrambler = this._BoolTo_0_1(data.Scrambler);
    me.view.getEl().mask(TR("Saving..."));
    Ext.Ajax.request({
      url: '/BS350/wlan/fcc',
      method: 'POST',
      params: Ext.JSON.encode(data),
      success: function (res) {
        me.V.msg_lbl_bbar.setText("");
        if (eOpts.callback) { eOpts.callback(); } else { me.updateData(); }
        me.getController('NavigationCtrl').updateActives();
      }
    });
    me.V.saveBtn.setDisabled(true);
    me.V.discardBtn.setDisabled(true);
  },

  updateButtons: function () {
    var dirty = this.V.form.form.isDirty();
    var valid = this.V.form.form.isValid();

    var fccActive = this.V.fccTestModeActive.getValue();
    this.V.startBtn.setDisabled(dirty || (!fccActive));
    this.V.stopBtn.setDisabled(dirty);
    this.V.saveBtn.setDisabled(!dirty || !valid);
    this.V.discardBtn.setDisabled(!dirty);
  },

  resetToFactory: function () {
    var me = this;
    var reset = function () {
      me.view.getEl().mask(TR("Resetting..."));
      Ext.Ajax.request({
        url: '/BS350/wlan/resetFccToFactory',
        success: function (res) {
          me.updateData();
        }
      });
    };
    me.V.saveBtn.setDisabled(true);
    me.V.discardBtn.setDisabled(true);

    var title = TR('Reset to factory');
    var msg = TR('Do you want to discard the current configuration and reset to factory? All relevant configuration files are to be overwritten.');
    BS350.custom.Utils.showResetToFactoryConfirmation(reset, title, msg);
  },

  restartWlan: function () {
    var me = this;
    me.V.restartBtn.setDisabled(true);
    Ext.Ajax.request({
      url: '/BS350/wlan/restartWlan',
      success: function (res) {
        if (res.responseText === "0") {
          me.V.msg_lbl_bbar.setText(TR("Successfully restarted Wlan"));
          var fadeOut = new Ext.util.DelayedTask(function () {
            me.V.msg_lbl_bbar.setText("");
            me.V.restartBtn.setDisabled(false);
          });
          fadeOut.delay(7000);
        } else {
          me.V.msg_lbl_bbar.setText(TR("Wlan restart exited with errorcode") + ": " + res.responseText);
          me.V.restartBtn.setDisabled(false);
        }
      },
      failure: function (res) {
        me.V.restartBtn.setDisabled(false);
      }
    });
  },

  forceClose: false,

  askclose: function (panel) {
    var me = this;
    var dirty = this.V.form.form.isDirty();
    if (dirty && !me.forceClose) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') { me.forceClose = true; me.save(null, null, {callback: function () { panel.close(); me.forceClose = false; }}); }
          if (btn === 'no') { me.forceClose = true; panel.close(); me.forceClose = false; }
        },
        icon: Ext.Msg.QUESTION
      });
      return false;
    }
    return true;
  }
});
