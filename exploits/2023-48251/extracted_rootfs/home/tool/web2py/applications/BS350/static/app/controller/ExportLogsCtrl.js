/*global Ext: false, TR: false, setTimeout: false, window: false */
Ext.define('BS350.controller.ExportLogsCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['ExportLogsView'],

  items: [
    { name: 'exportSet', query: '#exportSet'},
    { name: 'exportSDBtn', query: '#exportSDBtn', actions: {click: 'exportSDLogs'} },
    { name: 'exportSDAnim', query: '#exportSDAnim'},
    { name: 'exportSDMsg', query: '#exportSDMsg'},

    { name: 'exportFileBtn', query: '#exportFileBtn', actions: {click: 'exportFileLogs'} },
    { name: 'exportFileAnim', query: '#exportFileAnim'},
    { name: 'exportFileMsg', query: '#exportFileMsg'}

  ],

  sdMonitoring: false,
  rootPath: null,
  sdCfgTarget: null,
  frmVersion: '',

  init: function (application) {
  },

  initView: function () {
    this.sdCfgTarget = null;
    this.rootPath = null;
    this.frmVersion = '';
  },

  checkSD: function () {
    var me = this;
    if (!me.sdMonitoring) { return; }
    Ext.Ajax.request({
      url: '/BS350/fs/sdPathList',
      method: 'GET',
      success: function (res) {
        var pathList = Ext.JSON.decode(res.responseText);
        if (pathList.length > 0) {
          me.setButtonStatus('SD', 'export', true, '', false, false);
          me.rootPath = pathList[0];
          Ext.Ajax.request({
            url: '/BS350/fs/checkLogsDir',
            params: {path: pathList[0]},
            method: 'GET',
            success: function (res) {
              var cfgExists = Ext.JSON.decode(res.responseText);
            }
          });
        } else {
          var errorMsg = TR('No SD card inserted');
          me.rootPath = null;
          me.setButtonStatus('SD', 'export', false, errorMsg, true, false);
        }
      }
    });
    setTimeout(function () { me.checkSD(); }, 3000);
  },

  exportSDLogs: function () {
    var me = this;
    me.sdMonitoring = false;
    me.setButtonStatus('File', 'export', false, '', false, false);
    me.setButtonStatus('SD', 'export', false, TR('Exporting...'), false, true);
    var box = Ext.MessageBox.wait(TR('Exporting logs'), '');
    Ext.Ajax.request({
      url: '/BS350/setting/exportSDLogs',
      timeout: 120000,
      method: 'GET',
      success: function (res) {
        box.hide();
        var resData = Ext.JSON.decode(res.responseText);
        if (!resData.success) {
          me.setButtonStatus('SD', 'export', false, TR(resData.msg), true, false);
        } else {
          me.setButtonStatus('SD', 'export', false, TR("Export successful"), false, false);
        }
        setTimeout(function () {me.sdMonitoring = true; me.checkSD(); }, 5000);
        me.setButtonStatus('File', 'export', true, '', false, false);
      },
      failure: function (res) {
        box.hide();
        me.setButtonStatus('SD', 'export', false, TR("Server error"), true, false);
        setTimeout(function () {me.sdMonitoring = true; me.checkSD(); }, 5000);
        me.setButtonStatus('File', 'export', true, '', false, false);
      }
    });
  },

  exportFileLogs: function () {
    var me = this;
    me.sdMonitoring = false;
    me.setButtonStatus('SD', 'export', false, '', false, false);
    me.setButtonStatus('File', 'export', false, TR('Exporting...'), false, true);
    var box = Ext.MessageBox.wait(TR('Exporting logs'), '');
    Ext.Ajax.request({
      url: '/BS350/setting/exportFileLogs',
      timeout: 120000,
      method: 'GET',
      success: function (res) {
        box.hide();
        var resData = Ext.JSON.decode(res.responseText);
        if (!resData.success) {
          me.setButtonStatus('File', 'export', true, TR(resData.msg), true, false);
        } else {
          me.setButtonStatus('File', 'export', true, TR("Export successful"), false, false);
          window.location.href = '/BS350/fs/downloadR?f=' + encodeURIComponent(resData.msg);
          //window.open('/BS350/fs/downloadR?f=' + encodeURIComponent(resData.msg));
          /*var p = Ext.create('Ext.form.Panel', {
                    renderTo: Ext.getBody(),
                    standardSubmit: true,
                    url: '/BS350/fs/downloadR?f=' + encodeURIComponent(resData.msg)
                }).submit();*/
        }
        me.sdMonitoring = true;
        me.checkSD();
      },
      failure: function (res) {
        box.hide();
        me.setButtonStatus('File', 'export', true, TR("Server error"), true, false);
        me.sdMonitoring = true;
        me.checkSD();
      }
    });
  },

  setButtonStatus: function (dev, func, active, text, error, animate) {
    var button = this.V[func + dev + 'Btn'],
      label = this.V[func + dev + 'Msg'],
      anim = this.V[func + dev + 'Anim'];

    button.setDisabled(!active);
    label.setText(text);
    if (error) { label.el.replaceCls('black-label', 'red-label'); } else { label.el.replaceCls('red-label', 'black-label'); }
    anim.setVisible(animate);
  },

  activated: function () {
    this.sdMonitoring = true;
    this.checkSD();
  },

  deactivated: function () {
    this.sdMonitoring = false;
  }
});

