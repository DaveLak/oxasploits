/**
 * Created by frank on 6/17/15.
 */
/*global Ext: false, BS350: false, TR: false, window: false */
Ext.define('BS350.controller.DiagnosisNetworkTcpdumpCtrl', {
  extend: 'BS350.custom.ViewController',
  views: ['DiagnosisNetworkTcpdumpView'],
  items: [
    { name: 'btnStart', query: '#btnStart', actions: { click: 'tcpdumpStart'}},
    { name: 'btnStop', query: '#btnStop', actions: { click: 'tcpdumpStop'}},
    { name: 'btnClear', query: '#btnClear', actions: { click: 'clearOutput'}},
    { name: 'btnExport', query: '#btnExport', actions: { click: 'exportTcpdump'}},
    { name: 'tcpdumpForm', query: '#tcpdumpForm' },
    { name: 'tcpdump_led', query: '#tcpdump_led' },
    { name: 'tcpdump_capture_time', query: '#tcpdump_capture_time' },
    { name: 'tcpdump_target', query: '#tcpdump_target' },
    { name: 'tcpdump_result', query: '#tcpdump_result' },
    { name: 'tcpdump_result_panel', query: '#tcpdump_result_panel' },
    { name: 'msg_lbl_bbar', query: '#msg_lbl_bbar'}
  ],
  stopTcpdump: true,
  dumpRunning: false,
  dumpTarget: '',
  exportEnabled: 0,
  textValue: "",
  isExporting: false,
  init: function (application) {
    var me = this;

  },
  initView: function () {
    var me = this;
    me.V.btnStart.setDisabled(true);
    me.V.btnStop.setDisabled(false);
    me.V.btnClear.setDisabled(true);
    me.V.btnExport.setDisabled(false);
    APP.getController('HeaderCtrl').on('updatestatus', me.tcpdumpStatus, me);
    me.initCaptureTime();
  },
  tcpdumpStatus: function (status) {
    this.exportEnabled = +new Date();

    try {
      if (status.tcpdump > 0) {
        this.V.tcpdump_led.setSrc(BS350.custom.Utils.addMediaVersion('BS350/static/images/24px/led_green.png'));
        //me.V.tcpdump_led.setVisible(true);
        this.V.tcpdumpForm.setTitle(TR("Tcpdump inactive"));
        this.V.btnStart.setDisabled(false);
        this.V.btnStop.setDisabled(true);
        if(!this.isExporting) {
          this.V.btnExport.setDisabled(false);
        }
        if(this.textValue !== ""){
          this.V.btnClear.setDisabled(false);
        }
        this.tcpDumpEnd();

      } else {
        this.V.tcpdump_led.setSrc(BS350.custom.Utils.addMediaVersion('BS350/static/images/24px/led_red.png'));
        //me.V.tcpdump_led.setVisible(true);
        this.V.tcpdumpForm.setTitle(TR("Tcpdump active"));
        this.V.btnStart.setDisabled(true);

        this.V.btnClear.setDisabled(true);
        this.V.btnStop.setDisabled(false);
        this.V.btnExport.setDisabled(true);
        }
    } catch (e) {
      //console.log("tcpdumpStatus", e);
      // pass, we just can't show anything.
    }
  },
  initCaptureTime: function(){
    var me = this;
    Ext.Ajax.request({
        url: "BS350/network/get_capture_time_rq",
        method: "GET",
        timeout: 5000,
        success: function (response) {
          var json = Ext.JSON.decode(response.responseText);
          me.V.tcpdump_capture_time.setValue(json['capture_time']);
        },
        failure: function () {
          me.V.tcpdump_capture_time.setValue(0);
        }
      });
  },
  clearOutput: function () {
    this.V.tcpdump_result.setText("");
    this.V.btnClear.setDisabled(true);
    this.textValue = "";
  },
  tcpdumpStart: function () {
    var me = this;
    me.dumpTarget = me.V.tcpdump_target.value;
    me.V.msg_lbl_bbar.setText("");
    me.stopTcpdump = false;
    me.V.btnStart.setDisabled(true);
    me.V.btnStop.setDisabled(false);
    me.V.btnExport.setDisabled(true);
      Ext.Ajax.request({
      url: "BS350/network/start_tcpdump",
      method: "GET",
      params: { tcpdump_target: me.dumpTarget, tcpdump_capture_time: me.V.tcpdump_capture_time.value },
      timeout: 5000,
      success: function (response) {
        var json = Ext.JSON.decode(response.responseText);
        if (json.success !== true) {
          me.stopPing = true;
          me.V.btnStop.setDisabled(true);
        }
        me.dumpRunning = true;
        var value = "";
        me.textValue = "";
        me.V.tcpdump_result.setText(value, false);
        me.V.tcpdump_result_panel.scrollBy(0, 10000, true);
        if (me.stopTcpdump === false) {
            me.V.btnStop.setDisabled(false);
        } else {
          me.V.btnStart.setDisabled(false);
          me.V.btnExport.setDisabled(false);
        }
      },
      failure: function () {
        me.stopTcpdump = true;
        me.dumpRunning = false;
        me.V.msg_lbl_bbar.setText(TR("Timeout reached, tcpdump stopped"));
        me.V.btnStop.setDisabled(true);
        me.V.btnStart.setDisabled(false);
        me.V.btnExport.setDisabled(false);
      }
    });
  },

  tcpDumpEnd: function () {
    var me = this;
    if(me.dumpRunning && me.V.tcpdump_capture_time.value > 0) {
      Ext.Ajax.request({
        url: "BS350/network/end_tcpdump",
        method: "GET",
        params: {tcpdump_target: me.dumpTarget},
        timeout: 5000,
        success: function (response) {
          var json = Ext.JSON.decode(response.responseText);
          var value = json.msg.replace(new RegExp("\n", "g"), "<br/>");
          me.textValue = value;
          me.V.tcpdump_result.setText(value, false);
          me.V.tcpdump_result_panel.scrollBy(0, 10000, true);
          me.dumpRunning = false;

          if (json.success === true) {
            if (json.msg === "Tcpdump file to big to show in browser") {
              me.V.msg_lbl_bbar.setText(TR("Tcpdump file to big to show in browser"));
            }
            else if (json.msg === "Output to long") {
              me.V.msg_lbl_bbar.setText(TR("Output to long"));
            }
          }
        },
        failure: function () {
          me.V.msg_lbl_bbar.setText(TR("Timeout reached, tcpdump stopped"));
        }
      });
    }
  },

  tcpdumpStop: function () {
    var me = this;
    me.V.msg_lbl_bbar.setText("");
    me.stopTcpdump = false;
    me.V.btnStart.setDisabled(true);
    me.V.btnStop.setDisabled(false);
    me.V.btnExport.setDisabled(true);
    Ext.Ajax.request({
      url: "BS350/network/stop_tcpdump",
      method: "GET",
      params: {tcpdump_target: me.dumpTarget},
      timeout: 5000,
      success: function (response) {
        var json = Ext.JSON.decode(response.responseText);
        if (json.success !== true) {
          me.stopPing = true;
          me.V.btnStop.setDisabled(true);
        }
        me.dumpRunning = false;
        var value = json.msg.replace(new RegExp("\n", "g"), "<br/>");
        me.textValue = value;
        me.V.tcpdump_result.setText(value, false);
        me.V.tcpdump_result_panel.scrollBy(0, 10000, true);
        if (me.stopTcpdump === false) {
            me.V.btnStop.setDisabled(false);
        } else {
          me.V.btnStart.setDisabled(false);
          me.V.btnExport.setDisabled(false);
        }
      },
      failure: function () {
        me.stopTcpdump = true;
        me.dumpRunning = false;
        me.V.msg_lbl_bbar.setText(TR("Timeout reached, tcpdump stopped"));
        me.V.btnStop.setDisabled(true);
        me.V.btnStart.setDisabled(false);
        me.V.btnExport.setDisabled(false);
      }
    });
    me.V.btnStop.setDisabled(true);
  },

  exportTcpdump: function () {
    var me = APP.getController('DiagnosisNetworkTcpdumpCtrl');
    var exportTime = +new Date();
    var diff = exportTime - me.exportEnabled;
    me.isExporting = true;
    me.V.btnExport.setDisabled(true);
    if( (diff < 2000) ) {
      window.location.href = "network/download_tcpdump?tcpdump_target=" + encodeURIComponent(me.dumpTarget);
      me.isExporting = false;
    }
    else{
      setTimeout(me.exportTcpdump, 250);
    }
  }

});
