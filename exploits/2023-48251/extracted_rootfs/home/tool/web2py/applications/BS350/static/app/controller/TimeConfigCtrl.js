Ext.define('BS350.controller.TimeConfigCtrl',
{
  extend: 'BS350.custom.ViewController',

  views: ['TimeConfigView'],

  items: [
    { name: 'toolTime', query: '#toolTime'},
    { name: 'timezone', query: '#timezone'},
    { name: 'TZPanel', query: '#TZPanel'},
    { name: 'setTimezone', query: '#setTimezone', actions: {click: 'setTimezone'} },
    { name: 'clientTime', query: '#clientTime'},
    { name: 'setClientTime', query: '#setClientTime', actions: {click: 'setClientTime'} },
    { name: 'customTimePanel', query: '#customTimePanel'},
    { name: 'customDate', query: '#customDate', actions: {validitychange: 'checkCustomTimeButton'}},
    { name: 'customHours', query: '#customHours', actions: {validitychange: 'checkCustomTimeButton'}},
    { name: 'customMinutes', query: '#customMinutes', actions: {validitychange: 'checkCustomTimeButton'}},
    { name: 'customSeconds', query: '#customSeconds', actions: {validitychange: 'checkCustomTimeButton'}},
    { name: 'setCustomTime', query: '#setCustomTime', actions: {click: 'setCustomTime'} },
    { name: 'ntpPanel', query: '#ntpPanel'},
    { name: 'ntpAddress', query: '#ntpAddress'},
    { name: 'ntpRunDaemon', query: '#ntpR'},
    { name: 'setNTPTime', query: '#setNTPTime', actions: {click: 'setNTPTime'} }
  ],

  init: function(application) {
    this.updateTimeClock.ctrl = this;
  },

  initView: function() {
    if (this.access !== 'w') {
      this.V.timezone.setReadOnly(true);
      this.V.TZPanel.getDockedItems("toolbar")[0].hide();
      this.V.clientTime.getDockedItems("toolbar")[0].hide();

      this.V.customTimePanel.hide();

      this.V.ntpPanel.getDockedItems("toolbar")[0].hide();
      this.V.ntpAddress.setReadOnly(true);
      this.V.ntpRunDaemon.setReadOnly(true);
    }

    this.getRemoteClock();
    this.getTimezone();
    this.getNTPCfg();
  },
  updateTimeClock: {
    deltaDate: 0,
    ctrl: null,
    run: function() {

      var lT = new Date();
      var rT = new Date(this.deltaDate + lT.getTime());


      this.rTimeStr = BS350.custom.Utils.getDateTimeStr(rT);
      this.lTimeStr = BS350.custom.Utils.getDateTimeStr(lT);
      if (this.ctrl) {
        this.ctrl.V.toolTime.update('<big>'+this.rTimeStr+'</big>');
        this.ctrl.V.clientTime.update('<big>'+this.lTimeStr+'</big>');
      }
    },
    interval: 500 //0.5 seconds
  },

  getRemoteClock : function()
  {
    var me = this;
    Ext.Ajax.request(
      {
        url: '/BS350/setting/gettime',
        success: function(res)
        {
          data = Ext.JSON.decode(res.responseText);
          var rDate = new Date(data.year, data.month-1, data.day, data.hour, data.min, data.sec);
          me.updateTimeClock.deltaDate = rDate.getTime()-(new Date()).getTime();

          me.V.customDate.setValue(rDate);
          me.V.customHours.setValue(rDate.getHours())
          me.V.customMinutes.setValue(rDate.getMinutes())
          me.V.customSeconds.setValue(rDate.getSeconds())
        }
      }
    );
  },

  setTimezone: function() {
    var me = this;
    var timezone = this.V.timezone.getValue();
    Ext.Ajax.request(
      {
        url: '/BS350/setting/settimezone',
        params:{tz: timezone },
        success: function(res) { me.getRemoteClock(); }
      }
    );
  },

  getTimezone: function() {
    var me = this;
    var tzCombo = this.V.timezone;
    Ext.Ajax.request({
      url: '/BS350/setting/timezones',
      success: function(res) {
        var tzList = Ext.JSON.decode(res.responseText);
        var tzStore = tzCombo.getStore();
        for (var i = 0; i < tzList.length; i++) {
          tzStore.add({name: tzList[i]});
        }
        Ext.Ajax.request({
          url: '/BS350/setting/timezone',
          success: function(res) {
            var tz = res.responseText;
            var tzStore = tzCombo.getStore();
            tzCombo.select(tzStore.getAt(tzStore.find('name', tz)));
          }
        });
      }
    });
  },

  setClientTime: function() {
    var me = this;
    var now = new Date();
    Ext.Ajax.request(
      {
        url: '/BS350/setting/settime',
        method: 'POST',
        jsonData: { year: now.getFullYear(), month: now.getMonth()+1, day: now.getDate(), hour: now.getHours(), min:now.getMinutes(), sec:now.getSeconds() },
        success: function(res) { me.getRemoteClock(); }
      }
    );
  },

  setCustomTime: function() {
    var me = this;
    if (me.V.customDate.isValid() && me.V.customHours.isValid() && me.V.customMinutes.isValid() && me.V.customSeconds.isValid()) {
      var cDate = me.V.customDate.getValue();
      var ihours = me.V.customHours.getValue();
      var imins = me.V.customMinutes.getValue();
      var isecs = me.V.customSeconds.getValue();

      Ext.Ajax.request(
        {
          url: '/BS350/setting/settime',
          method: 'POST',
          jsonData: { year: cDate.getFullYear(), month: cDate.getMonth()+1, day: cDate.getDate(), hour: ihours, min: imins, sec: isecs },
          success: function(res) { me.getRemoteClock(); }
        }
      );
    }
  },

  checkCustomTimeButton: function() {
    this.V.setCustomTime.setDisabled(!this.V.customDate.isValid() ||
    !this.V.customHours.isValid() || !this.V.customMinutes.isValid() || !this.V.customSeconds.isValid());
  },

  setNTPTime: function() {
    var me = this;
    var ntpaddr = this.V.ntpAddress.getValue();
    var rund = this.V.ntpRunDaemon.getValue();
    Ext.Ajax.request(
      {
        url: '/BS350/setting/setNTPTime',
        params: { ntp: ntpaddr, rund: rund },
        success: function(res) {
          if (res.responseText === 'ok') {
            me.getRemoteClock();
          } else {
            Ext.Msg.alert(TR('Error'), TR('NTP server not reachable') + '<br/>' + TR("Please check your configuration"));
          }
        }
      }
    );
  },

  getNTPCfg: function() {
    var me = this;
    Ext.Ajax.request(
      {
        url: '/BS350/setting/getntpcfg',
        success: function(res)
        {
          me.V.ntpAddress.setValue(res.responseText);
          me.V.ntpRunDaemon.setValue(res.responseText !== '0.0.0.0');
        }
      }
    );
  },

  activated: function() {
    Ext.TaskManager.start(this.updateTimeClock);
  },

  deactivated: function() {
    Ext.TaskManager.stop(this.updateTimeClock);
  },
  validateCustomTime: function() {
    this.V.customTimeDay.validate();
  }

});

