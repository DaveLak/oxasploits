c = require "constants"
f = require "runFunctions"
idsrc = require "idcodesources"
 
local initNode = {
   name = "initNode",
   timeout = 300,
   type = c.TypeIdleStartNode,
   selectsCw = 0,
   selectsEn = 0,
   displayJobSteps = 0,
   displayTime = 1,
   clearIDCode = 0,
   jobComment = '',
   jobUser = 'Bosch',
   jobDate = 1423752368,
   useIdleEn = 0,
   idcode_timeout1 = 600,
   idcode_timeout2 = 600,
   display_text1 = "",
   display_text2 = ""
}
 
-- Atoms for Idle Script ---
atoms  = {}
 
-- Lokaler Knoten --
atoms["$Local"] = {
   type = c.TypeDevice, 
   mode = c.DeviceModeLocal,
   dest = "0"
}
 
atoms["$AutoRun"] = {
   type = c.TypeTriggerOut,		-- TriggerOut --
   mode = c.TriggerOutModeAutoRun, 		-- AutoRun setzen --
   dest = 0,
   state = 0,				-- Falls AutoRun hier eine 1 eintragen --
   range = 0,
   valueList = {}
}
 
atoms["$IdCodeSrc"] = {
   text ="",
   type = c.TypeTriggerOut,		-- TriggerOut
   mode = c.TriggerOutIdCodeSrc,	-- Warten auf Job Cw --
   dest  = idsrc.cyclecounter,
   state = 0,
   range = 0,
   valueList = {} 
}
 
atoms["$RefreshRequest"] = {
   type = c.TypeTriggerOut,		-- TriggerOut --
   mode = c.TriggerOutModeRefresh, 		-- Refresh aufrufen --
   dest = 0,
   state = 0,
   range = 0,
   valueList = {}
}
 
atoms["$RefreshFinished"] = {
   type = c.TypeTriggerIn,		-- TriggerIn --
   mode = c.TriggerInModeRefreshDone, 	-- Refresh fertig --
   dest = 0,
   state = 0,
   range = 0
}
 
f.publishAtoms(atoms,function (a) cpp.job:addAtom(a) end)
 
 
nodes = {}
nodes[1] = {}
nodes[2] = {}
nodes[3] = {}
nodes[4] = {}
nodes[5] = {}
 
nodes[1].atom = atoms["$Local"]
nodes[1].successor = {{var = "dummy",val = nil, next = nodes[2] }}
 
nodes[2].atom = atoms["$AutoRun"]
nodes[2].successor = {{var = "dummy",val = nil, next = nodes[3] }}
 
nodes[3].atom = atoms["$IdCodeSrc"]
nodes[3].successor = {{var = "dummy",val = nil, next = f.EndNode }}
 
nodes[4].atom = atoms["$RefreshRequest"]
nodes[4].successor = {{var = "dummy",val = nil, next = nodes[5] }}
 
nodes[5].atom = atoms["$RefreshFinished"]
nodes[5].successor = {{var = "dummy",val = nil, next = f.EndNode }}
 
 
--Eigentlicher Start Code--
f.setInitNode(initNode)
f.checkPlausib(nodes)
f.go(nodes[2])
f.cleanUpNodes(atoms, nodes)
