/*global Ext: false, TR: false, window: false */
Ext.define('BS350.controller.ExpImpPrgCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['ExpImpPrgView'],

  items: [
    //import form
    { name: 'importPrg', query: '#importPrg'},
    { name: 'selectPrgFileBtn', query: '#selectPrgFileBtn', actions: {click: 'selectPrgPkg'} },
    { name: 'selectPrgFileAnim', query: '#selectPrgFileAnim'},
    { name: 'selectPrgFileMsg', query: '#selectPrgFileMsg'},
    { name: 'prgnamesgrid', query: '#prgnamesgrid'},
    { name: 'importSelectedPrgPkgBtn', query: '#importSelectedPrgPkgBtn', actions: {click: 'askimportSelPrgPkg'} },
    { name: 'selectAllPrgBtn', query: '#selectAllPrgBtn', actions: {click: 'selectAllPrgs'} },
    { name: 'unSelectAllPrgBtn', query: '#unSelectAllPrgBtn', actions: {click: 'unSelectAllPrgs'} },
    { name: 'clearSelectedPrgPkgBtn', query: '#clearSelectedPrgPkgBtn', actions: {click: 'clearSelectedPrgPkg'} },
    { name: 'importSelectedPrgPkgAnim', query: '#importSelectedPrgPkgAnim'},
    { name: 'importSelectedPrgPkgMsg', query: '#importSelectedPrgPkgMsg'},
    //export form
    { name: 'readPrgDirBtn', query: '#readPrgDirBtn', actions: {click: 'readPrgDir'} },
    { name: 'readPrgDirAnim', query: '#readPrgDirAnim'},
    { name: 'readPrgDirMsg', query: '#readPrgDirMsg'},
    { name: 'prgdirnamesgrid', query: '#prgdirnamesgrid'},
    { name: 'selectAllDirPrgBtn', query: '#selectAllDirPrgBtn', actions: {click: 'selectAllDirPrgs'} },
    { name: 'unSelectAllDirPrgBtn', query: '#unSelectAllDirPrgBtn', actions: {click: 'unSelectAllDirPrgs'} },
    { name: 'exportSelectedPrgBtn', query: '#exportSelectedPrgBtn', actions: {click: 'exportSelPrgs'} },
    { name: 'exportSelectedPrgAnim', query: '#exportSelectedPrgAnim'},
    { name: 'exportSelectedPrgMsg', query: '#exportSelectedPrgMsg'},
    { name: 'closeButton', query: '#closeButton', actions: { click: 'closeButton' } }
  ],

  init: function () {
    this.addEvents('eventImportAllPrg');
  },

  initView: function () {
    //this.V.importPrg.setVisible(this.access === 'w');
    if (this.V.prgnamesgrid) {
      this.V.prgnamesgrid.getStore().removeAll();
    }
    if (this.V.prgdirnamesgrid) {
      this.V.prgdirnamesgrid.getStore().removeAll();
      this.V.prgdirnamesgrid.getStore().on('update', this.prgExportInfoSelection, this);
    }
    this.readPrgDir();
  },

  selectPrgPkg: function () {
    var me = this;
    var fileName = "";
    var uploadWin = Ext.create('Ext.window.Window', {
      title: TR('Select Program Package'),
      layout: 'fit',
      modal : true,
      width : 400,
      height: 120,
      closable: false,
      items: [
        {
          xtype: 'form',
          itemId : 'uploadForm',
          bodyPadding : 15,
          hidden: false,
          timeout: 60000,
          layout : 'anchor',
          defaults: { anchor: '100%' },

          items : [{
            xtype: 'filefield',
            name: 'fileupload',
            itemId: 'fileupload',
            fieldLabel: TR('Program File'),
            labelWidth: 100,
            msgTarget: 'side',
            allowBlank: false,
            toignore: false,
            buttonText: TR('Browse...'),
            listeners:{
                afterrender: function(cmp){
                  cmp.fileInputEl.set({
                    accept: '.nxprx'
                  });
                },
                validitychange: function(cmp, valid) {
                  if (valid === true){
                    try {
                      Ext.ComponentQuery.query("#uploadBtn")[0].handler();
                    }catch(err){}
                  }
                }
            },
            validator: function (value) {
              if (value.match(/\.nxprx$/g)) {
                var idx = value.lastIndexOf('\\');
                if (idx !== -1) {
                  fileName = value.substr(idx + 1);
                }
                Ext.ComponentQuery.query('#uploadBtn')[0].setDisabled(false);
                return true;
              }
              Ext.ComponentQuery.query('#uploadBtn')[0].setDisabled(true);
              return TR('File must be a *.nxprx Job');
            }
          }]
        }
      ],
      buttons: [
        { itemId: 'uploadBtn', text: TR('Upload'), disabled: true,
          handler: function () {
            var win = this.up('window');
            var form = win.down('form').getForm();
            var submitForm = function () {
              if (form.isValid()) {
                form.submit({
                  url: '/BS350/setting/getPrgsZipContent',
                  waitMsg: TR('Reading program package content...'),
                  success: function (form, action) {
                    win.close();
                    me.setButtonStatus('PrgFile', 'select', false, fileName, false, false);
                    me.fileToUpload = action.result.filedata;
                    var data = action.result.data;
                    me.V.prgnamesgrid.getStore().loadRawData(data);
                    //me.V.prgnamesgrid.getStore().commitChanges();
                    me.V.prgnamesgrid.getStore().on('update', me.prgPkgInfoSelection, me);
                    me.V.importSelectedPrgPkgBtn.setDisabled(false);
                    me.V.clearSelectedPrgPkgBtn.setDisabled(false);
                    me.V.unSelectAllPrgBtn.setDisabled(false);
                  },
                  failure: function (form, action) {
                    switch (action.failureType) {
                    case Ext.form.action.Action.CLIENT_INVALID:
                      action.result.msg = TR('Form fields may not be submitted with invalid values');
                      break;
                    case Ext.form.action.Action.CONNECT_FAILURE:
                      action.result.msg = TR('Ajax communication failed');
                      break;
                    }
                    me.setButtonStatus('PrgFile', 'select', true, TR(action.result.msg), true, false);
                    win.close();
                  }
                });
              }
            };
            Ext.ComponentQuery.query('#fileupload')[0].hide();
            submitForm();
          }
          },
        { itemId: 'cancelBtn', text: TR('Cancel'), handler: function () {this.up('window').close(); } }
      ]
    });
    uploadWin.on('show', function(){
      try{
        if (!Ext.isIE10m) {
          uploadWin.down('form').down('filefield').fileInputEl.dom.click();
        }
      }catch(err){}
    }, this);
    uploadWin.show();
  },

  getExcludePrgImportList: function () {
    var sto = this.V.prgnamesgrid.getStore();
    var fileList = [];

    sto.each(function (rec) {
      if (rec.get('select') === false) {
        fileList.push(rec.get('name'));
      }
    });

    return fileList;
  },

  askimportSelPrgPkg: function () {
    var me = this;
    Ext.Msg.show({
      title: TR('Warning'),
      msg: TR("Are you sure to import the new programs?"),
      buttons: Ext.Msg.OKCANCEL,
      buttonText: {ok: TR("Continue"), cancel: TR("Cancel")},
      fn: function (btn) {
        if (btn === "ok") {
          me.importSelPrgPkg();
        }
      }
    });
  },

  importSelPrgPkg: function () {
    var me = this;
    if (this.fileToUpload !== null) {
      var box = Ext.MessageBox.wait(TR('Importing program...'), ''),
        fileList = this.getExcludePrgImportList();
      Ext.Ajax.request({
        url: '/BS350/prg/importSelected',
        timeout: 120000,
        params: {filedata: me.fileToUpload, excludeList: fileList},
        success: function (res) {
          box.hide();
          var resData = Ext.JSON.decode(res.responseText);
          if (!resData.success) {
            me.setButtonStatus('SelectedPrgPkg', 'import', true, TR(resData.msg), true, false);
          } else {
            me.setButtonStatus('SelectedPrgPkg', 'import', false, TR("Import successfull"), false, false);
            me.V.unSelectAllPrgBtn.setDisabled(true);
            me.V.selectAllPrgBtn.setDisabled(true);
            me.fireEvent('eventImportAllPrg');
          }
        },
        /**jslint unparam: false */
        failure: function (res) {
          /*jslint unparam: true */
          box.hide();
          me.setButtonStatus('SelectedPrgPkg', 'import', true, TR('Import selected files failed'), true, false);
        }
      });
    }
  },

  prgPkgInfoSelection: function () {
    var sto = this.V.prgnamesgrid.getStore();
    var importPossible = false;
    var selectionPossible = false;
    var unselectPossible = false;
    var records = sto.getRange();
    Ext.Array.forEach(records, function (rec) {
      if (rec.get('select') === true) {
        importPossible = true;
        unselectPossible = true;
      } else {
        selectionPossible = true;
      }
    });
    this.V.selectAllPrgBtn.setDisabled(!selectionPossible);
    this.V.unSelectAllPrgBtn.setDisabled(!unselectPossible);
    this.V.importSelectedPrgPkgBtn.setDisabled(!importPossible);
  },
  selectAllPrgs: function () {
    var sto = this.V.prgnamesgrid.getStore();
    sto.setAllSelected(true);
    this.V.unSelectAllPrgBtn.setDisabled(false);
    this.V.importSelectedPrgPkgBtn.setDisabled(false);
  },

  unSelectAllPrgs: function () {
    var sto = this.V.prgnamesgrid.getStore();
    sto.setAllSelected(false);
    this.V.unSelectAllPrgBtn.setDisabled(true);
    this.V.selectAllPrgBtn.setDisabled(false);
    this.V.importSelectedPrgPkgBtn.setDisabled(true);
  },

  clearSelectedPrgPkg: function () {
    var sto = this.V.prgnamesgrid.getStore();
    sto.rejectChanges();
    sto.removeAll();
    sto.commitChanges();
    this.V.clearSelectedPrgPkgBtn.setDisabled(true);
    this.V.unSelectAllPrgBtn.setDisabled(true);
    this.setButtonStatus('PrgFile', 'select', true, '', false, false);
    this.setButtonStatus('SelectedPrgPkg', 'import', false, '', false, false);
    this.fileToUpload = null;
  },

  setButtonStatus: function (dev, func, active, text, error, animate) {
    var button = this.V[func + dev + 'Btn'],
      label = this.V[func + dev + 'Msg'],
      anim = this.V[func + dev + 'Anim'];

    button.setDisabled(!active);
    label.setText(text);
    if (label.el) {
      if (error) {
        label.el.replaceCls('black-label', 'red-label');
      } else {
        label.el.replaceCls('red-label', 'black-label');
      }
    }
    anim.setVisible(animate);
  },

  readPrgDir: function () {
    if (this.V.prgdirnamesgrid) {
      var sto = this.V.prgdirnamesgrid.getStore();
      sto.load({ scope: this,
        /**jslint unparam: false */
        callback: function (records, operation, success) {
          /*jslint unparam: true */
          if (success === true) {
            if (sto.getCount() === 0) {
              this.V.unSelectAllDirPrgBtn.setDisabled(true);
              this.V.selectAllDirPrgBtn.setDisabled(true);
              this.V.exportSelectedPrgBtn.setDisabled(true);
              sto.removeAll();
              this.setButtonStatus('readPrgDir', '', true, TR('The program directory is empty'), true, false);
              return;
            }
            this.setButtonStatus('readPrgDir', '', true, TR("Read programs directory content successfully"), false, false);
            this.V.unSelectAllDirPrgBtn.setDisabled(false);
            this.V.exportSelectedPrgBtn.setDisabled(false);
            this.V.selectAllDirPrgBtn.setDisabled(true);
          } else {
            this.setButtonStatus('readPrgDir', '', true, TR("Failed to read programs directory content"), true, false);
            sto.removeAll();
            this.V.unSelectAllDirPrgBtn.setDisabled(true);
            this.V.selectAllDirPrgBtn.setDisabled(true);
            this.V.exportSelectedPrgBtn.setDisabled(true);
          }
        }
        });
    }
  },

  getExcludePrgExportList: function () {
    var sto = this.V.prgdirnamesgrid.getStore();
    var fileList = [];
    var records = sto.getRange();
    Ext.Array.forEach(records, function (rec) {
      if (rec.get('select') === false) {
        fileList.push(rec.get('name'));
      }
    });
    return fileList;
  },

  prgExportInfoSelection: function () {
    var sto = this.V.prgdirnamesgrid.getStore();
    if (sto.getUpdatedRecords().length > 0) {
      this.V.selectAllDirPrgBtn.setDisabled(false);
      this.V.unSelectAllDirPrgBtn.setDisabled(false);
      this.V.exportSelectedPrgBtn.setDisabled(false);
      if (sto.getUpdatedRecords().length === sto.count()) {
        this.V.exportSelectedPrgBtn.setDisabled(true);
      }
    } else {
      this.V.selectAllDirPrgBtn.setDisabled(true);
    }
  },

  selectAllDirPrgs: function () {
    var sto = this.V.prgdirnamesgrid.getStore();
    sto.setAllSelected(true);
    this.V.selectAllDirPrgBtn.setDisabled(true);
    this.V.unSelectAllDirPrgBtn.setDisabled(false);
    this.V.exportSelectedPrgBtn.setDisabled(false);
  },

  unSelectAllDirPrgs: function () {
    var sto = this.V.prgdirnamesgrid.getStore();
    sto.setAllSelected(false);
    this.V.unSelectAllDirPrgBtn.setDisabled(true);
    this.V.selectAllDirPrgBtn.setDisabled(false);
    this.V.exportSelectedPrgBtn.setDisabled(true);
  },

  exportSelPrgs: function () {
    var me = this;
    var box = Ext.MessageBox.wait(TR('Exporting program...'), ''),
      fileList = this.getExcludePrgExportList();
    Ext.Ajax.request({
      url: '/BS350/prg/exportSelected',
      timeout: 120000,
      params: {excludeList: fileList},
      success: function (res) {
        box.hide();
        var resData = Ext.JSON.decode(res.responseText);
        if (!resData.success) {
          me.setButtonStatus('SelectedPrg', 'export', true, TR(resData.msg), true, false);
        } else {
          window.location.href = '/BS350/fs/downloadR?f=' + encodeURIComponent(resData.msg);
          me.setButtonStatus('SelectedPrg', 'export', true, TR("Export successfull"), false, false);
        }
      },
      failure: function () {
        box.hide();
        me.setButtonStatus('SelectedPrg', 'export', true, TR('Export selected programs failed'), true, false);
      }
    });
  },

  activated: function () {
    /* empty */
    return;
  },

  deactivated: function () {
    /* empty */
    return;
  },

  askclose: function () {
    this.clearSelectedPrgPkg();
    return true;
  },
  closeButton: function () {
    this.view.close();
  }
});

