/*global Ext: false, TR: false, BS350: false */
Ext.define('BS350.controller.ScanCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['ScanView'],
  stores: ['ScanStore'], //, 'AssignStore'],

  items: [
    { name: 'activeFlag', query: '#prActive', actions: {change: 'updateScanButtons'} },
    { name: 'scanForm', query: '#scanForm', actions: { /*collapse: 'targetCollapsed', expand: 'targetCollapsed',*/ validitychange: 'updateScanButtons'}},
    { name: 'prActive', query: '#prActive', actions: { change: 'checkActiveWarn' }},
    { name: 'prActiveWarn', query: '#prActiveWarn', actions: {}},
    { name: 'prActiveWarnTooltip', query: '#prActiveWarnTooltip' },
   // { name: 'assignForm', query: '#assignForm', actions: { collapse: 'targetCollapsed', expand: 'targetCollapsed', validitychange: 'updateAssignButtons'}},
    { name: 'grid', query: '#scangrid'},
  //  { name: 'assignGrid', query: '#assignGrid'},
    { name: 'saveBtn', query: '#btnSave', actions: {click: 'save'}},
    { name: 'discardBtn', query: '#btnDiscard', actions: {click: 'discardScanData'} },
    { name: 'resetBtn', query: '#btnReset', actions: {click: 'resetToFactory'} }
   // { name: 'saveAssignBtn', query: '#btnAssignSave', actions: {click: 'saveAssignData'}},
   // { name: 'discardAssignBtn', query: '#btnAssignDiscard', actions: {click: 'updateAssignData'} },
   // { name: 'addAssignBtn', query: '#addRow', actions: {click: 'addAssign'}},
   // { name: 'removeAssignBtn', query: '#removeRow', actions: {click: 'removeAssign'}}

  ],
  forceClose: false,

  data: {},

  initView: function () {
    var me = this;
    this.forceClose = false;
    if (me.access !== 'w') {
      me.V.activeFlag.setReadOnly(true);
      Ext.each(Ext.ComponentQuery.query('checkbox', 'combobox', this.view), function (e) {
        e.setReadOnly(true);
      });
      this.view.getDockedItems()[0].hide();
      this.V.grid.on('beforeedit', me.checkReadonly, me.V.grid);
      this.forceClose = true;
    }

    me.store = me.V.grid.getStore();
    me.store.on('update', me.storeChanged, me);

  /*  me.assignStore = me.V.assignGrid.getStore();
    me.assignStore.on('update', me.updateAssignButtons, me);
    me.assignStore.on('remove', me.updateAssignButtons, me);
    me.assignStore.on('add', me.updateAssignButtons, me);*/

    me.view.getEl().mask(TR("Loading..."));
    this.updateScanData();
    //this.updateAssignData();

    me.scanData = {};
  },

  checkReadonly: function (sm, record) {
    if (record.record.get('readonly')) {
      return false;
    }
  },

  /*targetCollapsed: function () {

    if (this.V.scanForm.collapsed === false) {
      this.V.saveBtn.setVisible(true);
      this.V.discardBtn.setVisible(true);
      this.V.resetBtn.setVisible(true);
      this.V.saveAssignBtn.setVisible(false);
      this.V.discardAssignBtn.setVisible(false);
    } else {
      this.V.saveBtn.setVisible(false);
      this.V.discardBtn.setVisible(false);
      this.V.resetBtn.setVisible(false);
      this.V.saveAssignBtn.setVisible(true);
      this.V.discardAssignBtn.setVisible(true);
    }
  },*/

  checkActiveWarn: function () {
    var me = this;
    Ext.Ajax.request({
      url: 'BS350/channel/hasScanner',
      success: function (res) {
        var result = Ext.JSON.decode(res.responseText);
        var prActiveWarnTooltip = Ext.ComponentQuery.query('#prActiveWarnTooltip')[0];
        if (me.V.activeFlag.checked) {
          prActiveWarnTooltip.html = TR('Component has no Scanner');
          me.V.prActiveWarn.setVisible(!result);
        } else {
          me.V.prActiveWarn.setVisible(false);
        }
      }
    });
  },

  save: function (button, event, eOpts) {
    var me = this;
    var scanCfg = [];
    var rootNode = me.store.getRootNode();
    var scanner = me.scanData.scanner[0];
    var guiDataEdited = me.serialize(rootNode);
    me.copyFromToStep(guiDataEdited, scanner);
    scanCfg.push(scanner);
    me.view.getEl().mask(TR("Saving..."));
    var settings = { active: me.V.activeFlag.getValue(),  scanner: scanCfg};
    Ext.Ajax.request({
      url: '/BS350/scanner/processCfg',
      method: 'POST',
      params: Ext.JSON.encode(settings),
      success: function (res) {
        me.getController('NavigationCtrl').updateActives();
        if (eOpts.callback) { eOpts.callback(); } else { me.updateScanData(); }
      }
    });
    scandata = {};
    me.V.saveBtn.setDisabled(true);
    me.V.discardBtn.setDisabled(true);
  },

  /*saveAssignData: function (button, event, eOpts) {
    var me = this;
    var assign = [];
    me.assignStore.each(function (item) { assign.push(item.data); });

    var settings = { assignment: assign};

    Ext.Ajax.request({
      url: '/BS350/scanner/assignCfg',
      method: 'POST',
      params: Ext.JSON.encode(settings),
      success: function (res) {
        me.getController('NavigationCtrl').updateActives();
        if (eOpts.callback) { eOpts.callback(); } else { me.updateAssignData(); }
      }
    });
    me.V.saveAssignBtn.setDisabled(true);
    me.V.discardAssignBtn.setDisabled(true);
  },*/
  discardScanData: function () {
    var me = this;
    me.view.getEl().mask(TR("Discarding..."));
    me.updateScanData();
  },

  updateScanData: function () {
    var me = this;
    var scanView = me.V.scanForm;
    Ext.Ajax.request({
      url: '/BS350/scanner/processCfg',
      success: function (res) {

        var data = Ext.JSON.decode(res.responseText);
        me.scanData = Ext.JSON.decode(res.responseText);

        me.V.activeFlag.setValue(data.active);
        me.V.activeFlag.initValue();

        me.updateLengthSelection(data.scanner[0]);

        me.store.loadNewData(data.scanner[0]);

        me.view.getEl().unmask();
        me.V.saveBtn.setDisabled(true);
        me.V.discardBtn.setDisabled(true);
        me.getController('NavigationCtrl').updateActives();
        me.view.showVerticalLine();
        if (me.access !== 'w') {
          me.store.getRootNode().cascadeBy(function (e) {
            e.set('readonly', true);
          });
        }
      }
    });
  },

  updateLengthSelection: function (guiData) {

    for(var i = 0; i < guiData.children[0].children.length; i++) {
      if(guiData.children[0].children[i].children.length > 2){
        var selection = parseInt(guiData.children[0].children[i].children[0].myValue, 10);

        switch(selection) {
          case 0:
            guiData.children[0].children[i].children[1].readonly = false;
            guiData.children[0].children[i].children[2].readonly = true;
            break;
          case 1:
            guiData.children[0].children[i].children[1].readonly = false;
            guiData.children[0].children[i].children[2].readonly = false;
            break;
          case 2:
            guiData.children[0].children[i].children[1].readonly = false;
            guiData.children[0].children[i].children[2].readonly = false;
            break;
          case 3:
            guiData.children[0].children[i].children[1].readonly = true;
            guiData.children[0].children[i].children[2].readonly = true;
            break;
        }
      }
    }

  },


  /*updateAssignData: function () {
    var me = this;
    var assignView = me.V.assignForm;
    assignView.setLoading(true, true);
    Ext.Ajax.request({
      url: '/BS350/scanner/assignCfg',
      success: function (res) {
        var data = Ext.JSON.decode(res.responseText);
        me.assignStore.removeAll();
        me.assignStore.add(data.assignment);
        me.assignStore.sync();

        me.V.saveAssignBtn.setDisabled(true);
        me.V.discardAssignBtn.setDisabled(true);
        me.getController('NavigationCtrl').updateActives();
        assignView.setLoading(false);
        me.assignStore.fireEvent('load', me.assignStore);
      }
    });
  },

  addAssign: function () {
    var me  = this;
    var chnValue = null;
    me.V.addAssignBtn.setDisabled(true);
    var newRow = {'ascii': '-', 'prgno': '0', 'jobno': '0'};
    me.addNewRow(newRow);
    me.V.addAssignBtn.setDisabled(false);
  },


  addNewRow: function (newRow) {
    if (this.V.assignGrid.getSelectionModel().hasSelection()) {
      var selection = this.V.assignGrid.getSelectionModel().getSelection();
      var indexOf = this.assignStore.indexOf(selection[0]);
      this.assignStore.insert(indexOf + 1, newRow);
      //this.V.assignGrid.plugins[0].startEditByPosition({row: indexOf + 1, column: 3});
    } else {
      this.assignStore.add(newRow);
      //this.V.assignGrid.plugins[0].startEditByPosition({row: this.store.count() - 1, column: 3});
    }
  },

  removeAssign: function () {
    var selection = this.V.assignGrid.getSelectionModel().getSelection();
    if (selection.length > 0) {
      this.assignStore.remove(selection[0]);
    }
  },*/

  copyFromToStep: function(stepData, guiData){
    if(stepData.myValue !== undefined ){
      guiData.myValue = stepData.myValue;
    }
    if(stepData.expanded !== undefined){
      guiData.expanded = stepData.expanded;
    }

    if(stepData.children !== undefined){
      for(var i=0; i< stepData.children.length; i++)
        this.copyFromToStep(stepData.children[i], guiData.children[i])
    }
  },

  serialize: function(rootNode) {
    var me = this;
    var result = Ext.data.writer.Json.prototype.getRecordData(rootNode),
        childNodes = rootNode.childNodes,
        len = childNodes.length,
        children, i;

    if (len > 0) {
      children = [];
      for (i = 0; i < len; i++) {
        children.push(me.serialize(childNodes[i]));
      }
      result.children = children;
    }
    return result;
  },

  storeChanged: function () {
    this.updateScanButtons();
  },

  updateScanButtons: function () {

    var dirty = this.store.isDirty() || this.V.activeFlag.isDirty();

    this.V.saveBtn.setDisabled(!dirty);
    this.V.discardBtn.setDisabled(!dirty);
  },

 /* updateAssignButtons: function () {

    var dirty = this.assignStore.isDirty();

    this.V.saveAssignBtn.setDisabled(!dirty);
    this.V.discardAssignBtn.setDisabled(!dirty);
  },*/

  /*flashScanner: function (button, event, eOpts) {
    var me = this;

    Ext.Msg.show({
      title: '',
      msg: TR('The scanner has a limited number of flash operations due to his physical properties.<br></br> Are you sure you want to flash the scanner?'),
      buttons: Ext.Msg.OKCANCEL,
      buttonText: {ok: TR("Yes"), cancel: TR("Cancel")},
      icon: Ext.MessageBox.WARNING,
      fn: function (btn) {
        if (btn === "ok") {
          me.save();
        }
      }
    });
  },*/


  resetToFactory: function(){
    var me = this;
    var reset = function () {
      me.view.getEl().mask(TR("Resetting..."));
      Ext.Ajax.request({
        url: '/BS350/scanner/resetToFactory',
        success: function (res) {
          me.updateScanData();
        }
      });
    };
    me.V.saveBtn.setDisabled(true);
    me.V.discardBtn.setDisabled(true);

    var title = TR('Reset to factory');
    var msg = TR('Do you want to discard the current configuration and reset to factory? All relevant configuration files are to be overwritten.');
    BS350.custom.Utils.showResetToFactoryConfirmation(reset, title, msg);
  },

  askclose: function (panel) {
    var me = this;
    if ((me.store.isDirty() || this.V.activeFlag.isDirty()) && !me.forceClose) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') { me.save(null, null, {callback: function () {me.forceClose = true; panel.close(); }}); }
          if (btn === 'no') {me.forceClose=true;  panel.close(); }
        },
        icon: Ext.Msg.QUESTION
      });
      return false;
    }
    return true;
  }
});
