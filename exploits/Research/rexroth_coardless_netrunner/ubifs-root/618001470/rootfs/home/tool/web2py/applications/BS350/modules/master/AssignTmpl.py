__author__ = 'kai'

import atoms

class IdAssign:

    def __init__(self):
        self.data = []

    def requires(self):
        self.data.append('c = require "constants"')
        self.data.append('f = require "runFunctions"')
        self.data.append('plc = require "plcsignals"')
        self.data.append('codes = require "scancodes"')
        self.data.append('idsrc = require "idcodesources"')
        self.data.append('')

    def initNode(self, user, comment, date, display_time, id_input_name1, id_input_comment1):
        self.data.append('local initNode = {')
        self.data.append('   name = "initNode",')
        self.data.append('   timeout = 300,')
        self.data.append('   type = c.TypeIdleStartNode,')
        self.data.append('   selectsCw = 0,')
        self.data.append('   selectsEn = 0,')
        self.data.append('   displayJobSteps = 1,')
        self.data.append('   displayTime = %s,' % display_time)
        self.data.append('   clearIDCode = 0,')
        self.data.append('   ignoreResults = 0,')
        self.data.append('   jobComment = \'%s\',' % comment)
        self.data.append('   jobUser = \'%s\',' % user)
        self.data.append('   jobDate = %d,' % date)
        self.data.append('   id_input_name1 = \'%s\',' % id_input_name1)
        self.data.append('   id_input_comment1 = \'%s\',' % id_input_comment1)
        self.data.append('   id_input_name2 = \'\',')
        self.data.append('   id_input_comment2 = \'\'')
        self.data.append('}')

    def config(self):
        self.data.append('--globale run Einstellungen setzen')
        self.data.append('local config = {')
        self.data.append('    stopOnNok = false,')
        self.data.append('    stopOnTimeout = false')
        self.data.append('}')
        self.data.append('f.setConfiguration(config)')
        self.data.append('')


    def idCodeInit(self, source, fire_idcode, range1, range2, target):
        self.data.append('atoms["$IdCodeInit"]={')
        self.data.append('  text= "",')
        self.data.append('  type = c.TypeTriggerOut,')
        self.data.append('  mode = c.TriggerOutModeIdCodeInit, --c.TriggerOutScanPrg')
        self.data.append('  dest = 0,')
        self.data.append('  range= 0,')
        self.data.append('  state= 0,')
        self.data.append('  valueList={')
        self.data.append('    id = "$Mode",  --id code id ')
        self.data.append('    fire_idcode = %d,  --Im master Job muss Id code propagiert werden' % fire_idcode)
        if source == 0:
          src = 'scanner'
        elif source == 1:
          src = 'openprotocol'
        else:
          src = 'vwxml'
        self.data.append('    src = idsrc.%s,  --idsrc.openprotocol, idsrc.scanner, idsrc.vwxml' % src)

        if target == 5: # 4 == Input assign    5 == idcode / input assign
            self.data.append('    target = %d, -- Was soll gescannt werden? - 1=IDCode, 4=ID Input Assignment' % 4)
            self.data.append('    range=%s,' % range2)
            self.data.append('    idcode_range=%s' % range1)
        else:
            self.data.append('    target = %d, -- Was soll gescannt werden? - 1=IDCode, 4=ID Input Assignment' % target)
            self.data.append('    range=%s' % range2)

        self.data.append('  }')
        self.data.append('}')
        self.data.append('')


    def waitScanStartTrigger(self, text, source):
        self.data.append('--warten auf Trigger Scanner')
        self.data.append('atoms["$WaitScanStartTrigger"]={')
        if source == 0:
            self.data.append('  text= "%s",' % text)
        else:
            self.data.append('  text= "",')
        self.data.append('  type = c.TypeTriggerIn,')
        self.data.append('  mode = c.TriggerInModeScanTrigger, --c.TriggerOutScanPrg')
        self.data.append('  dest = 0,')
        self.data.append('  state= 1,')
        self.data.append('  range= 1,')
        self.data.append('  valueList = {}')
        self.data.append('}')
        self.data.append('')



    def publishAtoms(self):
        self.data.append('f.publishAtoms(atoms,function (a) cpp.job:addAtom(a) end)')
        self.data.append('')
        self.data.append('')

    def nodes(self, _op_mode, source):
        self.data.append('nodes = {}')

        self.data.append('nodes["StartWithEnable"] = {}')
        self.data.append('nodes["SetEnableStart"] = {}')
        self.data.append('nodes["StartWithoutEnable"] = {}')
        self.data.append('nodes["InitIDCode"] = {}')


        if _op_mode == 2:
            self.data.append('nodes["DelOkNokCounter"] = {}')
            self.data.append('nodes["SetOkNokCounter"] = {}')
            self.data.append('nodes["WaitForInputTrigger"] = {}')

        self.data.append('nodes["InitScanner"] = {}')
        self.data.append('nodes["DisplayNoScanner"] = {}')
        self.data.append('nodes["DisplayScannerNotActive"] = {}')

        self.data.append('nodes["WaitForScanInitAck"] = {}')
        self.data.append('nodes["WaitForScanStartTrigger"] = {}')
        self.data.append('nodes["Scanning"] = {}')

        self.data.append('nodes["WaitIdCodeResult"] = {}')
        self.data.append('nodes["RepeatTimeout"] = {}')
        self.data.append('nodes["RepeatTimeoutDelay"] = {}')
        self.data.append('nodes["RepeatCodeNotSupported"] = {}')
        self.data.append('nodes["RepeatCodeNotSupportedDelay"] = {}')
        self.data.append('nodes["RepeatCodeNotActive"] = {}')
        self.data.append('nodes["RepeatCodeNotActiveDelay"] = {}')
        self.data.append('nodes["RepeatCodeNoAssignment"] = {}')
        self.data.append('nodes["RepeatCodeNoAssignmentDelay"] = {}')

        self.data.append('nodes["ScanTimeout"] = {}')
        self.data.append('nodes["ScanTimeoutDelay"] = {}')

        if _op_mode == 2:
            self.data.append('nodes["HMISetNewJobNr"] = {}')
            self.data.append('nodes["HMIUnsetEnableJob"] = {}')
            self.data.append('nodes["HMIDisplayNewJobNr"] = {}')
            self.data.append('nodes["HMIDisplayNewJobNrDelay"] = {}')

            self.data.append('nodes["HMISetNewPrgNr"] = {}')
            self.data.append('nodes["HMIResetBatchCounter"] = {}')
            self.data.append('nodes["HMISetEnablePrg"] = {}')
            self.data.append('nodes["HMIDisplayNewPrgNr"] = {}')
            self.data.append('nodes["HMIDisplayNewPrgNrDelay"] = {}')

        self.data.append('nodes["SetNewJobNr"] = {}')
        self.data.append('nodes["UnsetEnableJob"] = {}')
        self.data.append('nodes["DisplayNewJobNr"] = {}')
        self.data.append('nodes["DisplayNewJobNrDelay"] = {}')
        self.data.append('nodes["JobNrFinalOK"] = {}')

        self.data.append('nodes["SetNewPrgNr"] = {}')
        self.data.append('nodes["ResetBatchCounter"] = {}')
        self.data.append('nodes["SetEnablePrg"] = {}')
        self.data.append('nodes["DisplayNewPrgNr"] = {}')
        self.data.append('nodes["DisplayNewPrgNrDelay"] = {}')
        self.data.append('nodes["DoNokResult"] = {}')

        self.data.append('')

    def workflow(self, source, _op_mode):
        self.data.append('------------ CS/SE System ------- Channel Signals -------------------------')
        self.data.append('nodes["StartWithEnable"].atom = atoms["$Local"]')
        self.data.append('nodes["StartWithEnable"].successor = {{var = "dummy",val = nil, next = nodes["SetEnableStart"] }}')
        self.data.append('')

        self.data.append('nodes["SetEnableStart"].atom = atoms["$SetEnable"]')
        self.data.append('nodes["SetEnableStart"].successor = {{var = "dummy",val = nil, next = nodes["InitIDCode"] }}')
        self.data.append('')

        self.data.append('nodes["StartWithoutEnable"].atom = atoms["$Local"]')
        self.data.append('nodes["StartWithoutEnable"].successor = {{var = "dummy",val = nil, next = nodes["InitIDCode"] }}')
        self.data.append('')

        if source == 0:
            nodeJump = "InitScanner"
        else:
            nodeJump = "WaitIdCodeResult"

        self.data.append('nodes["InitIDCode"].atom = atoms["$IdCodeInit"]')
        self.data.append('nodes["InitIDCode"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('nodes["InitScanner"].atom = atoms["$InitScanner"]')
        self.data.append('nodes["InitScanner"].successor = {{var = "idcodestatus",val = c.jobResultScannerNotReady, next = nodes["DisplayScannerNotActive"]},')
        self.data.append('		                 {var = "idcodestatus",val = c.jobResultComponentHasNoScanner, next = nodes["DisplayNoScanner"]},')
        self.data.append('		                 {var = "idcodestatus",val = c.jobResultScannerRdy, next = nodes["WaitForScanInitAck"]}}')
        self.data.append('')

        self.data.append('nodes["DisplayNoScanner"].atom = atoms["$DisplayNoScanner"]')
        self.data.append('nodes["DisplayNoScanner"].successor = {{var = "dummy",val = nil, next = nodes["WaitForScanInitAck"] }}')
        self.data.append('')

        self.data.append('nodes["DisplayScannerNotActive"].atom = atoms["$DisplayScannerNotActive"]')
        self.data.append('nodes["DisplayScannerNotActive"].successor = {{var = "dummy",val = nil, next = nodes["WaitForScanInitAck"] }}')
        self.data.append('')

        self.data.append('nodes["WaitForScanInitAck"].atom = atoms["$WaitScanInitAck"]')

        if _op_mode == 2:
            self.data.append('nodes["WaitForScanInitAck"].successor = {{var = "dummy", val = nil, next = nodes["WaitForInputTrigger"]}}')
            self.data.append('--Input Gruppe Prg / Job / Scan')
            self.data.append('nodes["WaitForInputTrigger"].atom = atoms["$TriggerInGrp2"]')
            self.data.append('nodes["WaitForInputTrigger"].successor = {{var = "idcodestatus", val = c.jobResultHMIPrgSelected, next = nodes["HMISetNewPrgNr"]},')
            self.data.append('                                          {var = "idcodestatus", val = c.jobResultHMIJobSelected, next = nodes["HMISetNewJobNr"]},')
            self.data.append('					                        {var = "idcodestatus", val = c.jobResultScanTrigger, next = nodes["Scanning"]}}')
        else:
            self.data.append('nodes["WaitForScanInitAck"].successor = {{var = "dummy",val = nil, next = nodes["WaitForScanStartTrigger"] }}')


        self.data.append('')

        self.data.append('nodes["WaitForScanStartTrigger"].atom = atoms["$WaitScanStartTrigger"]')
        self.data.append('nodes["WaitForScanStartTrigger"].successor = {{var = "dummy",val = nil, next = nodes["Scanning"] }}')
        self.data.append('')

        self.data.append('nodes["Scanning"].atom = atoms["$DoScan"]')
        self.data.append('nodes["Scanning"].successor = {{var = "dummy",val = nil, next = nodes["WaitIdCodeResult"] }}')
        self.data.append('')

        self.data.append('--Wiederholsequenz, wenn Scanner keine Barcode gelesen hat')
        self.data.append('nodes["RepeatTimeout"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatTimeout"].successor = {{var = "dummy",val = nil, next = nodes["RepeatTimeoutDelay"]}}')
        self.data.append('nodes["RepeatTimeoutDelay"].atom = atoms["$ScanTimeoutMsg"]')
        self.data.append('nodes["RepeatTimeoutDelay"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('--Wiederholsequenz, wenn Scanner einen nicht unterstuetzten Code gelesen hat')
        self.data.append('nodes["RepeatCodeNotSupported"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatCodeNotSupported"].successor = {{var = "dummy",val = nil, next = nodes["RepeatCodeNotSupportedDelay"]}}')
        self.data.append('nodes["RepeatCodeNotSupportedDelay"].atom = atoms["$CodeNotSupportedMsg"]')
        self.data.append('nodes["RepeatCodeNotSupportedDelay"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('--Wiederholsequenz, wenn Scanner einen nicht aktiven Code gelesen hat')
        self.data.append('nodes["RepeatCodeNotActive"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatCodeNotActive"].successor = {{var = "dummy",val = nil, next = nodes["RepeatCodeNotActiveDelay"]}}')
        self.data.append('nodes["RepeatCodeNotActiveDelay"].atom = atoms["$CodeNotActiveMsg"]')
        self.data.append('nodes["RepeatCodeNotActiveDelay"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('--Wiederholsequenz, wenn Id Code nicht zugeordnet werden konnte')
        self.data.append('nodes["RepeatCodeNoAssignment"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatCodeNoAssignment"].successor = {{var = "dummy",val = nil, next = nodes["RepeatCodeNoAssignmentDelay"]}}')
        self.data.append('nodes["RepeatCodeNoAssignmentDelay"].atom = atoms["$DisplayNoAssignment"]')
        self.data.append('nodes["RepeatCodeNoAssignmentDelay"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('nodes["ScanTimeout"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["ScanTimeout"].successor = {{var = "dummy",val = nil, next = nodes["ScanTimeoutDelay"]}}')
        self.data.append('nodes["ScanTimeoutDelay"].atom = atoms["$ScanTimeoutDelay"]')
        self.data.append('nodes["ScanTimeoutDelay"].successor = {{var = "dummy",val = nil, next = nodes["DoNokResult"]}}')

        self.data.append('nodes["WaitIdCodeResult"].atom = atoms["$TriggerInGrp1"]')
        self.data.append('nodes["WaitIdCodeResult"].successor = {{var = "timeout",val = 1, next = nodes["ScanTimeout"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultScanTimeout, next = nodes["RepeatTimeout"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultScannedCodeNotActive, next = nodes["RepeatCodeNotActive"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultScannedCodeNotSupported, next = nodes["RepeatCodeNotSupported"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultNewPrgAssignment, next = nodes["SetNewPrgNr"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultNewJobAssignment, next = nodes["SetNewJobNr"]},')
        if _op_mode == 2:
            self.data.append('	                             {var = "idcodestatus", val = c.jobResultHMIPrgSelected, next = nodes["HMISetNewPrgNr"]},')
            self.data.append('	                             {var = "idcodestatus", val = c.jobResultHMIJobSelected, next = nodes["HMISetNewJobNr"]},')

        self.data.append('	                             {var = "idcodestatus",val = c.jobResultNoAssignmentFound, next = nodes["RepeatCodeNoAssignment"]}}')
        self.data.append('')

        # Spezialbehandlung Prg/Job selection HMI!!!!!
        if _op_mode == 2:
            self.data.append('--Gutfall Job HMI')
            self.data.append('nodes["HMISetNewJobNr"].atom = atoms["$JobNr"]')
            self.data.append('nodes["HMISetNewJobNr"].successor = {{var = "dummy",val = nil, next = nodes["HMIUnsetEnableJob"]}}')
            self.data.append('')

            self.data.append('--Enable wegnehmen')
            self.data.append('nodes["HMIUnsetEnableJob"].atom = atoms["$UnsetEnable"]')
            self.data.append('nodes["HMIUnsetEnableJob"].successor = {{var = "dummy",val = nil, next = nodes["HMIDisplayNewJobNr"]}}')
            self.data.append('')

            self.data.append('--Anzeige Job Nr')
            self.data.append('nodes["HMIDisplayNewJobNr"].atom = atoms["$DisplayMsgTimeDelay"]')
            self.data.append('nodes["HMIDisplayNewJobNr"].successor = {{var = "dummy",val = nil, next = nodes["HMIDisplayNewJobNrDelay"]}}')
            self.data.append('')

            self.data.append('nodes["HMIDisplayNewJobNrDelay"].atom = atoms["$HMIDisplayJobNrTimeDelay"]')
            self.data.append('nodes["HMIDisplayNewJobNrDelay"].successor = {{var = "dummy",val = nil, next = nodes["JobNrFinalOK"]}}')
            self.data.append('')


            self.data.append('--Gutfall Prg HMI')
            self.data.append('nodes["HMISetNewPrgNr"].atom = atoms["$PrgNr"]')
            self.data.append('nodes["HMISetNewPrgNr"].successor = {{var = "dummy",val = nil, next = nodes["HMIResetBatchCounter"]}}')
            self.data.append('')

            self.data.append('-- reset BatchCounter')
            self.data.append('nodes["HMIResetBatchCounter"].atom = atoms["$ResetBatchCounter"]')
            self.data.append('nodes["HMIResetBatchCounter"].successor = {{var = "dummy",val = nil, next = nodes["HMISetEnablePrg"]}}')
            self.data.append('')

            self.data.append('--Enable setzen')
            self.data.append('nodes["HMISetEnablePrg"].atom = atoms["$SetEnable"]')
            self.data.append('nodes["HMISetEnablePrg"].successor = {{var = "dummy",val = nil, next = nodes["HMIDisplayNewPrgNr"]}}')
            self.data.append('')

            self.data.append('--Anzeige Prg Nr')
            self.data.append('nodes["HMIDisplayNewPrgNr"].atom = atoms["$DisplayMsgTimeDelay"]')
            self.data.append('nodes["HMIDisplayNewPrgNr"].successor = {{var = "dummy",val = nil, next = nodes["HMIDisplayNewPrgNrDelay"]}}')
            self.data.append('')
            self.data.append('nodes["HMIDisplayNewPrgNrDelay"].atom = atoms["$HMIDisplayPrgNrTimeDelay"]')
            self.data.append('nodes["HMIDisplayNewPrgNrDelay"].successor = {{var = "dummy",val = nil, next = nodes["DoNokResult"]}}')
            self.data.append('')
            self.data.append('')



        self.data.append('--Gutfall Job')
        self.data.append('nodes["SetNewJobNr"].atom = atoms["$JobNr"]')
        self.data.append('nodes["SetNewJobNr"].successor = {{var = "dummy",val = nil, next = nodes["UnsetEnableJob"]}}')
        self.data.append('')

        self.data.append('--Enable wegnehmen')
        self.data.append('nodes["UnsetEnableJob"].atom = atoms["$UnsetEnable"]')
        self.data.append('nodes["UnsetEnableJob"].successor = {{var = "dummy",val = nil, next = nodes["DisplayNewJobNr"]}}')
        self.data.append('')

        self.data.append('--Anzeige Job Nr')
        self.data.append('nodes["DisplayNewJobNr"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["DisplayNewJobNr"].successor = {{var = "dummy",val = nil, next = nodes["DisplayNewJobNrDelay"]}}')
        self.data.append('')

        self.data.append('nodes["DisplayNewJobNrDelay"].atom = atoms["$DisplayJobNrTimeDelay"]')
        self.data.append('nodes["DisplayNewJobNrDelay"].successor = {{var = "dummy",val = nil, next = nodes["JobNrFinalOK"]}}')
        self.data.append('')


        self.data.append('nodes["JobNrFinalOK"].atom = atoms["$ScanFinalJobOK"]')
        self.data.append('nodes["JobNrFinalOK"].successor = {{var = "dummy",val = nil, next = f.EndNode }}')
        self.data.append('')

        self.data.append('--Gutfall Prg')

        if _op_mode == 2:
            self.data.append('--Job Zaehler loeschen')
            self.data.append('nodes["DelOkNokCounter"].atom = atoms["$DelOkNokCounter"]')
            self.data.append('nodes["DelOkNokCounter"].successor = {{var = "dummy", val = nil, next = nodes["SetOkNokCounter"]}}')
            self.data.append('--Zaehler setzen')
            self.data.append('nodes["SetOkNokCounter"].atom = atoms["$SetOkNokCounter"]')
            self.data.append('nodes["SetOkNokCounter"].successor = {{var = "dummy", val = nil, next = nodes["SetEnablePrg"]}}')
            self.data.append('')

        self.data.append('nodes["SetNewPrgNr"].atom = atoms["$PrgNr"]')
        self.data.append('nodes["SetNewPrgNr"].successor = {{var = "dummy",val = nil, next = nodes["ResetBatchCounter"]}}')
        self.data.append('')

        self.data.append('-- reset BatchCounter')
        self.data.append('nodes["ResetBatchCounter"].atom = atoms["$ResetBatchCounter"]')
        self.data.append('nodes["ResetBatchCounter"].successor = {{var = "dummy",val = nil, next = nodes["SetEnablePrg"]}}')
        self.data.append('')

        self.data.append('--Enable setzen')
        self.data.append('nodes["SetEnablePrg"].atom = atoms["$SetEnable"]')
        self.data.append('nodes["SetEnablePrg"].successor = {{var = "dummy",val = nil, next = nodes["DisplayNewPrgNr"]}}')
        self.data.append('')

        self.data.append('--Anzeige Prg Nr')
        self.data.append('nodes["DisplayNewPrgNr"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["DisplayNewPrgNr"].successor = {{var = "dummy",val = nil, next = nodes["DisplayNewPrgNrDelay"]}}')
        self.data.append('')
        self.data.append('nodes["DisplayNewPrgNrDelay"].atom = atoms["$DisplayPrgNrTimeDelay"]')
        self.data.append('nodes["DisplayNewPrgNrDelay"].successor = {{var = "dummy",val = nil, next = nodes["DoNokResult"]}}')
        self.data.append('')

        self.data.append('--Kein ID Code -> Beenden Skript')
        self.data.append('nodes["DoNokResult"].atom = atoms["$DoNokResult"]')
        self.data.append('nodes["DoNokResult"].successor = {{var = "dummy",val = nil, next = f.EndNode}}')
        self.data.append('')

        self.data.append('------------ CS/SE System ------- END -------------------------------------')
        self.data.append('')
        self.data.append('')
        self.data.append('')
        self.data.append('--Eigentlicher Start Code--')
        self.data.append('f.setInitNode(initNode)')
        self.data.append('f.checkPlausib(nodes)')
        #self.data.append('cpp.job:logMsg("ENABLE=" .. ENABLE)')
        self.data.append('if( ENABLE == "1") then')
        self.data.append('	f.go(nodes["StartWithEnable"])')
        self.data.append('else')
        self.data.append('	f.go(nodes["StartWithoutEnable"])')
        self.data.append('end')
        self.data.append('f.cleanUpNodes(atoms, nodes)')
        self.data.append('package.loaded["atoms"]=nil')


    def create(
        self,
        id_input_name1,
        id_input_comment1,
        target,
        trigger,
        timeout,
        codes,
        range1,
        timeouttext,
        user,
        comment,
        date,
        display_time,
        display_text,
        range2,
        source,
        play_sound,
        laserontime,
        op_mode
    ):
        self.requires()
        #self.repeatScan()
        self.initNode(user, comment, date, display_time, id_input_name1, id_input_comment1)
        self.config()

        self.data.extend(atoms.Local())
        self.data.extend(atoms.SetEnable())
        self.data.extend(atoms.UnsetEnable())

        self.idCodeInit(source, 1, range1, range2, target)
        self.data.extend(atoms.InitScanner(codes, laserontime, trigger, play_sound))
        self.data.extend(atoms.DisplayNoScanner())
        self.data.extend(atoms.DisplayScannerNotActive())
        self.data.extend(atoms.WaitScanInitAck())
        self.waitScanStartTrigger(display_text, source)
        self.data.extend(atoms.DoScan())
        self.data.extend(atoms.WaitIDCodeTimeout(timeout, display_text, source))
        self.data.extend(atoms.WaitIDCode())

        self.data.extend(atoms.DisplayNoScanner())
        if op_mode == 2 and source == 1:
            self.data.extend(atoms.TriggerInGrp("\"$WaitHMIInput\", \"$WaitIdCode\",\"$WaitIdCodeTimeout\"", "1"))
        else:
            self.data.extend(atoms.TriggerInGrp("\"$WaitIdCode\", \"$WaitIdCodeTimeout\"", "1"))

        if op_mode == 2:
            self.data.extend(atoms.WaitHMIInput())
            self.data.extend(atoms.DelOkNokCounter())
            self.data.extend(atoms.SetOkNokCounter())
            self.data.extend(atoms.TriggerInGrp("\"$WaitHMIInput\", \"$WaitScanStartTrigger\""))

        self.data.extend(atoms.PrgNr())
        self.data.extend(atoms.ResetBatchCounter(op_mode))
        self.data.extend(atoms.DisplayPrgNrTimeDelay(target=target))
        self.data.extend(atoms.JobNr())
        self.data.extend(atoms.DisplayJobNrTimeDelay(target=target))


        # HMI DISPLAY ATOMS
        if op_mode == 2:
            self.data.extend(atoms.DisplayPrgNrTimeDelay(hmi=True))
            self.data.extend(atoms.DisplayJobNrTimeDelay(hmi=True))



        self.data.extend(atoms.DisplayMsgTimeDelay(display_time))
        self.data.extend(atoms.ScanFinalJobOK())
        self.data.extend(atoms.DoNokResult())
        self.data.extend(atoms.ScanTimeoutDelay(timeouttext))
        self.data.extend(atoms.ScanTimeoutMsg())
        self.data.extend(atoms.CodeNotSupportedMsg())
        self.data.extend(atoms.CodeNotActiveMsg())
        self.data.extend(atoms.CodeNotAssignedMsg())

        self.publishAtoms()
        self.nodes(op_mode, source)
        self.workflow(source, op_mode)

        return self.data
