c = require "constants"
f = require "runFunctions"
plc = require "plcsignals"
codes = require "scancodes"

local initNode = {
   name = "initNode",
   timeout = 300,
   type = c.TypeIdleStartNode,
   selectsCw = 0,
   selectsEn = 0,
   displayJobSteps = 1,
   displayTime = 1,
   clearIDCode = 0,
   ignoreResults = 0,
   jobComment = '',
   jobUser = '',
   jobDate = 0
}
--globale run Einstellungen setzen
local config = {
    stopOnNok = false,
    stopOnTimeout = false
}
f.setConfiguration(config)

-- Atoms for Idle Script ---
atoms  = {}

-- Lokaler Knoten --
atoms["$Local"] = {
   type = c.TypeDevice, 
   mode = c.DeviceModeLocal,
   dest = "1"
}

atoms["$SetEnable"] = {
   text = "",
   type = c.TypeTriggerOut,
   mode = c.TriggerOutModeBmsIn,
   dest = plc.In.En, --    BMS_SE_E_EN
   state = 1,
   range = 1,
   valueList = {}
}

atoms["$UnsetEnable"] = {
   text = "",
   type = c.TypeTriggerOut,
   mode = c.TriggerOutModeBmsIn,
   dest = plc.In.En, --    BMS_SE_E_EN
   state = 0,
   range = 1,
   valueList = {}
}

atoms["$WaitHMIInput"] = {
   type = c.TypeTriggerIn, -- TriggerIn --
   mode = c.TriggerInModeHMIInput, -- Warten auf Job Cw --
   dest = 0,
   state = 0,
   range = 0,
   valueList = {}
}

atoms["$TriggerInGrp2"] = {
   type=c.TypeTriggerInGrp, 
   members = {"$WaitHMIInput"}
}

atoms["$PrgNr"] = {
   text = "",
   type = c.TypeTriggerOut, -- TriggerIn --
   mode = c.TriggerOutModeBmsIn, -- Warten auf Job Cw --
   dest = plc.In.Prog0,
   state = 0,
   action = "atoms['$PrgNr'].state = tonumber(cpp.job:getJobSeqParams('assign')); ENABLE='1'",
   range = 8,
   valueList = {}
}

atoms["$ResetBatchCounter"] = {
   text = "",
   type = c.TypeTriggerOut,
   mode = c.TriggerOutModeResetOkNok,
   dest = 2, --    del OkNok-counter
   range = 0,
   state = 0,
   valueList = {}
}

atoms["$DisplayPrgNrTimeDelay"] = {
   text = "",
   type = c.TypeTriggerIn,
   mode = c.TriggerInModeTimeDelay,
   dest = 0, --    wait for delayed time
   range= 0,
   state= 0,
   action = "atoms['$DisplayPrgNrTimeDelay'].text =  '{{{Prg: [[[' .. cpp.job:getJobSeqParams('assign') .. ']]] received'",
   valueList = {}
}

atoms["$JobNr"] = {
   text = "",
   type = c.TypeTriggerOut, -- TriggerIn --
   mode = c.TriggerOutModeBmsIn, -- Warten auf Job Cw --
   dest = plc.In.Job0,
   state = 0,
   action = "atoms['$JobNr'].state = tonumber(cpp.job:getJobSeqParams('assign')); ENABLE='0'",
   range = 8,
   valueList = {}
}

atoms["$DisplayJobNrTimeDelay"] = {
   text = "",
   type = c.TypeTriggerIn,
   mode = c.TriggerInModeTimeDelay,
   dest = 0, --    wait for delayed time
   range= 0,
   state= 0,
   action = "atoms['$DisplayJobNrTimeDelay'].text = '{{{Job: [[[' .. cpp.job:getJobSeqParams('assign') .. ']]] received'",
   valueList = {}
}

atoms["$DisplayMsgTimeDelay"]={
   text ="",
   type = c.TypeTriggerOut,
   mode = c.TriggerOutModeTimeDelay,
   dest =  1000,    --    set time for delay
   range= 0,
   state= 3,
   valueList = {}
}

atoms["$ScanFinalJobOK"]={
   text = "",
   type = c.TypeTriggerOut,
   mode = c.TriggerOutModeScanFinal,
   dest = 0,    --   state: 0= hide Scan Icon, 1= still display Scan Icon
   range= 0,
   state= 0,
   valueList = {}
}

--nok result ausspucken, damit skrip wieder von vorne lauft
atoms["$DoNokResult"] = {
   text ="",
   type = c.TypeTriggerOut,		-- TriggerIn --
   mode = c.TriggerOutModeJobResult, 		-- Warten auf Job Cw --
   dest = 0,
   range= 0,
   state= 0,
   valueList = {}
}

f.publishAtoms(atoms,function (a) cpp.job:addAtom(a) end)

nodes = {}
nodes["StartWithEnable"] = {}
nodes["SetEnableStart"] = {}
nodes["StartWithoutEnable"] = {}
nodes["WaitHMIInput"] = {}
nodes["SetNewJobNr"] = {}
nodes["UnsetEnableJob"] = {}
nodes["DisplayNewJobNr"] = {}
nodes["DisplayNewJobNrDelay"] = {}
nodes["SetNewPrgNr"] = {}
nodes["ResetBatchCounter"] = {}
nodes["SetEnablePrg"] = {}
nodes["DisplayNewPrgNr"] = {}
nodes["DisplayNewPrgNrDelay"] = {}
nodes["DoNokResult"] = {}
------------ CS/SE System ------- Channel Signals -------------------------
nodes["StartWithEnable"].atom = atoms["$Local"]
nodes["StartWithEnable"].successor = {{var = "dummy", val = nil, next = nodes["SetEnableStart"]}}
nodes["SetEnableStart"].atom = atoms["$SetEnable"]
nodes["SetEnableStart"].successor = {{var = "dummy", val = nil, next = nodes["WaitHMIInput"]}}
nodes["StartWithoutEnable"].atom = atoms["$Local"]
nodes["StartWithoutEnable"].successor = {{var = "dummy", val = nil, next = nodes["WaitHMIInput"]}}
nodes["WaitHMIInput"].atom = atoms["$TriggerInGrp2"]
nodes["WaitHMIInput"].successor = {{var = "idcodestatus", val = c.jobResultHMIPrgSelected, next = nodes["SetNewPrgNr"]},
				   {var = "idcodestatus", val = c.jobResultHMIJobSelected, next = nodes["SetNewJobNr"]}}
--Gutfall Job
nodes["SetNewJobNr"].atom = atoms["$JobNr"]
nodes["SetNewJobNr"].successor = {{var = "dummy", val = nil, next = nodes["UnsetEnableJob"]}}
--Enable wegnehmen
nodes["UnsetEnableJob"].atom = atoms["$UnsetEnable"]
nodes["UnsetEnableJob"].successor = {{var = "dummy", val = nil, next = nodes["DisplayNewJobNr"]}}
--Anzeige Job Nr
nodes["DisplayNewJobNr"].atom = atoms["$DisplayMsgTimeDelay"]
nodes["DisplayNewJobNr"].successor = {{var = "dummy", val = nil, next = nodes["DisplayNewJobNrDelay"]}}
nodes["DisplayNewJobNrDelay"].atom = atoms["$DisplayJobNrTimeDelay"]
nodes["DisplayNewJobNrDelay"].successor = {{var = "dummy", val = nil, next = f.EndNode}}
--Gutfall Prg
nodes["SetNewPrgNr"].atom = atoms["$PrgNr"]
nodes["SetNewPrgNr"].successor = {{var = "dummy", val = nil, next = nodes["ResetBatchCounter"]}}
-- reset BatchCounter
nodes["ResetBatchCounter"].atom = atoms["$ResetBatchCounter"]
nodes["ResetBatchCounter"].successor = {{var = "dummy", val = nil, next = nodes["SetEnablePrg"]}}
--Enable setzen
nodes["SetEnablePrg"].atom = atoms["$SetEnable"]
nodes["SetEnablePrg"].successor = {{var = "dummy", val = nil, next = nodes["DisplayNewPrgNr"]}}
--Anzeige Job Nr
nodes["DisplayNewPrgNr"].atom = atoms["$DisplayMsgTimeDelay"]
nodes["DisplayNewPrgNr"].successor = {{var = "dummy", val = nil, next = nodes["DisplayNewPrgNrDelay"]}}
nodes["DisplayNewPrgNrDelay"].atom = atoms["$DisplayPrgNrTimeDelay"]
nodes["DisplayNewPrgNrDelay"].successor = {{var = "dummy", val = nil, next = nodes["DoNokResult"]}}
--Kein ID Code -> Beenden Skript
nodes["DoNokResult"].atom = atoms["$DoNokResult"]
nodes["DoNokResult"].successor = {{var = "dummy", val = nil, next = f.EndNode}}
------------ CS/SE System ------- END -------------------------------------
--Eigentlicher Start Code--
f.setInitNode(initNode)
f.checkPlausib(nodes)
if (ENABLE == "1") then
	f.go(nodes["StartWithEnable"])
else
	f.go(nodes["StartWithoutEnable"])
end
f.cleanUpNodes(atoms, nodes)
package.loaded["atoms"] = nil
