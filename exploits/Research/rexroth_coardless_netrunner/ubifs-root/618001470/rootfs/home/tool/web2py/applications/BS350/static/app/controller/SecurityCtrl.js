/*global Ext: false, TR: false */
Ext.define('BS350.controller.SecurityCtrl',
  {
    extend: 'BS350.custom.ViewController',

    views: ['SecurityView', 'BS350.custom.CertView', 'BS350.custom.UploadCertificateWindow'],

    items: [
      {name: 'secField', query: '#secField'},
      {name: 'enableHttps', query: '#enableHttps', actions: {change: 'changeHttps'}},
      {name: 'warningLabel', query: '#warningLabel'},
      /* { name: 'cert', query: '#cert'},
       { name: 'key', query: '#key'},
       { name: 'ca_cert', query: '#ca_cert' },
       { name: 'ca_key', query: '#ca_key' },

       { name: 'uploadCertBtn', query: '#uploadCertBtn', actions: { click: 'uploadCert' } },
       { name: 'uploadKeyBtn', query: '#uploadKeyBtn', actions: { click: 'uploadKey' } },*/
      {name: 'btnSave', query: '#btnSave', actions: {click: 'end'}},
      {name: 'btnDiscard', query: '#btnDiscard', actions: {click: 'reset'}}
    ],

    backup: {},
    changes: {},
    blockCheck: false,
    forceClose: false,

    initView: function () {
      if (this.access !== 'w') {
        this.V.enableHttps.setReadOnly(true);
        this.view.getDockedItems()[0].hide();
      }
      //  this.V.cert.setVisible(false);
      // this.V.key.setVisible(false);
      this.forceClose = false;
      this.getData();
    },

    /*    updateCert: function () {
     var me = this;
     Ext.Ajax.request({
     url: '/BS350/security/certFilenames',
     success: function (res) {
     var data = Ext.JSON.decode(res.responseText);
     if(data[0] !== ''){
     me.V.ca_cert.setValue(data[0]);
     }
     else
     me.V.ca_cert.setValue('');

     if(data[1] !== ''){
     me.V.ca_key.setValue(data[1]);
     }
     else
     me.V.ca_key.setValue('');
     },
     failure: function (res) {

     }
     });
     },*/

    getData: function () {
      var me = this;
      Ext.Ajax.request({
        url: '/BS350/security/SecSrv',
        success: function (res) {
          var data;
          if (res.responseText === "None") {
            data = {"https": false};
            me.setValues(data);
          } else {
            data = Ext.JSON.decode(res.responseText).database;
            me.setValues(data);
          }
          Ext.ComponentQuery.query('#secPanel')[0].setLoading(false);
        }
      });
    },

    setValues: function (data) {
      this.backup = Ext.clone(data);
      this.changes = Ext.clone(data);

      this.V.enableHttps.setValue(data.https);

      this.V.btnSave.setDisabled(true);
      this.V.btnDiscard.setDisabled(true);
    },


    changeHttps: function (checkbox, value) {
      this.changes.https = value;
      if (value == true) {
        this.V.warningLabel.setText(TR('The usage of HTTPS is significantly slower than HTTP and might show warnings because unsigned certificates!'));
        //this.V.cert.setVisible(true);
        //this.V.key.setVisible(true);
      }
      if (value == false) {
        this.V.warningLabel.setText('');
        //this.V.cert.setVisible(false);
        //this.V.key.setVisible(false);
      }
      this.checkChanges();
    },

    /*   initUploadWin: function (uploadFunction, cancelFunction) {
     // Add windows elements
     this.V.uploadForm = this.V.uploadWin.down('#uploadForm');
     this.V.uploadForm.addListener('beforeaction', this.startUploading, this);
     this.V.uploadForm.addListener('actioncomplete', this.finishUploading, this);

     this.V.uploadBtn = this.V.uploadWin.down('#uploadBtn');
     this.V.cancelBtn = this.V.uploadWin.down('#cancelBtn');
     this.V.cancelBtn.addListener('click', function () { this.V.uploadWin.close(); }, this);

     this.V.updateProgress = this.V.uploadWin.down('#updateProgress');
     this.V.progressLabel = this.V.uploadWin.down('#progressLbl');
     this.V.progressBar = this.V.uploadWin.down('#progressBar');

     //this.V.uploadBtn.addListener('click', this.uploadCaCertFile, this);
     this.V.uploadBtn.addListener('click', uploadFunction, this);
     this.V.cancelBtn.addListener('click', cancelFunction, this);
     this.V.uploadForm.down('filefield').validator = function (value) {
     if (value.match(/(\.crt)|(\.key)$/g)) {
     return true;
     }
     return T_R('File must be a .crt or .key');
     };
     },

     uploadCert: function () {
     var me = this;
     this.V.uploadWin = Ext.create('BS350.custom.UploadCertificateWindow', {
     title: T_R('Upload Certificate')
     });
     this.initUploadWin(function () { this.uploadCertFile('/BS350/security/uploadCaCert', T_R('Uploaded Certificate')); }, function () { this.V.ca_cert.setValue(""); me.checkChanges(); });
     this.V.uploadWin.show();
     this.V.uploadWin.addListener('close', function () {this.updateState = 'start'; }, this);
     this.updateState = 'upload';
     },

     uploadKey: function () {
     var me = this;
     this.V.uploadWin = Ext.create('BS350.custom.UploadCertificateWindow', {
     title: T_R('Upload Key')
     });
     this.initUploadWin(function () { this.uploadCertFile('/BS350/security/uploadCaKey', T_R('Uploaded Key')); }, function () { this.V.ca_key.setValue(""); me.checkChanges(); });
     this.V.uploadWin.show();
     this.V.uploadWin.addListener('close', function () {this.updateState = 'start'; }, this);
     this.updateState = 'upload';
     },*/
    /*
     uploadCertFile: function (url, title) {
     var me = this;
     var form = this.V.uploadForm.getForm();
     var valid = form.getFields().getAt(0).validate();
     if (valid) {
     //this.V.uploadForm.setVisible(false);
     //this.V.updateProgress.setVisible(true);
     form.submit({
     url: url,
     success: function (form, action) {
     if (action.result.ca_cert) {
     me.V.ca_cert.setValue(action.result.ca_cert);
     } else if (action.result.ca_key) {
     me.V.ca_key.setValue(action.result.ca_key);
     }
     //me.V.progressLabel.setText(title);
     //me.V.progressBar.setVisible(false);
     //Ext.TaskManager.stop(me.updateProgress);
     me.V.uploadWin.close();

     me.useFakeTask = true;
     me.numRetry = 0;
     me.updateState = 'restart';
     me.checkChanges();
     },
     failure: function (form, action) {
     // IE can not handle this. Use only for debugging purposes.
     me.V.uploadWin.close();
     Ext.TaskManager.stop(me.updateProgress);
     switch (action.failureType) {
     case Ext.form.action.Action.CLIENT_INVALID:
     Ext.Msg.alert(T_R('Failure'), T_R('Form fields may not be submitted with invalid values'));
     break;
     case Ext.form.action.Action.CONNECT_FAILURE:
     Ext.Msg.alert(T_R('Failure', T_R('Ajax communication failed')));
     break;
     case Ext.form.action.Action.SERVER_INVALID:
     Ext.Msg.alert(T_R('Failure'), T_R(action.result.msg));
     break;
     default:
     Ext.Msg.alert(T_R('Failure'), T_R(action.result.msg));
     break;
     }
     me.updateState = 'start';
     }
     });
     }
     },*/
    /*
     startUploading: function () {
     this.V.progressLabel.setText(T_R('Uploading firmware'));
     this.V.progressBar.updateProgress(0, '0%');

     Ext.TaskManager.start(this.updateProgress);
     },

     finishUploading: function () {
     Ext.TaskManager.stop(this.updateProgress);
     },*/


    checkChanges: function () {
      //var me = this;
      var isDirty = this.isDirty();
      //if(me.V.enableHttps.getValue() === true) // && me.V.ca_cert.isValid() && me.V.ca_key.isValid())
      //{
      this.V.btnSave.setDisabled(!isDirty);
      this.V.btnDiscard.setDisabled(!isDirty);
      /*}
       else if(me.V.enableHttps.getValue() === false)
       {
       this.V.btnSave.setDisabled(!isDirty);
       this.V.btnDiscard.setDisabled(!isDirty);
       }*/
    },

    isDirty: function () {
      var k;
      for (k in this.changes) {
        if (this.backup[k] !== this.changes[k]) {
          return true;
        }
      }
      return false;
    },

    reset: function () {
      Ext.ComponentQuery.query('#secPanel')[0].setLoading(TR("Discarding..."));
      this.getData();
    },

    save: function (button, event, eOpts) {
      var me = this;
      var originNew;
      // me.updateCert();
      Ext.Ajax.request({
        url: '/BS350/security/SecSrv',
        method: 'POST',
        jsonData: {database: me.changes},
        success: function (res) {
          me.setValues(me.changes);
          if (eOpts.callback) {
            eOpts.callback();
          }
          if (me.V.enableHttps.getValue() === true) { // && (me.V.ca_cert.getValue()!== '' && me.V.ca_key.getValue()!== '')){
            Ext.Ajax.request({
              url: '/BS350/security/changeConnection',
              method: 'POST',
              params: {active: true}
            });
            originNew = "https://" + window.location.hostname;
            setTimeout(function () {
              window.location = originNew;
            }, 120000);
          }
          else {
            Ext.Ajax.request({
              url: '/BS350/security/changeConnection',
              method: 'POST',
              params: {active: false}
            });
            originNew = "http://" + window.location.hostname;
            setTimeout(function () {
              window.location = originNew;
            }, 120000);
          }
        }
      });
    },

    end: function (button, event, eOpts) {
      var me = this;
      //me.updateCert();
      if (true)//(me.V.enableHttps.getValue() === true ))//&& me.V.ca_cert.getValue()!== '' && me.V.ca_key.getValue()!== '') || me.V.enableHttps.getValue() === false)
      {
        Ext.Msg.show({
          title: TR('Security'),
          msg: TR('The saved changes will take effect after reboot!'),
          buttons: Ext.Msg.OKCANCEL,
          buttonText: {ok: TR("Save and reboot"), cancel: TR("Cancel")},
          fn: function (btn) {
            if (btn === "ok") {
              me.save(null, null, {
                callback: function () {
                }
              });
            }
          }
        });
      }
      /*else if(me.V.enableHttps.getValue() === true && (me.V.ca_cert.getValue()=== '' || me.V.ca_key.getValue()=== ''))
       {
       Ext.Msg.alert(T_R('Warning'), T_R('Certificate and key must both be uploaded'));
       }*/
    },

    askclose: function (panel) {
      var me = this;
      if (!me.forceClose && me.isDirty()) {
        Ext.Msg.show({
          title: TR('Save changes?'),
          msg: TR('Do you want to save the changes?'),
          buttons: Ext.Msg.YESNOCANCEL,
          fn: function (btn) {
            if (btn === 'yes') {
              me.save(null, null, {
                callback: function () {
                  panel.close();
                }
              });
            }
            if (btn === 'no') {
              me.forceClose = true;
              panel.close();
            }
          },
          icon: Ext.Msg.QUESTION
        });
        return false;
      }
      return true;
    }
  });

