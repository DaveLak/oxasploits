/*global Ext: false, TR: false */
Ext.define('BS350.controller.GroupsCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['GroupsView'],
  stores: ['GroupsStore'],

  items: [
    { name: 'grid', query: '#groupsGrid', actions: {selectionchange: 'selectionChange'}},
    { name: 'addGroupBtn', query: '#addGroup', actions: {click: 'addGroup'} },
    { name: 'removeGroupBtn', query: '#removeGroup', actions: {click: 'removeGroup'} },
    { name: 'editGroupBtn', query: '#editGroup', actions: {click: 'editGroup'} },
    { name: 'saveBtn', query: '#btnSave', actions: {click: 'save'}},
    { name: 'discardBtn', query: '#btnDiscard', actions: {click: 'discard'} },
    { name: 'groupPanel', query: '#groupPanel' },
    { name: 'groupEditWin', query: '#groupEditWin' }
  ],

  forceClose: false,

  init: function (application) {
  },

  initView: function () {
    var me = this;
    me.forceClose = false;
    me.store = me.V.grid.getStore();

    if (me.access !== 'w') {
      me.V.groupPanel.getDockedItems()[0].hide();
      me.V.grid.plugins[0].on('beforeedit', function (e) { return false; });
    }

    me.store.load(function () {
      // Count the number of groups that has the current user and accounts management permission
      me.bridgeGroupCount = 0;
      me.store.each(function (item) {
        if (item.get('hasCurrentUser') && item.get('hasAccountPerm')) {
          me.bridgeGroupCount++;
        }
      });
    });

    me.V.groupEditWin.down('#editCancel').on('click', this.cancelChanges, this);
    me.V.groupEditWin.down('#editConfirm').on('click', this.confirmChanges, this);

    me.store.on('datachanged', me.checkChanges, me);
    me.store.on('update', me.checkChanges, me);
  },

  selectionChange: function (selected) {
    if (selected.selected.length > 0) {
      var item = selected.selected.getAt(0);
      this.V.removeGroupBtn.setDisabled(item.get('hasCurrentUser') && item.get('hasAccountPerm') && this.bridgeGroupCount < 2);
      this.V.editGroupBtn.setDisabled(false);
    } else {
      this.V.removeGroupBtn.setDisabled(true);
      this.V.editGroupBtn.setDisabled(true);
    }
  },

  addGroup: function () {
    this.store.add({name: TR('New group'), desc: ''});
    this.V.grid.plugins[0].startEditByPosition({row: this.store.count() - 1, column: 0});
  },

  cancelChanges: function () {
    this.V.groupEditWin.hide();
  },

  confirmChanges: function () {
    var form = this.V.groupEditWin.down('form').getForm();
    var valid = true;
    form.getFields().each(function (item) {valid = valid && item.validate(); });
    if (valid) {
      this.V.groupEditWin.groupItem.set(form.getFieldValues());
      this.V.groupEditWin.hide();
    }
  },

  removeGroup: function () {
    var selection = this.V.grid.getSelectionModel().getSelection();
    if (selection.length > 0) {
      var item = selection[0];
      if (item.get('hasCurrentUser') && item.get('hasAccountPerm')) { this.bridgeGroupCount--; }
      this.store.remove(item);
      this.V.grid.getSelectionModel().deselectAll();
    }
  },

  save: function () {
    var me = this;
    this.V.grid.getSelectionModel().deselectAll();
    this.store.sync({
      success: function(batch, options) {
        //Ext.Msg.alert(TR('Status'), TR('User updated successfully'));
        me.store.load();
        me.V.saveBtn.setDisabled(true);
        me.V.discardBtn.setDisabled(true);
      },
      failure: function(batch, options) {
        Ext.Msg.alert(TR('Status'), TR('User update failed'));
      },
      callback: function () {
        //me.store.load();
      }
    });
  },

  discard: function () {
    var me = this;
    this.store.load(function () {
      // Count the number of groups that has the current user and accounts management permission
      me.bridgeGroupCount = 0;
      me.store.each(function (item) {
        if (item.get('hasCurrentUser') && item.get('hasAccountPerm')) {
          me.bridgeGroupCount++;
        }
      });
    });
    this.V.saveBtn.setDisabled(true);
    this.V.discardBtn.setDisabled(true);
  },

  checkChanges: function () {
    var isDirty = this.store.isDirty();
    this.V.saveBtn.setDisabled(!isDirty);
    this.V.discardBtn.setDisabled(!isDirty);
  },

  editGroup: function () {
    var item = this.V.grid.getSelectionModel().getLastSelected();
    if (item) {
      this.V.groupEditWin.groupItem = item;
      this.V.groupEditWin.setTitle(item.get('name'));
      this.V.groupEditWin.down('#nameField').setValue(item.get('name'));
      this.V.groupEditWin.down('#descriptionField').setValue(item.get('desc'));
      this.V.groupEditWin.show();
    }
  },

  askclose: function (panel) {
    var me = this;
    if ((me.store.isDirty()) && !me.forceClose) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') {me.forceClose = true; me.store.sync({callback: function () { panel.close(); }}); }
          if (btn === 'no') { me.forceClose = true; panel.close(); }
        },
        icon: Ext.Msg.QUESTION
      });
      return false;
    }
    return true;
  }
});

