/*global Ext: false, TR: false, document: false */
Ext.define('BS350.controller.BMSCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['BMSView'],

  items: [
    {name: 'inModuleList', query: '#inmodules', actions: {select: 'selectInPort'}},
    {name: 'outModuleList', query: '#outmodules', actions: {select: 'selectOutPort'}},

    {name: 'inSignalList', query: '#insignals', actions: {select: 'selectInSignal'}},
    {name: 'outSignalList', query: '#outsignals', actions: {select: 'selectOutSignal'}},

    {name: 'connectInput', query: '#inBtnConnect', actions: {click: 'connectInput'}},
    {name: 'disconnectInput', query: '#inBtnDisconnect', actions: {click: 'disconnectInput'}},

    {name: 'connectOutput', query: '#outBtnConnect', actions: {click: 'connectOutput'}},
    {name: 'disconnectOutput', query: '#outBtnDisconnect', actions: {click: 'disconnectOutput'}},

    {name: 'moduleList', query: '#moduleslist', actions: {selectionchange: 'moduleSel'}},
    {name: 'btnActivate', query: '#btnActivate', actions: {click: 'activateModule'}},
    {name: 'btnDeactivate', query: '#btnDeactivate', actions: {click: 'deactivateModule'}},


    { name: 'btnSave', query: '#btnSave', actions: {click: 'save'} },
    { name: 'btnDiscard', query: '#btnDiscard', actions: {click: 'reset'} },
    { name: 'btnReset', query: '#btnReset', actions: {click: 'resetToFactory'} }
  ],

  backup: {},
  changes: {},
  currdata: {},
  blockCheck: false,
  forceClose: false,

  initView: function () {

    if (this.access !== 'w') {
      Ext.each(Ext.ComponentQuery.query('toolbar[dock=bottom]', this.view), function (e) { e.hide(); });
      // we could also try to get rid of the button listeners (removeListener):
      Ext.each(Ext.ComponentQuery.query('button', this.view), function (e) { e.hide(); });
    }

    this.forceClose = false;
    this.moduleStore = this.view.moduleStore;

    this.inModuleStore = this.V.inModuleList.getStore();
    this.inModuleStore.getProxy().srcStore = this.moduleStore;

    this.outModuleStore = this.V.outModuleList.getStore();
    this.outModuleStore.getProxy().srcStore = this.moduleStore;

    this.moduleListStore = this.V.moduleList.getStore();
    this.moduleListStore.getProxy().srcStore = this.moduleStore;

    this.inSignalStore = this.V.inSignalList.getStore();
    this.outSignalStore = this.V.outSignalList.getStore();

    this.reset();
  },

  selectInPort: function (model, record) {
    this.moduleSelected(model, record, 'in');
  },

  selectOutPort: function (model, record) {
    this.moduleSelected(model, record, 'out');
  },

  selectInSignal: function (model, record) {
    this.signalSelected(model, record, 'in');
  },

  selectOutSignal: function (model, record) {
    this.signalSelected(model, record, 'out');
  },

  connectInput: function () {
    this.connectSignal('in');
  },

  disconnectInput: function () {
    this.disconnectSignal('in');
  },

  connectOutput: function () {
    this.connectSignal('out');
  },

  disconnectOutput: function () {
    this.disconnectSignal('out');
  },

  checkUsed: function (sStore, mStore) {
    sStore.each(function (signal) {
      var sName = signal.get('name');
      var res = mStore.queryBy(function (record) { return record.get('active') && record.get('signal') === sName; });
      signal.set({used: res.length});
    });
  },

  moduleSelected: function (model, record, direction) {
    if (model.blockSelection) { return; }
    var metasignal = record.get('metasignal');
    if (metasignal === 'none') { return; }
    var signalName = metasignal || record.get('signal');

    if (signalName) {
      // Select signal input
      var signalGrid = direction === 'in' ? this.V.inSignalList : this.V.outSignalList;
      var sStore = signalGrid.getStore();
      var sRecord = sStore.getAt(sStore.findExact('name', signalName));
      var selModel = signalGrid.getSelectionModel();
      selModel.blockSelection = true;
      selModel.select(sRecord);
      selModel.blockSelection = false;
    }
    this.setButtonStatus(direction);
  },

  signalSelected: function (model, record, direction) {
    if (model.blockSelection) { return; }
    if (record.get('used')) {
      // Select module
      var moduleGrid = direction === 'in' ? this.V.inModuleList : this.V.outModuleList;
      var mStore = moduleGrid.getStore();
      var mRecord = mStore.getAt(mStore.findExact('signal', record.get('name')));
      var selModel = moduleGrid.getSelectionModel();
      selModel.blockSelection = true;
      selModel.select(mRecord);
      selModel.blockSelection = false;
    }
    this.setButtonStatus(direction);
  },

  connectSignal: function (dir) {
    var signalGrid = (dir === 'in') ? this.V.inSignalList : this.V.outSignalList;
    var moduleGrid = (dir === 'in') ? this.V.inModuleList : this.V.outModuleList;
    var maxConn = (dir === 'in') ? 1 : 3;

    var sSel = signalGrid.getSelectionModel().getSelection();
    var mSel = moduleGrid.getSelectionModel().getSelection();

    var sStore = signalGrid.getStore();

    // Selection index with the applied filter
    var SSelIdx = sStore.indexOf(sStore.getById(sSel[0].getId())),
      mi,
      si,
      sItem,
      mItem,
      canConnect,
      qRes;

    for (mi = 0, si = SSelIdx; mi < mSel.length; mi++, si++) {
      sItem = sStore.getAt(si);
      if (!sItem) { break; }
      mItem = mSel[mi];

      canConnect = (sItem.get('used') < maxConn) && (mItem.get('metasignal') === '' || mItem.get('metasignal') === 'high' || mItem.get('metasignal') === sItem.get('name'));
      if (canConnect) {
        if (mItem.get('signal')) {
          // Remove old connection
          qRes = signalGrid.getStore().queryBy(function (record) { return (record.get('name') === mSel[mi].get('signal')); });
          qRes.getAt(0).set({used: qRes.getAt(0).get('used') - 1});
        }
        sItem.set({used: sItem.get('used') + 1});
        //mItem.set({signal: sItem.get('name')});
        mItem.data.signal = sItem.get('name');
        mItem.setDirty();
      }
    }
    moduleGrid.view.refresh()
    this.setButtonStatus(dir);
    this.checkChanges();
  },

  disconnectSignal: function (dir) {
    var signalGrid = (dir === 'in') ? this.V.inSignalList : this.V.outSignalList;
    var moduleGrid = (dir === 'in') ? this.V.inModuleList : this.V.outModuleList;


    var mSel = moduleGrid.getSelectionModel().getSelection();
    var mi;
    for (mi = 0; mi < mSel.length; mi++) {
      var mItem = mSel[mi];
      var canDisconnect = mItem.get('signal') !== '';
      if (canDisconnect) {
        var qRes = signalGrid.getStore().queryBy(function (record) { return (record.get('name') === mItem.get('signal')); });
        qRes.getAt(0).set({used: qRes.getAt(0).get('used') - 1});
        //mItem.set("signal", "");
        mItem.data.signal = '';
        mItem.setDirty();
      }
    }
    moduleGrid.view.refresh()
    this.setButtonStatus(dir);
    this.checkChanges();
  },

  setButtonStatus: function (dir) {
    var signalGrid = (dir === 'in') ? this.V.inSignalList : this.V.outSignalList;
    var moduleGrid = (dir === 'in') ? this.V.inModuleList : this.V.outModuleList;
    var maxConn = (dir === 'in') ? 1 : 3;
    var connBtn = (dir === 'in') ? this.V.connectInput : this.V.connectOutput;
    var discBtn = (dir === 'in') ? this.V.disconnectInput : this.V.disconnectOutput;

    var sSel = signalGrid.getSelectionModel().getSelection();
    if (sSel.length === 0) { return; }
    var mSel = moduleGrid.getSelectionModel().getSelection();
    if (mSel.length === 0) { return; }

    var canConnect = false;
    var mi;
    var si;
    var sStore = signalGrid.getStore();

    // Selection index with the applied filter
    var SSelIdx = sStore.indexOf(sStore.getById(sSel[0].getId()));
    var mItem;
    for (mi = 0, si = SSelIdx; mi < mSel.length; mi++, si++) {
      var sItem = sStore.getAt(si);
      if (!sItem) { break; }
      mItem = mSel[mi];
      if ((sItem.get('used') < maxConn) && (mItem.get('metasignal') === '' || mItem.get('metasignal') === 'high' || mItem.get('metasignal') === sItem.get('name'))) {
        canConnect = true;
        break;
      }
    }
    connBtn.setDisabled(!canConnect);

    var canDisconnect = false;
    for (mi = 0; mi < mSel.length; mi++) {
      mItem = mSel[mi];
      if (mItem.get('signal') !== '') {
        canDisconnect = true;
        break;
      }
    }
    discBtn.setDisabled(!canDisconnect);
  },

  moduleSel: function (mod, elems) {
    if (elems.length > 0) {
      this.V.btnActivate.setDisabled(elems[0].data.active);
      this.V.btnDeactivate.setDisabled(!elems[0].data.active);
    } else {
      this.V.btnActivate.setDisabled(true);
      this.V.btnDeactivate.setDisabled(true);
    }
  },

  activateModule: function () {
    var sel = this.V.moduleList.getSelectionModel().getSelection();
    if (sel.length > 0) {
      var mymodule = sel[0].get('module');
      var mact = this.V.moduleList.getEl().down(".BMS-moduleitem-" + mymodule).next();
      mact.removeCls("BMS-moduleitem-active-false");
      mact.addCls("BMS-moduleitem-active-true");
      this.changeModuleActivation(sel[0].get('module'), true);
      this.V.btnActivate.setDisabled(true);
      this.V.btnDeactivate.setDisabled(false);
    }
  },

  deactivateModule: function () {
    var sel = this.V.moduleList.getSelectionModel().getSelection();
    if (sel.length > 0) {
      var mymodule = sel[0].get('module');
      var mact = this.V.moduleList.getEl().down(".BMS-moduleitem-" + mymodule).next();
      mact.removeCls("BMS-moduleitem-active-true");
      mact.addCls("BMS-moduleitem-active-false");
      this.changeModuleActivation(sel[0].get('module'), false);
      this.V.btnActivate.setDisabled(false);
      this.V.btnDeactivate.setDisabled(true);
    }
  },

  changeModuleActivation: function (module, active) {
    var records = this.moduleStore.queryBy(function (record) {return record.get('module') === module; });
    records.each(function (record) {
      //var newSignal = record.get('hard') ? record.get('signal') : '';
      //record.set({active: active, signal: ''});
      record.data.active = active;
      record.data.signal = '';
      record.setDirty();
      //record.commit();
    });

    this.checkUsed(this.inSignalStore, this.inModuleStore);
    this.checkUsed(this.outSignalStore, this.outModuleStore);

    this.inModuleStore.load();
    this.outModuleStore.load();

    this.checkChanges();
  },

  isDirty: function () {
    return this.moduleStore.isDirty();
  },

  checkChanges: function () {
    var isDirty = this.isDirty();
    this.V.btnSave.setDisabled(!isDirty);
    this.V.btnDiscard.setDisabled(!isDirty);
  },

  save: function (button, event, eOpts) {
    var me = this;
    Ext.Msg.show({
      title: 'BMS',
      msg: TR('The saved changes will take effect after reboot!'),
      buttons: Ext.Msg.OKCANCEL,
      buttonText: {ok: TR("Save and reboot"), cancel: TR("Cancel")},
      fn: function (btn) {
        if (btn === "ok") {
            me.moduleStore.sync(eOpts);
            //var headerCtrl = APP.getController('HeaderCtrl');
            //headerCtrl.downDialog.showMe(TR('Offline'));
            me.V.btnSave.setDisabled(true);
            me.V.btnDiscard.setDisabled(true);
        }
      }
    });
  },

  reset: function () {
    var me = this;
    me.moduleStore.load(function () {
      me.inSignalStore.load(function () {
        me.inModuleStore.load(function () {
          me.checkUsed(me.inSignalStore, me.inModuleStore);
        });
      });

      me.outSignalStore.load(function () {
        me.outModuleStore.load(function () {
          me.checkUsed(me.outSignalStore, me.outModuleStore);
        });
      });

      me.moduleListStore.load();
    });
    var inModuleGrid = this.V.inModuleList;
    var outModuleGrid = this.V.outModuleList;

    inModuleGrid.getSelectionModel().deselectAll();
    outModuleGrid.getSelectionModel().deselectAll();

    this.V.connectInput.setDisabled(true);
    this.V.disconnectInput.setDisabled(true);

    this.V.connectOutput.setDisabled(true);
    this.V.disconnectOutput.setDisabled(true);

    this.V.inSignalList.getView().getSelectionModel().deselectAll();
    this.V.outSignalList.getView().getSelectionModel().deselectAll();

    this.V.btnSave.setDisabled(true);
    this.V.btnDiscard.setDisabled(true);
  },

  askclose: function (panel) {
    var me = this;
    if (!me.forceClose && me.isDirty()) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') { me.save(null, null, {callback: function () {panel.close(); }}); }
          if (btn === 'no') { me.forceClose = true; panel.close(); }
        },
        icon: Ext.Msg.QUESTION
      });
      return false;
    }
    return true;
  },

  resetToFactory: function (button, event, eOpts) {
    var me = this;
    Ext.Msg.show({
      title: 'BMS',
      msg: TR('Are you sure?<br/>All BMS configuration files will be overridden.<br/>The saved changes will take effect after reboot!'),
      buttons: Ext.Msg.OKCANCEL,
      buttonText: {ok: TR("Save"), cancel: TR("Cancel")},
      fn: function (btn) {
        if (btn === "ok") {
          Ext.Ajax.request({
            url: '/BS350/BMS/resetToFactory',
            success: function (res) {
              me.reset();
            }
          });
          me.V.btnSave.setDisabled(true);
          me.V.btnDiscard.setDisabled(true);
        }
      }
    });
  }
});

