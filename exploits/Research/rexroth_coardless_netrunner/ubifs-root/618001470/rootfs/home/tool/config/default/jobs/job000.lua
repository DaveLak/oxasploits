-- BS350 - JobCreation V02: Header --
--  jobName =  
 
c = require "constants"
f = require "runFunctions"
codes = require "scancodes"
--a = require "atoms000"
plc = require "plcsignals"
idsrc = require "idcodesources"
atoms = {}
 
atoms["step init$01A00"]={
    text ="",
    type = c.TypeTriggerOut,
    mode = c.TriggerOutModeStepInit,
    dest = 0,    --    step init
    range= 0,
    state= 0,
    valueList = {}
}

atoms["Tool disable$01A01"]={
    text ="",
    type = c.TypeTriggerOut,
    mode = c.TriggerOutModeBmsIn,
    dest = plc.In.En,    --    BMS_SE_E_EN
    range= 1,
    state= 0,
    valueList = {}
}

atoms["del OkNok-counter$01A02"]={
    text ="",
    type = c.TypeTriggerOut,
    mode = c.TriggerOutModeDelOkNok,
    dest = 0,    --    del OkNok-counter
    range= 0,
    state= 7,
    valueList = {
      Counters = {{Nr=-1, SocketTrayNr=-1, Ok=0, Nok=0}},
      Src = 5,
      EnablePrg99 = false,
      SocketTrayCoding = 4712,
      LockCtrl = false,
      CountOverAllCounters = false,
      DecrementOkCounter = false,
      BlockPrg99AfterNok = false,
      BlockPrg99AfterOk = false
    }
}

atoms["step final$01A03"]={
    text ="",
    type = c.TypeTriggerOut,
    mode = c.TriggerOutModeStepFinal,
    dest = 0,    --    step final
    range= 0,
    state= 0,
    valueList = {}
}

atoms["step init$02A00"]={
    text ="",
    type = c.TypeTriggerOut,
    mode = c.TriggerOutModeStepInit,
    dest = 0,    --    step init
    range= 0,
    state= 0,
    valueList = {}
}

atoms["set OkNok-counter$02A01"]={
    text ="",
    type = c.TypeTriggerOut,
    mode = c.TriggerOutModeSetOkNok,
    dest = 0,    --    set OkNok-counter
    range= 0,
    state= 7,
    valueList = {
      Counters = {{Nr=0, SocketTrayNr=-1, Ok=1, Nok=0}},
      Src = 5,
      EnablePrg99 = false,
      SocketTrayCoding = 4712,
      LockCtrl = true,
      CountOverAllCounters = false,
      DecrementOkCounter = false,
      BlockPrg99AfterNok = false,
      BlockPrg99AfterOk = false
    }
}

atoms["Tool enable$02A02"]={
    text ="",
    type = c.TypeTriggerOut,
    mode = c.TriggerOutModeBmsIn,
    dest = plc.In.En,    --    BMS_SE_E_EN
    range= 1,
    state= 1,
    valueList = {}
}

atoms["Tool enable$02A02UNDO"]={
    text ="",
    type = c.TypeTriggerOut,
    mode = c.TriggerOutModeBmsIn,
    dest = plc.In.En,    --    BMS_SE_E_EN
    range= 1,
    state= 0,
    valueList = {}
}

atoms["Wait for cycle complete$02A03"]={
    text ="",
    type = c.TypeTriggerIn,
    mode = c.TriggerInModeCyCmpInternal,
    dest = plc.Out.CyCmp,    --    bms_cycmp
    range= 0,
    state= 1,
    valueList = {}
}

atoms["OkNokResultTimeout$02A04"]={
    text ="",
    timeout= 600,
    type = c.TypeTriggerIn,
    mode = c.TriggerInModeTimeoutAtom,
    dest = 0,    --    
    range= 1,
    state= c.TriggerInModeOkNokResult,
}

atoms["Text on screen$02A05"]={
    text ="",
    type = c.TypeTriggerIn,
    mode = c.TriggerInModeOkNokResult,
    dest = 0,    --    wait for OkNok-counter results
    range= 0,
    state= 0,
    valueList = {}
}

atoms["TriggerInGrpOkNokResult$02A06"]={
    type = c.TypeTriggerInGrp,
    members = {"Text on screen$02A05", "OkNokResultTimeout$02A04"}
}

atoms["DisplayMsgTimeDelay$02A07"]={
    text ="",
    type = c.TypeTriggerOut,
    mode = c.TriggerOutModeTimeDelay,
    dest = 1000,    --    
    range= 0,
    state= 3,
    valueList = {

    }
}

atoms["DisplayPrgStepTimeDelay$02A08"]={
    text ="timeout",
    type = c.TypeTriggerIn,
    mode = c.TriggerInModeTimeDelay,
    dest = 0,    --    
    range= 0,
    state= 0,
    valueList = {

    }
}

atoms["Tool disable$02A09"]={
    text ="",
    type = c.TypeTriggerOut,
    mode = c.TriggerOutModeBmsIn,
    dest = plc.In.En,    --    BMS_SE_E_EN
    range= 1,
    state= 0,
    valueList = {}
}

atoms["del OkNok-counter$02A10"]={
    text ="",
    type = c.TypeTriggerOut,
    mode = c.TriggerOutModeDelOkNok,
    dest = 0,    --    del OkNok-counter
    range= 0,
    state= 7,
    valueList = {
      Counters = {{Nr=0, SocketTrayNr=-1, Ok=0, Nok=0}},
      Src = 5,
      EnablePrg99 = false,
      SocketTrayCoding = 4712,
      LockCtrl = false,
      CountOverAllCounters = false,
      DecrementOkCounter = false,
      BlockPrg99AfterNok = false,
      BlockPrg99AfterOk = false
    }
}

atoms["del OkNok-counter$02A10UNDO"]={
    text ="",
    type = c.TypeTriggerOut,
    mode = c.TriggerOutModeDelOkNok,
    dest = 0,    --    del OkNok-counter
    range= 0,
    state= 7,
    valueList = {
      Counters = {{Nr=0, SocketTrayNr=-1, Ok=0, Nok=0}},
      Src = 5,
      EnablePrg99 = false,
      SocketTrayCoding = 4712,
      LockCtrl = false,
      CountOverAllCounters = false,
      DecrementOkCounter = false,
      BlockPrg99AfterNok = false,
      BlockPrg99AfterOk = false
    }
}

atoms["step final$02A11"]={
    text ="",
    type = c.TypeTriggerOut,
    mode = c.TriggerOutModeStepFinal,
    dest = 0,    --    step final
    range= 0,
    state= 0,
    valueList = {}
}

atoms["step init$03A00"]={
    text ="",
    type = c.TypeTriggerOut,
    mode = c.TriggerOutModeStepInit,
    dest = 0,    --    step init
    range= 0,
    state= 0,
    valueList = {}
}

atoms["Tool disable$03A01"]={
    text ="",
    type = c.TypeTriggerOut,
    mode = c.TriggerOutModeBmsIn,
    dest = plc.In.En,    --    BMS_SE_E_EN
    range= 1,
    state= 0,
    valueList = {}
}

atoms["step final$03A02"]={
    text ="",
    type = c.TypeTriggerOut,
    mode = c.TriggerOutModeStepFinal,
    dest = 0,    --    step final
    range= 0,
    state= 0,
    valueList = {}
}

atoms["DoNokResult$03A03"]={
    text ="",
    type = c.TypeTriggerOut,
    mode = c.TriggerOutModeJobResult,
    dest = 0,    --    
    range= 0,
    state= 0,
    valueList = {

    }
}

mode = mode or "job"
mid= mid or 0
if( mode == "job" ) then
	f.publishAtoms(atoms,function (a) cpp.job:addAtom(a) end)
else
	f.publishAtoms(atoms,function (a) print(a) end)
end
 
---------- Job Step Start -------------------------
local initNode = {
    name = "initNode",
    type = c.TypeStartNode,
    timeout = 300.0,
    selectsCw = 0,
    selectsEn = 0,
    displayJobSteps = 1,
    displayTime = 1,
    clearIDCode = 0,
    jobName = '',
    jobComment = '',
    jobUser = 'Bosch',
    jobDate = 946848445,
}
f.setInitNode(initNode)
 
local config = {
    stopOnNok = false,
    stopOnTimeout = false
}
f.setConfiguration(config)
 
-- BS350 Nodes List

nodes = {}

nodes["Start$01A00"] = {}
nodes["Start$01A01"] = {}
nodes["Start$01A02"] = {}
nodes["Start$01A03"] = {}
nodes["Single Program$02A00"] = {}
nodes["Single Program$02A01"] = {}
nodes["Single Program$02A02"] = {}
nodes["Single Program$02A03"] = {}
nodes["Single Program$02A04"] = {}
nodes["Single Program$02A05"] = {}
nodes["Single Program$02A06"] = {}
nodes["Single Program$02A07"] = {}
nodes["Single Program$02A08"] = {}
nodes["Single Program$02A09"] = {}
nodes["Single Program$02A10"] = {}
nodes["Single Program$02A11"] = {}
nodes["End$03A00"] = {}
nodes["End$03A01"] = {}
nodes["End$03A02"] = {}
nodes["End$03A03"] = {}
nodes["Start$01A00"].atom = atoms["step init$01A00"]
nodes["Start$01A00"].successor = {{var = "dummy", val = nil, next = nodes["Start$01A01"]}}
nodes["Start$01A00"].step = { row = 1, column = 1, name = "Start", display_name = "Start", io_next = 2, nio_next = 0, comment = "" }

nodes["Start$01A01"].atom = atoms["Tool disable$01A01"]
nodes["Start$01A01"].successor = {{var = "dummy", val = nil, next = nodes["Start$01A02"]}}
nodes["Start$01A01"].step = { row = 1, column = 1, name = "Start", display_name = "Start", io_next = 2, nio_next = 0, comment = "" }

nodes["Start$01A02"].atom = atoms["del OkNok-counter$01A02"]
nodes["Start$01A02"].successor = {{var = "dummy", val = nil, next = nodes["Start$01A03"]}}
nodes["Start$01A02"].step = { row = 1, column = 1, name = "Start", display_name = "Start", io_next = 2, nio_next = 0, comment = "" }

nodes["Start$01A03"].atom = atoms["step final$01A03"]
nodes["Start$01A03"].successor = {{var = "dummy", val = nil, next = nodes["Single Program$02A00"]}}
nodes["Start$01A03"].step = { row = 1, column = 1, name = "Start", display_name = "Start", io_next = 2, nio_next = 0, comment = "" }

nodes["Single Program$02A00"].atom = atoms["step init$02A00"]
nodes["Single Program$02A00"].successor = {{var = "dummy", val = nil, next = nodes["Single Program$02A01"]}}
nodes["Single Program$02A00"].step = { row = 2, column = 1, name = "Single Program", display_name = "Single Program", io_next = 3, nio_next = 3, comment = "" }

nodes["Single Program$02A01"].atom = atoms["set OkNok-counter$02A01"]
nodes["Single Program$02A01"].successor = {{var = "dummy", val = nil, next = nodes["Single Program$02A02"]}}
nodes["Single Program$02A01"].step = { row = 2, column = 1, name = "Single Program", display_name = "Single Program", io_next = 3, nio_next = 3, comment = "" }

nodes["Single Program$02A02"].atom = atoms["Tool enable$02A02"]
nodes["Single Program$02A02"].successor = {{var = "dummy", val = nil, next = nodes["Single Program$02A03"]}}
nodes["Single Program$02A02"].step = { row = 2, column = 1, name = "Single Program", display_name = "Single Program", io_next = 3, nio_next = 3, comment = "" }

nodes["Single Program$02A03"].atom = atoms["Wait for cycle complete$02A03"]
nodes["Single Program$02A03"].successor = {{var = "dummy", val = nil, next = nodes["Single Program$02A06"]}}
nodes["Single Program$02A03"].step = { row = 2, column = 1, name = "Single Program", display_name = "Single Program", io_next = 3, nio_next = 3, comment = "" }

nodes["Single Program$02A04"].atom = atoms["OkNokResultTimeout$02A04"]
nodes["Single Program$02A04"].successor = {{var = "dummy", val = nil, next = nodes["Single Program$02A05"]}}
nodes["Single Program$02A04"].step = { row = 2, column = 1, name = "Single Program", display_name = "Single Program", io_next = 3, nio_next = 3, comment = "" }

nodes["Single Program$02A05"].atom = atoms["Text on screen$02A05"]
nodes["Single Program$02A05"].successor = {{var = "dummy", val = nil, next = nodes["Single Program$02A06"]}}
nodes["Single Program$02A05"].step = { row = 2, column = 1, name = "Single Program", display_name = "Single Program", io_next = 3, nio_next = 3, comment = "" }

nodes["Single Program$02A06"].atom = atoms["TriggerInGrpOkNokResult$02A06"]
nodes["Single Program$02A06"].successor = {{ var = "timeout", val = 1, next = nodes["Single Program$02A07"]},
                                                {var = "dummy", val = nil, next = nodes["Single Program$02A09"]}}
nodes["Single Program$02A06"].step = { row = 2, column = 1, name = "Single Program", display_name = "Single Program", io_next = 3, nio_next = 3, comment = "" }

nodes["Single Program$02A07"].atom = atoms["DisplayMsgTimeDelay$02A07"]
nodes["Single Program$02A07"].successor = {{var = "dummy", val = nil, next = nodes["Single Program$02A08"]}}
nodes["Single Program$02A07"].step = { row = 2, column = 1, name = "Single Program", display_name = "Single Program", io_next = 3, nio_next = 3, comment = "" }

nodes["Single Program$02A08"].atom = atoms["DisplayPrgStepTimeDelay$02A08"]
nodes["Single Program$02A08"].successor = {{var = "dummy", val = nil, next = nodes["Single Program$02A09"]}}
nodes["Single Program$02A08"].step = { row = 2, column = 1, name = "Single Program", display_name = "Single Program", io_next = 3, nio_next = 3, comment = "" }

nodes["Single Program$02A09"].atom = atoms["Tool disable$02A09"]
nodes["Single Program$02A09"].successor = {{var = "dummy", val = nil, next = nodes["Single Program$02A10"]}}
nodes["Single Program$02A09"].step = { row = 2, column = 1, name = "Single Program", display_name = "Single Program", io_next = 3, nio_next = 3, comment = "" }

nodes["Single Program$02A10"].atom = atoms["del OkNok-counter$02A10"]
nodes["Single Program$02A10"].successor = {{var = "dummy", val = nil, next = nodes["Single Program$02A11"]}}
nodes["Single Program$02A10"].step = { row = 2, column = 1, name = "Single Program", display_name = "Single Program", io_next = 3, nio_next = 3, comment = "" }

nodes["Single Program$02A11"].atom = atoms["step final$02A11"]
nodes["Single Program$02A11"].successor = {{var = "dummy", val = nil, next = nodes["End$03A00"]}}
nodes["Single Program$02A11"].step = { row = 2, column = 1, name = "Single Program", display_name = "Single Program", io_next = 3, nio_next = 3, comment = "" }

nodes["End$03A00"].atom = atoms["step init$03A00"]
nodes["End$03A00"].successor = {{var = "dummy", val = nil, next = nodes["End$03A01"]}}
nodes["End$03A00"].step = { row = 3, column = 1, name = "End", display_name = "End", io_next = 0, nio_next = 0, comment = "" }

nodes["End$03A01"].atom = atoms["Tool disable$03A01"]
nodes["End$03A01"].successor = {{var = "dummy", val = nil, next = nodes["End$03A02"]}}
nodes["End$03A01"].step = { row = 3, column = 1, name = "End", display_name = "End", io_next = 0, nio_next = 0, comment = "" }

nodes["End$03A02"].atom = atoms["step final$03A02"]
nodes["End$03A02"].successor = {{var = "dummy", val = nil, next = f.EndNode}}
nodes["End$03A02"].step = { row = 3, column = 1, name = "End", display_name = "End", io_next = 0, nio_next = 0, comment = "" }

nodes["End$03A03"].atom = atoms["DoNokResult$03A03"]
nodes["End$03A03"].successor = {{var = "dummy", val = nil, next = f.EndNode}}
nodes["End$03A03"].step = { row = 3, column = 1, name = "End", display_name = "End", io_next = 0, nio_next = 0, comment = "" }

 
 
-- BS350 - JobCreation V02: Tail --
f.checkPlausib(nodes)
if( mode == "job" ) then
	f.go(nodes["Start$01A00"])
else
	-- mode: op
	-- mid: xxx
	x=f.goOP(nodes["Start$01A00"], mid, 0)
	--print(x)
	return x
end
f.cleanUpNodes(atoms, nodes)
--package.loaded["atoms000"]=nil
 