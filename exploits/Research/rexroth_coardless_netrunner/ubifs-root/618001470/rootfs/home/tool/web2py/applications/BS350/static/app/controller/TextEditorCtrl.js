/*global Ext: false, TR: false, window: false */
Ext.define('BS350.controller.TextEditorCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['TextEditorView', 'FSTreeView', 'TextEditorArea'],
  stores : [ 'FSTreeStore' ],

  items: [
    {name: 'fsTreeView', query: '#fsTreeView', actions: { itemdblclick : 'openFile' }},
    {name: 'txtEditorPanel', query: '#txtEditorPanel'},

    { name: 'editSelToolbar', query: '#editSelToolbar' },
    {name: 'rootBtn_r', query: '#rootBtn_r', actions: { click : 'setRoot' }},
    {name: 'rootBtn_h', query: '#rootBtn_h', actions: { click : 'setRoot' }},
    {name: 'rootBtn_cfg', query: '#rootBtn_cfg', actions: { click : 'setRoot' }},
    {name: 'rootBtn_sel', query: '#rootBtn_sel', actions: { click : 'setRoot' }},

    {name: 'editBtn', query: '#editBtn'},
    {name: 'editBtn_newfile', query: '#editBtn_newfile', actions: { click : 'newFile' }},
    {name: 'editBtn_newdir', query: '#editBtn_newdir', actions: { click : 'newDir' }},
    {name: 'editBtn_remove', query: '#editBtn_remove', actions: { click : 'removeEl' }},
    {name: 'editBtn_rename', query: '#editBtn_rename', actions: { click : 'renameEl' }},
    {name: 'editBtn_upload', query: '#editBtn_upload', actions: { click : 'uploadFile' }},
    {name: 'editBtn_download', query: '#editBtn_download', actions: { click : 'downloadFile' }},

    { name: 'saveToolbar', query: '#saveToolbar' },
    {name: 'SaveFileBtn', query: '#SaveFileBtn', actions: { click : 'saveScript' }}
  ],

  initView: function () {
    // Set root directory
    this.V.fsTreeView.store.setRootNode({text: 'home', id: '/home/tool', expanded: true});

    if (this.access !== 'w') {
      this.V.editBtn.hide();
      this.V.saveToolbar.hide();
    }
  },

  openFile : function (treePanel, record, item, index, event, eOpts) {
    var me = this;

    if (!record.get('leaf')) { return; }

    var path = record.get('id');
    var filename = record.get('text');


    // Check if a editor for the script is already opened
    var opened = me.V.txtEditorPanel.items.filterBy(function (value) { return value.path === path; });

    if (opened.getCount() === 0) {
      // Retrieve script content
      Ext.Ajax.request({
        url : '/BS350/fs/getTXT',
        params : { f : path },
        success : function (response, options) {
          var editorArea = Ext.create('BS350.view.TextEditorArea', { filename : filename, path : path });
          if (me.access !== 'w') {
            Ext.each(Ext.ComponentQuery.query('textarea', editorArea), function (e) { e.setReadOnly(true); });
          }
          editorArea.setText(response.responseText);
          editorArea.resetDirty();

          me.V.txtEditorPanel.add(editorArea);
          me.V.txtEditorPanel.setActiveTab(me.V.txtEditorPanel.items.last());
          editorArea.tab.addListener('beforeclose', me.beforeRemoveTab, me);
          editorArea.ctrl = me;
        },
        failure: function (response, options) {
          var msg = response.responseText.substr(0, response.responseText.lastIndexOf('<!-- xxx'));
          Ext.Msg.show({title: TR('Open'), msg: TR(msg), buttons: Ext.Msg.OK, icon: Ext.Msg.ERROR});
        }
      });
    } else {
      // Select already opened editor
      me.V.txtEditorPanel.setActiveTab(opened.getAt(0));
    }
  },

  // Function called before closing an editor
  beforeRemoveTab: function (tab) {
    var me = this;
    var panel = tab.card;
    var txtArea = panel.items.first();

    // Open a dialog if the file was changed
    if (panel.isDirty()) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Tab with unsaved data will be closed. Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') { me.saveScript(panel); }
          if (btn === 'no') { panel.close(); }
        },
        icon: Ext.Msg.QUESTION,
        animateTarget: txtArea
      });

      // Returns always false because the message window does not block the program flow
      return false;
    }

    return true;
  },

  // Upload new version of the file to the server
  saveScript : function (param) {
    var panel = this.V.txtEditorPanel;
    var tab = panel.getActiveTab();
    if (!tab) { return; }

    var txtArea = tab.items.first();

    Ext.Ajax.request({
      url: '/BS350/fs/saveTXT',
      params: { f: tab.path },

      jsonData: txtArea.getRawValue(),

      success: function (response, options) {
        tab.resetDirty();

        if (param.isXType('texteditorarea')) { param.close(); } else { tab.setTitle(tab.filename); }
      },
      failure: function (response, options) {
        var msg = response.responseText.substr(0, response.responseText.lastIndexOf('<!-- xxx'));
        Ext.Msg.show({title: TR('Save'), msg: TR(msg), buttons: Ext.Msg.OK, icon: Ext.Msg.ERROR});
      }
    });
  },

  setRoot : function (btn) {
    var treeView = this.V.fsTreeView;
    if (btn.rootFS) {
      treeView.store.setRootNode({text: btn.text, id: btn.rootFS, expanded: true});
    } else {
      var node = this.getSelectedDir();
      treeView.store.setRootNode({text: node.get('text'), id: node.get('id'), expanded: true});
    }
  },

  newFile : function (btn) {
    var me = this;
    var panel = this.V.fsTreeView;
    var store = panel.store;

    Ext.Msg.prompt(TR('New file'), TR('Filename') + ':', function (btn, text) {
      if (btn === 'ok') {
        var node = me.getSelectedDir();
        var path = node.get('id') + '/' + text;
        //konsole.log("New file:"+path);
        Ext.Ajax.request({
          url: '/BS350/fs/newFile',
          params: {
            f: path
          },
          success: function (response, options) {
            store.load({
              node: node,
              callback: function (records, operation, success) {
                var node = store.getNodeById(path);
                me.openFile(panel, node);
              }
            });
          },
          failure: function (response, options) {
            var msg = response.responseText.substr(0, response.responseText.lastIndexOf('<!-- xxx'));
            Ext.Msg.show({title: TR('Create'), msg: TR(msg), buttons: Ext.Msg.OK, icon: Ext.Msg.ERROR});
          }

        });
      }
    });
  },

  newDir : function (btn) {
    var me = this;
    var panel = this.V.fsTreeView;
    var store = panel.store;

    Ext.Msg.prompt(TR('New directory'), TR('Directory name') + ':', function (btn, text) {
      if (btn === 'ok') {
        var node = me.getSelectedDir();
        var path = node.get('id') + '/' + text;
        Ext.Ajax.request({
          url: '/BS350/fs/newDir',
          params: {
            f: path
          },
          success: function (response, options) {
            store.load({
              node: node,
              callback: function (records, operation, success) {
                var node = store.getNodeById(path);
                me.openFile(panel, node);
              }
            });
          },
          failure: function (response, options) {
            var msg = response.responseText.substr(0, response.responseText.lastIndexOf('<!-- xxx'));
            Ext.Msg.show({title: TR('Create'), msg: TR(msg), buttons: Ext.Msg.OK, icon: Ext.Msg.ERROR});
          }

        });
      }
    });
  },

  removeEl : function (btn) {
    var me = this;
    var panel = this.V.fsTreeView;
    var store = panel.store;

    var nodes = panel.getSelectionModel().getSelection();
    if (nodes.length === 0) { return; }
    var node = nodes[0];
    var path = node.get('id');
    var parentNode = store.getNodeById(node.get('parentId'));


    Ext.Msg.show({
      title: TR('Remove'),
      msg : TR('Are you sure you want to remove this item?') + '<br>' + path,
      buttons : Ext.Msg.OKCANCEL,
      icon : Ext.Msg.QUESTION,
      fn: function (buttonId) {
        if (buttonId === 'ok') {
          //konsole.log("remove:"+path);
          Ext.Ajax.request({
            url: '/BS350/fs/remove',
            params: {
              f: path
            },
            success: function (response, options) {
              store.load({
                node: parentNode
                //callback: function (records, operation, success) {
                //TODO: Close Tab
                //}
              });
            },
            failure: function (response, options) {
              var msg = response.responseText.substr(0, response.responseText.lastIndexOf('<!-- xxx'));
              Ext.Msg.show({title: TR('Remove'), msg: TR(msg), buttons: Ext.Msg.OK, icon: Ext.Msg.ERROR});
            }
          });
        }
      }
    });
  },

  renameEl : function (btn) {
    var me = this;
    var panel = this.V.fsTreeView;
    var store = panel.store;

    var nodes = panel.getSelectionModel().getSelection();
    if (nodes.length === 0) { return; }
    var node = nodes[0];

    var parentNode = store.getNodeById(node.get('parentId'));
    if (!parentNode) { return; }

    Ext.Msg.prompt(TR('Rename'), TR('New name') + ':', function (btn, text) {
      if (btn === 'ok') {
        var newname = parentNode.get('id') + '/' + text;
        Ext.Ajax.request({
          url: '/BS350/fs/rename',
          params: {
            fo: node.get('id'),
            fn: newname
          },
          success: function (response, options) {
            store.load({
              node: parentNode
              // TODO: Rename tab
              //callback: function (records, operation, success) {
              //  var node = store.getNodeById(path);
              //  me.openFile(panel, node);
              //}
            });
          },
          failure: function (response, options) {
            var msg = response.responseText.substr(0, response.responseText.lastIndexOf('<!-- xxx'));
            Ext.Msg.show({title: TR('Rename'), msg: TR(msg), buttons: Ext.Msg.OK, icon: Ext.Msg.ERROR});
          }

        });
      }
    }, me, false, node.get('text'));
  },

  uploadFile : function () {
    var uploadDialog = Ext.create('BS350.view.UploadWindow', {finishCall: this.updateDir, ctrl: this});
    var form = uploadDialog.getComponent('uploadForm').getForm();

    var node = this.getSelectedDir();
    form.setValues({trgtPath: node.get('id')});
    uploadDialog.show();
  },

  downloadFile : function () {
    var treeView = this.V.fsTreeView;
    var nodes = treeView.getSelectionModel().getSelection();
    var ii;
    for (ii = 0; ii < nodes.length; ii++) {
      var node = nodes[ii].data;
      if (node.leaf) {
        window.location.href = 'BS350/fs/download?f=' + node.id.replace(/\//g, '%2F');
      }
    }
  },

  updateDir : function (win, dir) {
    var store = win.ctrl.V.fsTreeView.store;
    var node = store.getNodeById(dir);
    store.load({ node: node });
    win.close();
  },

  getSelectedDir : function () {
    var treeView = this.V.fsTreeView;
    var node = treeView.store.getRootNode();
    var nodes = treeView.getSelectionModel().getSelection();
    if (nodes.length > 0) {
      node = nodes[0];
      if (node.get('leaf')) {
        node = treeView.store.getNodeById(node.data.parentId);
      }
    }
    return node;
  },

  askclose: function (panel) {
    var me = this;
    toClose = [];
    this.V.txtEditorPanel.items.each(function (item) {
      if (item.isDirty()) {
        toClose.push(item);
      }
    });

    if (toClose.length > 0) {
      me.closeAll(toClose, panel);
      return false;
    }
    return true;
  },

  closeAll: function (toClose, panel) {
    var me = this;
    if (toClose.length > 0) {
      var item = toClose.pop();
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Tab with unsaved data will be closed. Do you want to save the changes?') + ' (' + item.filename + ')',
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') {
            Ext.Ajax.request({
              url: '/BS350/fs/saveTXT',
              params: { f: item.path },
              jsonData: item.textarea.getRawValue(),
              success: function (response, options) { item.close(); me.closeAll(toClose, panel); },
              failure: function (response, options) {
                var msg = response.responseText.substr(0, response.responseText.lastIndexOf('<!-- xxx'));
                Ext.Msg.show({title: TR('Save'), msg: TR(msg), buttons: Ext.Msg.OK, icon: Ext.Msg.ERROR});
              }
            });
          }
          if (btn === 'no') { item.close(); me.closeAll(toClose, panel); }
        },
        icon: Ext.Msg.QUESTION
      });
    } else {
      panel.close();
    }
  }
});
