/*global Ext: false, TR: false, window: false, BS350: false */
Ext.define('BS350.controller.PermissionsCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['PermissionsView', 'BS350.custom.ToggleColumn'],
  stores: ['PermissionStore'],

  items: [
    { name: 'grid', query: '#permissionGrid'},
    { name: 'saveBtn', query: '#btnSave', actions: {click: 'save'}},
    { name: 'discardBtn', query: '#btnDiscard', actions: {click: 'discard'} },
    { name: 'permissionsview', query: '#permissionsview' }
  ],

  forceClose: false,

  init: function (application) {
  },

  initView: function () {
    this.forceClose = false;
    this.store = this.V.grid.getStore();
    this.loadTable();

    var editPlugin = this.V.grid.plugins[0];

    if (this.access !== 'w') {
      this.view.getDockedItems()[0].hide();
      editPlugin.on('beforeedit', function (e) { return false; } );
    }
    else {
      editPlugin.on('beforeedit', this.isOperationAllowed, this );
      editPlugin.on('edit', this.checkChanges, this );
    }
  },

  loadTable: function () {
    var me = this;
    me.groupsWithCurrentUser = [];
    Ext.Ajax.request(
      {
        url: '/BS350/accounts/getgroups',
        success: function (res) {
          var groups = Ext.JSON.decode(res.responseText);
          var fields = [];
          Ext.each(groups, function (group) {
            fields.push("" + group.id);
          });

          var origStore = me.store;

          var fieldsMixedCollection = new Ext.util.MixedCollection(false, function (field) { return field.name; });
          fieldsMixedCollection.add(new Ext.data.Field('id'));
          fieldsMixedCollection.add(new Ext.data.Field('name'));
          var i;
          var ln;
          for (i = 0, ln = fields.length; i < ln; ++i) {
            fieldsMixedCollection.add(new Ext.data.Field({name: fields[i], defaultValue: ''}));
          }
          origStore.model.prototype.fields = fieldsMixedCollection;
          origStore.proxy.reader.buildExtractors(true);
          origStore.load();

          var columns = [ { text: TR('Permission'), sortable: true, hideable: false, dataIndex: 'name', width: 250 } ];
          Ext.each(groups, function (group) {
            columns.push({
              xtype: 'togglecolumn',
              values: ['', 'r', 'w'], valuesCls: ['', 'ico24-read-permission', 'ico24-editor'],
              text: group.name, dataIndex: '' + group.id,
              sortable: false, hideable: false,
              renderer: function(value, meta, record, rowIndex, colIndex, store, view) {
                var col = this.headerCt.getGridColumns()[colIndex];  //this.columns[colIndex];   // WAS USED IN EXTJS << 4.2
                if (!me.isOperationAllowed(null, {record: record, field: col.dataIndex, originalValue: value})) {
                  meta.extraAtt = 'data-qtip="' + TR('Removing your own Permission access is not allowed') + '"';
                  meta.extraAtt += ' style="background-image: url(' + BS350.custom.Utils.addMediaVersion('/static/images/24px/editor_gray.png') + ')"';
                }
                else{
                  meta.extraAtt = "";
                }
                return col.defaultRenderer(value, meta, record);
              }
            });
            if (group.hasAccountPerm) {
              me.groupsWithCurrentUser.push(group.id);
            }

          });
          columns.push({ flex: 0.5, menuDisabled: true });
          me.V.grid.reconfigure(null, columns);

          me.V.saveBtn.setDisabled(true);
          me.V.discardBtn.setDisabled(true);
        }
      }
    );
  },

  save: function () {
    var me = this;
    Ext.Msg.confirm(TR("Warning"), TR("Do you want to proceed? On save all tabs are closed and unsaved changes in any of them will be discarded."), function (arg) {
      if (arg === "yes") {
        me.store.sync({
          callback: function () {
            window.location.href = "/index?cb=" + new Date().getTime();
          }
        });
        me.V.saveBtn.setDisabled(true);
        me.V.discardBtn.setDisabled(true);
      }
    });
  },

  discard: function () {
    this.store.load();
    this.V.saveBtn.setDisabled(true);
    this.V.discardBtn.setDisabled(true);
  },

  checkChanges: function () {
    var isDirty = this.store.isDirty();
    this.V.saveBtn.setDisabled(!isDirty);
    this.V.discardBtn.setDisabled(!isDirty);
  },

  askclose: function (panel) {
    var me = this;
    if ((me.store.isDirty()) && !me.forceClose) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') {me.forceClose = true; me.store.sync({callback: function () {panel.close(); }}); }
          if (btn === 'no') { me.forceClose = true; panel.close(); }
        },
        icon: Ext.Msg.QUESTION
      });
      return false;
    }
    return true;
  },

  isOperationAllowed: function (editor, e) {
    // The user can not removes its "Permission view" write permission
    var groupId = parseInt(e.field, 10);
    if (e.record.get('id') === 12 && Ext.Array.indexOf(this.groupsWithCurrentUser, groupId) !== -1) {
      var i, allowed = false;
      for (i in this.groupsWithCurrentUser) {
        allowed = allowed || (this.groupsWithCurrentUser[i] === groupId ? e.originalValue!=='w' : e.record.get(this.groupsWithCurrentUser[i])) === 'w';
      }
      return allowed;
    }
    return true;
  },

  activated: function () {
    //this.loadTable();
  }

});

