/*global document: false, Ext: false, TR_DATA: true, TR: true, APP: true, PERMDATA: false, window: false, BS350: false  */

Ext.Loader.setConfig({enabled: true, paths: {
  'BS350': '../../static/app'
  // 'Ext.ux': '../../static/ext-4.2/ux'

} });

Ext.require('BS350.store.JobTreeStore');
Ext.require('BS350.store.PrgTreeStore');
Ext.require('BS350.store.ResTreeStore');

if (typeof TR_DATA === "undefined") {
    TR_DATA = {};
  }

if (typeof TR === "undefined") {
  TR = function (text) {
    var ret = TR_DATA[text];
    if (typeof ret === "undefined") {
      return text;
    }
    return ret;
  };
}

// Ext.require('Ext.ux.grid.FiltersFeature');
Ext.require("BS350.custom.Torque");
Ext.require('BS350.custom.ViewController');
Ext.require('BS350.custom.ResStorageDialog');
Ext.require('BS350.custom.ResParamsDialog');
Ext.require("BS350.custom.ResStorageAddEditUserDefinedDialog");
Ext.require("BS350.custom.ResParamsAddEditUserDefinedDialog");
Ext.require('BS350.store.MasterJobTreeStore');
Ext.require("BS350.custom.TreePanelEditors");
Ext.require("BS350.custom.PCons");
Ext.require('BS350.store.QCodeTreeStore');
/*REQUIRED FILES ONLY IN APP.JS! NEVER IN VIEW*/
//Ext.require("BS350.custom.Torque");
Ext.require('BS350.custom.Utils');
Ext.require("BS350.custom.ResUtil");
Ext.require("BS350.custom.TreePanelRenderers");
Ext.require('BS350.store.PrgDirContentJsonReader');
Ext.require('BS350.model.FileSelModel');
Ext.require('BS350.custom.Analysis');
Ext.require('BS350.custom.GridAutoWidths');
Ext.require('BS350.custom.NumberFieldUnit');
Ext.require('BS350.custom.TwoDigitNumberField');
Ext.require('BS350.custom.StoreProxy');
Ext.require('BS350.store.PrgDirContentStore');
Ext.require('BS350.store.JobDirContentStore');
Ext.require('BS350.store.ImpPrgNamesStore');
Ext.require('BS350.view.ExpDirectPrgView');
Ext.require('BS350.view.ExpImpDirectPrgView');
Ext.require('BS350.view.ExpImpPrgView');
Ext.require('BS350.view.ExpImpJobView');
Ext.require('BS350.view.ExpPrgView');
Ext.require('BS350.view.ExportLogsView');
Ext.require('BS350.view.ImpPrgView');
Ext.require('BS350.view.ImpJobView');
Ext.require('BS350.view.ExpJobView');
Ext.require('BS350.controller.ImpDirectJobCtrl');
Ext.require('BS350.controller.ExpDirectJobCtrl');
Ext.require('BS350.controller.JobStepCtrl');
Ext.require('BS350.controller.ExpImpJobCtrl');
Ext.require('BS350.controller.ExpImpPrgDirectCtrl');
Ext.require('BS350.controller.ExpDirectPrgCtrl');
Ext.require('BS350.controller.ExportLogsCtrl');
Ext.require('BS350.controller.ExpImpPrgCtrl');
Ext.require('BS350.controller.PrgStepCtrl');
Ext.require('BS350.controller.QCodeEditorCtrl');
Ext.require('BS350.controller.ImpDirectPrgCtrl');
Ext.require('BS350.store.ScanStore');
Ext.require('BS350.controller.MasterJobStepCtrl');
Ext.require('BS350.store.MasterJobGridStore');
Ext.require('BS350.store.JobGridStore');
Ext.require('BS350.store.SignalingStore');
Ext.require('BS350.store.PrgGridStore');
Ext.require('BS350.store.VwXmlStore');
Ext.require('BS350.controller.Prg2StepCtrl');
Ext.require('BS350.custom.Validator');
Ext.require('BS350.controller.DiagnosisNetworkPingCtrl');
Ext.require('BS350.controller.DiagnosisNetworkTcpdumpCtrl');
Ext.require('BS350.controller.DiagnosisNetworkFindClientsCtrl');
Ext.require('BS350.controller.HardwareCtrl');
Ext.require('BS350.controller.TypePlateCtrl');
Ext.require('BS350.controller.UpdateCtrl');
Ext.require('BS350.view.HardwareView');
Ext.require('BS350.view.TypePlateView');
Ext.require('BS350.view.UpdateView');

// CR18167 tooltips in zoomed view are cutted
if (Ext.isIE) {
  Ext.override(Ext.tip.QuickTip, {
    helperElId: 'ext-quicktips-tip-helper',
    initComponent: function () {
      var me = this;
      me.target = me.target || Ext.getDoc();
      me.targets = me.targets || {};
      me.callParent();
      // new stuff
      me.on('move', function () {
        var offset = me.hasCls('x-tip-form-invalid') ? 35 : 12,
            helperEl = Ext.fly(me.helperElId) || Ext.fly(
                    Ext.DomHelper.createDom({
                      tag: 'div',
                      id: me.helperElId,
                      style: {
                        position: 'absolute',
                        left: '-1000px',
                        top: '-1000px',
                        'font-size': '12px',
                        'font-family': 'tahoma, arial, verdana, sans-serif'
                      }
                    }, Ext.getBody())
                );
        if (me.html && (me.html !== helperEl.getHTML() || me.getWidth() !== (helperEl.dom.clientWidth + offset))) {
          helperEl.update(me.html);
          me.setWidth(Ext.Number.constrain(helperEl.dom.clientWidth + offset, me.minWidth, me.maxWidth));
        }
      }, this);
    }
  });
}

var ctrl;

var globControllers = ['HeaderCtrl', 'NavigationCtrl'];
for (ctrl in PERMDATA) {
  if (PERMDATA.hasOwnProperty(ctrl)) {
    globControllers.push(ctrl);
  }
}
var APP;
Ext.onReady(function () {
  var utils = Ext.create('BS350.custom.Utils');
  Ext.getClass(utils).initEnv();
  Ext.application({
    name: 'BS350',
    appFolder: '../../static/app',
    autoCreateViewport: false,
    nodesExpanded: {},
    updateDelay: 2000,

    /*requires: ['BS350.custom.Utils',
      'BS350.custom.Analysis'],*/
    controllers: globControllers,

    launch: function () {
      APP = this;
      this.nodesExpanded["Param"] = {};
      this.nodesExpanded["Storage"] = {};
      APP.statusTime = new Date();
      //APP.torqueUnitFactors = torque_unit_factors;
      var ctrl;
      var me = this;
      me.viewport = new Ext.container.Viewport({
        layout: 'border',
        cls: 'mainViewport',
        items: [
          {
            xtype: 'headerview',
            region: 'north',
            height: 110
          },
          {
            xtype: 'navigationview',
            region: 'west',
            split: true,
            width: 200,
            minSize: 180
          },
          {
            xtype: 'tabpanel',
            region: 'center',
            margin: '-5 10',
            plain: true,
            tabBar: {cls: 'mainTabBar'}
          }
        ]
      });

      /*var channelCtrl = me.getController('ChannelCtrl');
      channelCtrl.getTorqueUnitFactors();*/
      var headerController = me.getController('HeaderCtrl');
      headerController.attachView(me.viewport.down('headerview'));

      var navController = me.getController('NavigationCtrl');
      navController.attachView(me.viewport.down('navigationview'));
      navController.on('showView', me.showView, me);

      me.tabview = me.viewport.down('tabpanel');
      me.tabview.on('tabchange', me.changePanel, me);
      /* just to make sure it is preloaded: */
      BS350.custom.Analysis.getAvHeaderTmpl();
      BS350.custom.Analysis.getGraphHeaderTmpl();
      BS350.custom.Utils.getGridCellTemplate();


      Ext.tip.QuickTipManager.init();
      Ext.apply(Ext.tip.QuickTipManager.getQuickTip(), {
        dismissDelay: 0
      });
      /*delete Ext.tip.Tip.prototype.minWidth;
       delete Ext.tip.QuickTip.prototype.minWidth;*/

      for (ctrl in PERMDATA) {
        if (PERMDATA.hasOwnProperty(ctrl)) {
          me.getController(ctrl).access = PERMDATA[ctrl];
        }
      }
      var noBackpage = Ext.get(document);
      noBackpage.on('keydown', function (e, t) {
        var preventKeyPress;
        if (e.keyCode === 8) {
          switch (t.tagName.toUpperCase()) {
            case 'TEXTAREA':
              preventKeyPress = t.readOnly || t.disabled;
              break;
            case 'INPUT':
              preventKeyPress = t.readOnly || t.disabled ||
              (t.attributes.type && Ext.Array.contains(["radio", "checkbox", "submit", "button"], t.attributes.type.value.toLowerCase()));
              break;
            case 'DIV':
              preventKeyPress = t.readOnly || t.disabled || !(t.attributes.contentEditable && t.attributes.contentEditable.value == "true");
              break;
            default:
              preventKeyPress = true;
              break;
          }
        } else {
          preventKeyPress = false;
        }

        if (preventKeyPress) {
          e.preventDefault();
        }
      });
      /*var histindex = 0;
      for (histindex = 0; histindex < Ext.Loader.history.length; histindex++) {
        console.log(Ext.Loader.history[histindex]);
      }*/
    },

    getPanel: function (ctrlName) {
        return this.tabview.items.findBy(function (panel) {
            return (panel.ctrlName === ctrlName);
        });
    },

    showView: function (name, ctrlName, icon, path) {
      var me = this;
      if (Ext.Array.indexOf(globControllers, ctrlName) >= 0) {
        var panel = this.getPanel(ctrlName);

        // if panel exists
        if (panel) {
            me.tabview.setActiveTab(panel);
        } else {
            var ctrl = me.getController(ctrlName);
            ctrl.path = path;
            /* var ctrlView = ctrl.createView(); */
            panel = Ext.create('Ext.panel.Panel', {
                title: name,
                iconCls: icon,
                layout: 'fit',
                ctrl: ctrl,
                ctrlName: ctrlName,
                closable: true,
                items: [Ext.create('BS350.view.' + ctrl.views[0])]
            });
            me.tabview.add(panel);
            me.tabview.setActiveTab(panel);

            ctrl.attachView(panel.items.first());

            panel.on('close', me.closePanel, me);
            panel.on('beforeClose', me.beforeClosePanel, me);
        }
      } else {
        Ext.MessageBox.alert('Error', 'Missing ' + ctrlName);
      }
    },

    beforeClosePanel: function (panel) {
      return this.getController(panel.ctrlName).askclose(panel);
    },

    closePanel: function (panel) {
      this.getController("HeaderCtrl").retrieve = "";
      this.getController(panel.ctrlName).deactivated();
      this.getController(panel.ctrlName).closed(panel);
    },

    changePanel: function (tabview, newPanel, oldPanel) {
      this.getController("HeaderCtrl").retrieve = newPanel.ctrlName;
      var ctrl = this.getController(newPanel.ctrlName);
      if (ctrl.activated !== undefined) {
        ctrl.activated();
      }
      if (oldPanel) {
        ctrl = this.getController(oldPanel.ctrlName);
        if (ctrl.deactivated !== undefined) {
          ctrl.deactivated();
        }
      }
      this.getController('NavigationCtrl').setPath(this.getController(newPanel.ctrlName).path);
    }
  });
});
