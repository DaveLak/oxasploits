/*global Ext: false, TR: false, APP: false */
Ext.define('BS350.controller.JobStepCtrl', {
  extend: 'BS350.custom.ViewController',
  models: ['JobTask'],
  views: ['JobStepView', 'BS350.custom.ToggleColumn'],

  items: [
    { name: 'btnOk', query: '#btnOK', actions: {click: 'setAndClose'}},
    { name: 'btnCancel', query: '#btnCancel', actions: {click: 'close'}},

    { name: 'formPanel', query: '#formPanel', actions: {change: 'updateButtons', dirtychange: 'updateButtons', validitychange: 'updateButtons' } },
    { name: 'generalTree', query: '#generalTree'}
  ],
  progs_pairs: Ext.create('Ext.data.Store', { fields: [{ name: 'number', type: 'int' }, { name: 'name', type: 'string' }] }),
  initView: function () {
    var me = this,
      //panel = this.V.formPanel,
      treePanel = this.V.generalTree,
      treeStore = treePanel.getStore(),
      stepData = this.step.getData(),
      stepDataCopy = Ext.decode(Ext.encode(stepData));

    this.invalid = false;

    if (me.access !== 'w') {
      me.V.btnOk.hide();
    }

    this.loadIDCombo(stepDataCopy);

    showAsReadonly = function () {
      if (me.access !== 'w') {
        treeStore.getRootNode().cascadeBy(function (el) {
          el.set("readonly", true);
          return true;
        });
      }
    }

    if (me.step.get('Type') === 1) {
     // this.filterIDCode(stepDataCopy);
    }

    if (me.step.get('Type') === 5) {
       me.sourceSwitch(stepDataCopy);
       //me.filterScanStep(stepDataCopy);
       me.filterBarcodes(stepDataCopy, showAsReadonly);

    } else {
      treeStore.loadNewData(stepDataCopy);
      showAsReadonly();
    }


    Ext.Ajax.request({
      url: 'BS350/prg/get_prgs',
      async: false,
      success: function (response) {
        var result = Ext.JSON.decode(response.responseText);
        if (result[0].number === 99) {
          Ext.Array.erase(result, 0, 1);
        }
        me.progs_pairs.loadData(result);
      },
      failure: function () {
        Ext.Msg.alert(TR("Failure"), TR("Loading programs failed"));
      }
    });

    // Window title
    this.view.setTitle(TR('Job') + ' ' + TR('Step') + ':' + this.step.getData().Name);

  },

  loadIDCombo: function (data) {
    var item = APP.getController('JobCtrl').getScanStepCount(),
      idcount = "",
      i,
      k,
      varArray = ["$Mode", TR('Userdefined Text')];


    if (item !== undefined) {
      if (item.type === 5) {
        idcount = item.ref.data.children[0].children[0].myValue;
        idcount = idcount.charAt(idcount.length - 1);
        if (idcount !== "") {
          for (i = 1; i <= idcount; i++) {
            varArray.push('$ID Input' + i + '@A' + (item.ref.data.Row - idcount + i + 1));
          }
        }
        //varArray.push(TR('Userdefined Text'));   CR11635 User defined text should always be displayed
      }

      if (data.Type === 1) {
        for (k = 0; k < data.children[1].children[0].children.length; k++) {
          data.children[1].children[0].children[k].choice = varArray;
        }
      }
    }
  },

  sourceSwitch: function(guiData){
    var me = this, target, source, i;
    source = parseInt(guiData.children[1].children[0].myValue, 10);

     switch ( source )
     {
      case 0:
          guiData.children[3].invisible = false;
          for( i= 0; i <  guiData.children[3].children.length; i++){
            guiData.children[3].children[i].invisible = false;
          }

          guiData.children[4].invisible = false;
          for( i= 0; i <  guiData.children[4].children.length; i++){
            guiData.children[4].children[i].invisible = false;
          }
          break;
      case 1:
          guiData.children[3].invisible = true;
          for( i= 0; i <  guiData.children[3].children.length; i++){
            guiData.children[3].children[i].invisible = true;
          }

          guiData.children[4].invisible = true;
          for( i= 0; i <  guiData.children[4].children.length; i++){
            guiData.children[4].children[i].invisible = true;
          }
          break;
      default:
          guiData.children[3].invisible = false;
          for( i= 0; i <  guiData.children[3].children.length; i++){
            guiData.children[3].children[i].invisible = false;
          }

          guiData.children[4].invisible = false;
          for( i= 0; i <  guiData.children[4].children.length; i++){
            guiData.children[4].children[i].invisible = false;
          }
          break;
    }

  },

  filterScanStep: function (guiData) {
    var me = this, data, jsonData;

    Ext.Ajax.request({
      url: '/BS350/master/processJobs',
      success: function (res) {
        jsonData = Ext.JSON.decode(res.responseText);
        if (jsonData[0].steps[0].children[0] !== undefined) {
          data = jsonData[0].steps[0].children[1].children[0];

          if (data.myValue === "4") {
            if (guiData.children[1].children[1] !== undefined) {
              guiData.children[1].children[1].readonly = false;
            }
          } else if (data.myValue !== undefined) {
            if (guiData.children[1].children[1] !== undefined) {
              guiData.children[1].children[1].readonly = true;
              guiData.children[1].children[1].myValue = data.myValue.toString();
            }
          }
          me.filterBarcodes(guiData);
        }
      }
    });
  },

  filterIDCode: function (data) {
    // var me = this, k;
    var k;
    if (data.children[1].children[0].myValue === "false") {
      for (k = 1; k < data.children[1].children.length; k++) {
        data.children[1].children[k].invisible = true;
      }
    } else {
      for (k = 1; k < data.children[1].children.length; k++) {
        data.children[1].children[k].invisible = false;
      }
    }
  },

  filterBarcodes: function (guiData, callback) {
    var me = this, data, jsonData, i;
    Ext.Ajax.request({
      url: '/BS350/scanner/processCfg',
      success: function (res) {
        jsonData = Ext.JSON.decode(res.responseText);
        if (jsonData.scanner[0].children[0] !== undefined) {
          data = Ext.JSON.decode(res.responseText).scanner[0].children[0].children;

          for (i = 0; i < data.length; i++) {
            if (data[i].myValue === "false") {
              guiData.children[4].children[i].invisible = true;
              guiData.children[4].children[i].myValue = false;
            }
          }
          me.V.generalTree.getStore().loadNewData(guiData);
          if (callback !== undefined) {
            callback();
          }
        }
      }
    });
  },

  copyFromToStep: function (stepData, guiData) {
    var i;

    if (guiData.myValue !== undefined) {
      guiData.myValue = stepData.myValue.toString();
    }
    //if(stepData.expanded !== undefined){
    //  guiData.expanded = stepData.expanded;
    //}
    if (stepData.children !== undefined) {
      for (i = 0; i < stepData.children.length; i++) {
        this.copyFromToStep(stepData.children[i], guiData.children[i]);
      }
    }
  },

  setAndClose: function () {


    // var jobCtrl = APP.getController('JobCtrl'),
    var me = this,
      // stepCfg = [],
      tree = this.V.generalTree,
      startNode = tree.getRootNode(),
      stepData = this.step.getData(),
      stepDataCopy = Ext.decode(Ext.encode(stepData)),
      guiDataEdited = me.serialize(startNode);

    tree.getPlugin().completeEdit();

    startNode.cascadeBy(function(currNode){
      tree.fireEvent('deselect', this, currNode);
    });

    me.copyFromToStep(guiDataEdited, stepDataCopy);

    if (tree.getStore().isDirty()) {
      this.step.set(stepDataCopy);
    }
    this.step.data.Name = startNode.findChild('myText', 'Name', true).get('myValue');
    Ext.ComponentQuery.query('#myJobview')[0].view.refresh();
    this.view.close();
  },


  serialize: function (rootNode) {
    var me = this,
      result = Ext.data.writer.Json.prototype.getRecordData(rootNode),
      childNodes = rootNode.childNodes,
      len = childNodes.length,
      children,
      i;

    if (len > 0) {
      children = [];
      for (i = 0; i < len; i++) {
        children.push(me.serialize(childNodes[i]));
      }
      result.children = children;
    }
    return result;
  },

  close: function () {
    this.view.close();
  },

  updateButtons: function () {
    var formPanelValid = this.V.formPanel.getForm().isValid();
    if (!formPanelValid  || this.invalid) {
      this.V.btnOk.setDisabled(true);
    } else {
      this.V.btnOk.setDisabled(false);
    }
  }

});
