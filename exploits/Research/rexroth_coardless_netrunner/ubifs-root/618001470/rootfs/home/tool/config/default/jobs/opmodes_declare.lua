c = require "constants"
f = require "runFunctions"
plc = require "plcsignals"
idsrc = require "idcodesources"

RunMode = c.jobOpModeAutomatic -- aktive Modus Spalte - i.d.R. 0 = jobOpModeAutomatic

local initNode = {
   name = "initNode",
   timeout = 300,
   type = c.TypeIdleStartNode,
   selectsCw = 0,
   selectsEn = 0,
   displayJobSteps = 0,
   displayTime = 1,
   clearIDCode = 0,
   jobComment = '',
   jobUser = 'Bosch',
   jobDate = 1493975869,
   useIdleEn = 0,
   idcode_timeout1 = 600,
   idcode_timeout2 = 600,
   display_text1 = "",
   display_text2 = ""
}
-- Atoms for Idle Script ---
atoms  = {}

atoms["$AutoRun"] = {
   type = c.TypeTriggerOut,		-- TriggerOut --
   mode = c.TriggerOutModeAutoRun, 		-- AutoRun setzen --
   dest = 0,
   state = 0,				-- Falls AutoRun hier eine 1 eintragen --
   range = 0,
   valueList = {}
}

atoms["$DeclareOperationMode0"] = {
  type = c.TypeTriggerOut,
  mode = c.TriggerOutModeOperationMode,
  dest = c.jobOpModeAutomatic, -- 0 = automatik, 1 = OpMSelect, 2 = manual
  state = 1, -- 1 = aktiv, 0 = passiv
  range = 0,
  valueList = {
    prgselect = false,
    jobselect = false,
    triggers = {}
  }
}

atoms["$DeclareOperationMode1"] = {
  type = c.TypeTriggerOut,
  mode = c.TriggerOutModeOperationMode,
  dest = c.jobOpModeSelect, -- 0 = automatik, 1 = OpMSelect, 2 = manual
  state = 0, -- 1 = aktiv, 0 = passiv
  range = 0,
  valueList = {
    prgselect = false,
    jobselect = false,
    triggers = {{
        id = c.jobOpModeTriggerHmi, --HMI
        active = false,
     pin = ""
       },
       {
     id = c.jobOpModeTriggerPlc, --BMS
     active = false,
     plcnr = plc.In.OpModSel
       }
     }
  }
}

atoms["$DeclareOperationMode2"] = {
  type = c.TypeTriggerOut,
  mode = c.TriggerOutModeOperationMode,
  dest = c.jobOpModeManual, -- 0 = automatik, 1 = OpMSelect, 2 = manual
  state = 0, -- 1 = aktiv, 0 = passiv
  range = 0,
  valueList =
    {
      prgselect = true, --gui menue 'programs' freischalten
      jobselect = false, --gui menue 'jos' freischalten
      triggers = {{
          id = c.jobOpModeTriggerHmi, --HMI
          active = true,
          pin = ""
      },
      {
          id = c.jobOpModeTriggerOpenProtocol, --Open Protocol
          active = false
      },
       {
           id = c.jobOpModeTriggerPlc, --BMS
           active = false,
           plcnr = plc.In.ManOp
       }
     },
     files = {"/home/tool/config/jobs/2/OkNokCnterCfg.json"}
   }
}

f.publishAtoms(atoms,function (a) cpp.job:addAtom(a) end)


nodes = {}
nodes["AutoRun"] = {}
nodes["DeclareOperationModeAutomatic"] = {}
nodes["DeclareOperationModeSelect"] = {}
nodes["DeclareOperationModeManual"] = {}

nodes["AutoRun"].atom = atoms["$AutoRun"]
nodes["AutoRun"].successor = {{var = "dummy",val = nil, next = nodes["DeclareOperationModeAutomatic"] }}

nodes["DeclareOperationModeAutomatic"].atom = atoms["$DeclareOperationMode0"]
nodes["DeclareOperationModeAutomatic"].successor = {{var = "dummy",val = nil, next=nodes["DeclareOperationModeManual"] }}

nodes["DeclareOperationModeSelect"].atom = atoms["$DeclareOperationMode1"]
nodes["DeclareOperationModeSelect"].successor = {{var = "dummy",val = nil, next=nodes["DeclareOperationModeManual"] }}

nodes["DeclareOperationModeManual"].atom = atoms["$DeclareOperationMode2"]
nodes["DeclareOperationModeManual"].successor = {{var = "dummy",val = nil, next=f.EndNode }}

f.setInitNode(initNode)
f.checkPlausib(nodes)
f.go(nodes["AutoRun"])
f.cleanUpNodes(atoms, nodes)
return RunMode
