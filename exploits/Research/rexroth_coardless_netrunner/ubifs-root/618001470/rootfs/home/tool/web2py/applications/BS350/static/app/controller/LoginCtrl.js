/*global Ext: false, navigator: false, TR: false, Base64: false, window: false */
Ext.define('BS350.controller.LoginCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['LoginView', 'BS350.custom.LangCombo'],

  items: [
    { name: 'nameVersion', query: '#nameVersion' },
    { name: 'lblUser', query: '#lblUser'},
    { name: 'lblError', query: '#lblError' },
    { name: 'cbUser', query: '#cbUser', actions: { blur: 'checkCurrentLanguage', select: 'checkCurrentLanguage' } },
    { name: 'lblPassword', query: '#lblPassword' },
    { name: 'tfPassword', query: '#tfPassword', actions: {specialkey: 'passwordKeyPressed', change: 'passwordChanged'} },
    { name: 'lblLanguage', query: '#lblLanguage' },
    { name: 'cbLang', query: '#cbLang', actions: {change: 'selectLang'} },
    { name: 'btnLogin', query: '#btnLogin', actions: {click: 'doLogin'} }
  ],

  initView: function () {
    this.setVersion();
    this.loadLanguages();
  },

  setVersion: function () {
    var me = this;
    Ext.Ajax.request({
      url: '/BS350/setting/version',
      success: function (res) {
        me.V.nameVersion.setText('NEXO-OS ' + res.responseText);
      }
    });
  },

  chooseLanguage: function (me, browserLang) {
    me.V.cbLang.getStore().load(function () {
      var idx = this.find('langCode', browserLang);
      var item;
      if (idx > -1) {
        item = this.getAt(idx);
      } else {
        idx = this.find('langCode', 'en');
        item = this.getAt(idx);
      }
      me.V.cbLang.setValue(item.get('filename'));
    });
  },

  loadLanguages: function () {
    // Detect browser language to use as default
    var browserLang = 'en';
    if (navigator.language) {
      browserLang = navigator.language.substr(0, 2);
    } else if (navigator.systemLanguage) {
      browserLang = navigator.systemLanguage.substr(0, 2);
    }

    var me = this;
    me.chooseLanguage(me, browserLang);
  },

  checkCurrentLanguage: function (myself, value, lastValue, handle) {
    var me = this;
    myself.getStore().each(function (item) {
      if (me.V.cbUser.value === item.get('loginname')) {
        var lang = item.get('lang');
        if (lang === null) {
          lang = me.loadLanguages();
          return;
        }
        me.chooseLanguage(me, lang);
      }
    });
  },

  selectLang: function (combo, value) {
    this.translate(value);
  },

  translate: function (lang) {
    var me = this;
    Ext.Ajax.request({
      url: '/BS350/language.js?l=' + lang,
      success: function (response, opts) {
        eval(response.responseText);
        me.V.lblUser.setText(TR('User'));
        me.V.lblPassword.setText(TR('Password'));
        me.V.lblLanguage.setText(TR('Language'));
        me.V.btnLogin.setText(TR('Login'));
      }
    });
  },

  passwordChanged: function (field) {
    field.validFlag = true;
  },

  passwordKeyPressed: function (field, e) {
    if (e.getKey() == e.ENTER) {
      this.doLogin();
    }
  },

  doLogin: function () {
    var me = this;
    var username = this.V.cbUser.getValue();
    var password = this.V.tfPassword.getValue();
    var language = this.V.cbLang.getValue();
    var token = Base64.encode(username + ':' + password);
    Ext.Ajax.request({
      url: 'BS350/default/loginAuth/login',
      headers: { Authorization : 'Basic ' + token },
      params: { lang: language },
      success: function (response, opts) {
        if (response.responseText == 'ok') {
          window.location = './index';
        } else if (response.responseText == 'fail') {
          me.V.tfPassword.validFlag = false;
          me.V.tfPassword.validate();

          // TODO
        } else {
          var data = Ext.JSON.decode(response.responseText);
          me.V.lblError.setText(TR("Login not possible. Too many open sessions (max. {0})").format(data.session_count_exceeded));
        }
      },
      failure: function (response, opts) {
        // IE can not handle this: konsole.log('server-side failure with status code ' + response.status);
      }
    });
  }

});

