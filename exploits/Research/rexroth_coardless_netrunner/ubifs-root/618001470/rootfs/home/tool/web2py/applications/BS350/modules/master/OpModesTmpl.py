__author__ = 'kai'


RUN_MODES = {0: "c.jobOpModeAutomatic", 1: "c.jobOpModeSelect", 2: "c.jobOpModeManual"}

class OpModes:

    def __init__(self):
        self.data = []

    def requires(self):
        self.data.append('c = require "constants"')
        self.data.append('f = require "runFunctions"')
        self.data.append('plc = require "plcsignals"')
        self.data.append('idsrc = require "idcodesources"')
        self.data.append('')

    def initNode(self, user, comment, date, active_mode):

        active = RUN_MODES[0]
        for k, v in active_mode.items():
            if v:
                active = RUN_MODES[k]

        self.data.append('RunMode = {} -- aktive Modus Spalte - i.d.R. 0 = jobOpModeAutomatic'.format(active))
        self.data.append('')
        self.data.append('local initNode = {')
        self.data.append('   name = "initNode",')
        self.data.append('   timeout = 300,')
        self.data.append('   type = c.TypeIdleStartNode,')
        self.data.append('   selectsCw = 0,')
        self.data.append('   selectsEn = 0,')
        self.data.append('   displayJobSteps = 0,')
        self.data.append('   displayTime = %s,' % 1)
        self.data.append('   clearIDCode = 0,')
        self.data.append('   jobComment = \'%s\',' % comment)
        self.data.append('   jobUser = \'%s\',' % user)
        self.data.append('   jobDate = %d,' % date)
        self.data.append('   useIdleEn = %d,' % 0)
        self.data.append('   idcode_timeout1 = %d,' % 600)
        self.data.append('   idcode_timeout2 = %d,' % 600)
        self.data.append('   display_text1 = "%s",' % "")
        self.data.append('   display_text2 = "%s"' % "")
        self.data.append('}')
        self.data.append('-- Atoms for Idle Script ---')
        self.data.append('atoms  = {}')
        self.data.append('')
        self.data.append('atoms["$AutoRun"] = {')
        self.data.append('   type = c.TypeTriggerOut,		-- TriggerOut --')
        self.data.append('   mode = c.TriggerOutModeAutoRun, 		-- AutoRun setzen --')
        self.data.append('   dest = 0,')
        self.data.append('   state = 0,				-- Falls AutoRun hier eine 1 eintragen --')
        self.data.append('   range = 0,')
        self.data.append('   valueList = {}')
        self.data.append('}')
        self.data.append('')


    def declareOperationModeAuto(self, active, prgsel, jobsel):

        #--------------------------AUTO - --------------------------
        self.data.append('atoms["$DeclareOperationMode0"] = {')
        self.data.append('  type = c.TypeTriggerOut,')
        self.data.append('  mode = c.TriggerOutModeOperationMode,')
        self.data.append('  dest = c.jobOpModeAutomatic, -- 0 = automatik, 1 = OpMSelect, 2 = manual')
        self.data.append('  state = {}, -- 1 = aktiv, 0 = passiv'.format(int(active)))
        self.data.append('  range = 0,')
        self.data.append('  valueList = {')
        self.data.append('    prgselect = {},'.format(prgsel))
        self.data.append('    jobselect = {},'.format(jobsel))
        self.data.append('    triggers = {}')
        self.data.append('  }')
        self.data.append('}')
        self.data.append('')

    def declareOperationModeSelect(self, active, trigger, prgsel, jobsel, pin):
        #--------------------------SELECT---------------------------
        self.data.append('atoms["$DeclareOperationMode1"] = {')
        self.data.append('  type = c.TypeTriggerOut,')
        self.data.append('  mode = c.TriggerOutModeOperationMode,')
        self.data.append('  dest = c.jobOpModeSelect, -- 0 = automatik, 1 = OpMSelect, 2 = manual')
        self.data.append('  state = {}, -- 1 = aktiv, 0 = passiv'.format(int(active)))
        self.data.append('  range = 0,')
        self.data.append('  valueList = {')
        self.data.append('    prgselect = {},'.format(prgsel))
        self.data.append('    jobselect = {},'.format(jobsel))
        self.data.append('    triggers = {{')
        self.data.append('        id = c.jobOpModeTriggerHmi, --HMI')
        self.data.append('        active = {},'.format(("HMI" in trigger)).lower())
        self.data.append('     pin = "{}"'.format(pin))
        self.data.append('       },')
        self.data.append('       {')
        self.data.append('     id = c.jobOpModeTriggerPlc, --BMS')
        self.data.append('     active = {},'.format(("BMS Signal OpMSel" in trigger)).lower())
        self.data.append('     plcnr = plc.In.OpModSel')
        self.data.append('       }')
        self.data.append('     }')
        self.data.append('  }')
        self.data.append('}')
        self.data.append('')


    def declareOperationModeManual(self, active, trigger, prgsel, jobsel, path, pin):
        # --------------------------MANUAL---------------------------
        self.data.append('atoms["$DeclareOperationMode2"] = {')
        self.data.append('  type = c.TypeTriggerOut,')
        self.data.append('  mode = c.TriggerOutModeOperationMode,')
        self.data.append('  dest = c.jobOpModeManual, -- 0 = automatik, 1 = OpMSelect, 2 = manual')
        self.data.append('  state = {}, -- 1 = aktiv, 0 = passiv'.format(int(active)))
        self.data.append('  range = 0,')
        self.data.append('  valueList =')
        self.data.append('    {')
        self.data.append('      prgselect = {}, --gui menue \'programs\' freischalten'.format(prgsel))
        self.data.append('      jobselect = {}, --gui menue \'jos\' freischalten'.format(jobsel))
        self.data.append('      triggers = {{')
        self.data.append('          id = c.jobOpModeTriggerHmi, --HMI')
        self.data.append('          active = {},'.format(("HMI" in trigger)).lower())
        self.data.append('          pin = "{}"'.format(pin))
        self.data.append('      },')
        self.data.append('      {')
        self.data.append('          id = c.jobOpModeTriggerOpenProtocol, --Open Protocol')
        self.data.append('          active = {}'.format(("Open Protocol" in trigger)).lower())
        self.data.append('      },')

        """
        self.data.append('      {')
        self.data.append('          id = c.jobOpModeTriggerScanner, --Scanner')
        if trigger and "Scanner" in trigger:
            self.data.append('           active = true')
        else:
            self.data.append('           active = false')
        self.data.append('       },')
        """

        self.data.append('       {')
        self.data.append('           id = c.jobOpModeTriggerPlc, --BMS')
        self.data.append('           active = {},'.format(("BMS Signal ManOp" in trigger)).lower())
        self.data.append('           plcnr = plc.In.ManOp')
        self.data.append('       }')
        self.data.append('     },')
        self.data.append('     files = {paths}'.format(paths=path))
        self.data.append('   }')
        self.data.append('}')
        self.data.append('')


    def publishAtoms(self):
        self.data.append('f.publishAtoms(atoms,function (a) cpp.job:addAtom(a) end)')
        self.data.append('')
        self.data.append('')


    def nodes(self):
        self.data.append('nodes = {}')
        self.data.append('nodes["AutoRun"] = {}')
        self.data.append('nodes["DeclareOperationModeAutomatic"] = {}')
        self.data.append('nodes["DeclareOperationModeSelect"] = {}')
        self.data.append('nodes["DeclareOperationModeManual"] = {}')
        self.data.append('')
        self.data.append('nodes["AutoRun"].atom = atoms["$AutoRun"]')
        self.data.append('nodes["AutoRun"].successor = {{var = "dummy",val = nil, next = nodes["DeclareOperationModeAutomatic"] }}')
        self.data.append('')
        self.data.append('nodes["DeclareOperationModeAutomatic"].atom = atoms["$DeclareOperationMode0"]')
        self.data.append('nodes["DeclareOperationModeAutomatic"].successor = {{var = "dummy",val = nil, next=nodes["DeclareOperationModeManual"] }}')
        self.data.append('')
        self.data.append('nodes["DeclareOperationModeSelect"].atom = atoms["$DeclareOperationMode1"]')
        self.data.append('nodes["DeclareOperationModeSelect"].successor = {{var = "dummy",val = nil, next=nodes["DeclareOperationModeManual"] }}')
        self.data.append('')

        self.data.append('nodes["DeclareOperationModeManual"].atom = atoms["$DeclareOperationMode2"]')
        self.data.append('nodes["DeclareOperationModeManual"].successor = {{var = "dummy",val = nil, next=f.EndNode }}')
        self.data.append('')
        self.data.append('f.setInitNode(initNode)')
        self.data.append('f.checkPlausib(nodes)')
        self.data.append('f.go(nodes["AutoRun"])')
        self.data.append('f.cleanUpNodes(atoms, nodes)')
        self.data.append('return RunMode')

    def create(self, user, comment, date, active, trigger, prgsel, jobsel, pin):
        #
        #   Modes : 0 = Automatic; 1 = Select; 2 = Manual
        #

        oknokpath = "{\"/home/tool/config/jobs/2/OkNokCnterCfg.json\"}"

        self.requires()
        self.initNode(user, comment, date, active)

        if 0 in active:
            self.declareOperationModeAuto(active[0], prgsel[0], jobsel[0])
        else:
            self.declareOperationModeAuto(0, "false", "false")

        if 1 in active:
            self.declareOperationModeSelect(active[1], trigger.get(1), prgsel[1], jobsel[1], pin[1])
        else:
            self.declareOperationModeSelect(0, {}, "false", "false", "")

        if 2 in active:
            self.declareOperationModeManual(active[2], trigger.get(2), prgsel[2], jobsel[2], oknokpath, pin[2])
        else:
            self.declareOperationModeManual(0, {}, "false", "false", path="{}", pin="")

        self.publishAtoms()
        self.nodes()

        return self.data


    def create_default(self):

        import time
        active = {0:True}
        self.requires()
        self.initNode("", "", int(time.time()), active)
        self.declareOperationModeAuto(1, "false", "false")
        self.declareOperationModeSelect(0, {}, "false", "false", "")
        self.declareOperationModeManual(0, {}, "false", "false", path="{}", pin="")
        self.publishAtoms()
        self.nodes()

        return self.data