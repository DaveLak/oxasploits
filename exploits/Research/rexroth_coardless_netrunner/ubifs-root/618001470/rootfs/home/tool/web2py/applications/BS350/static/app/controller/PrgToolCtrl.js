/*global Ext: false, alert: false, START_STEP: false, NOK_STEP: false, NOK_CONN_STEP: false, END_STEP: false, TIGHTB_STEP: false, TR: false , window: false, TIGHT_STEP: false */
Ext.define('BS350.controller.PrgToolCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['PrgToolView'],
  stores: ['PrgStore', 'PrgGridStore'],

  items: [
    { name: 'prgSelect', query: '#selectCombo', actions: {beforeselect: 'checkChanges'}},
    { name: 'prgSelect', query: '#selectCombo', actions: {change: 'selectPrg'}},
    { name: 'saveButton', query: '#saveButton', actions: {click: 'saveProgram'}},
    { name: 'infoButton', query: '#infoButton', actions: {click: 'showInfo'}},
    { name: 'deletePrgButton', query: '#removePrgButton', actions: {click: 'deleteProgram'}},
    { name: 'renamePrgButton', query: '#renamePrgButton', actions: {click: 'renameProgram'}},
    { name: 'importPrgButton', query: '#importPrgButton', actions: {click: 'importProgram'}},
    { name: 'exportPrgButton', query: '#exportPrgButton', actions: {click: 'exportProgram'}},
    { name: 'importAllButton', query: '#importAllButton', actions: {click: 'importAll'}},
    { name: 'exportAllButton', query: '#exportAllButton', actions: {click: 'exportAll'}},


    { name: 'viewButton', query: '#viewButton', actions: {click: 'editStep'}},
    { name: 'tightButton', query: '#tightButton', actions: {click: 'addTightStep'}},
    /*{ name: 'branchButton', query: '#branchButton', actions: {click: 'addBranch'}},*/
    { name: 'removeButton', query: '#removeButton', actions: {click: 'removeStep'}},
    { name: 'editButton', query: '#editButton', actions: {click: 'editStep'}},
    { name: 'msg_lbl_bbar', query: '#msg_lbl_bbar'}
  ],

  currentProgram: null,
  forceClose: false,

  init: function (application) {
    var me = this;
    this.forceClose = false;
    this.prgStore = Ext.create('BS350.store.PrgStore');
    this.prgStore.on('update', this.prgStoreChanged, this);
    this.prgStore.on('datachanged', function () { this.saving = false; }, this);
    application.getController('HeaderCtrl').on('cfgChanged', me.retrieveLimits, me);
  },

  initView: function () {
    if (this.access !== 'w') {
      this.V.saveButton.hide();
      this.V.deletePrgButton.hide();
      this.V.renamePrgButton.hide();
      this.V.importPrgButton.hide();
      this.V.exportPrgButton.hide();
      this.V.importAllButton.hide();
      this.V.exportAllButton.hide();
      this.V.tightButton.hide();
      /*this.V.branchButton.hide();*/
      this.V.removeButton.hide();
      this.V.editButton.hide();
      this.V.viewButton.show();
    }
    this.view.on('select', this.stepSelected, this);
    this.view.on('itemdblclick', this.editStep, this);
    this.forceclose = false;

    // Disable select program combo store load function.
    // Combo store will be filled manually
    this.V.prgSelect.getStore().load = function () {};

    this.stepCtrl = this.getController('Prg2StepCtrl');
    this.stepCtrl.table = this.view.getView();
    this.stepCtrl.access = this.access;

    this.expImpPrgDirectCtrl = this.getController('ExpDirectPrgCtrl');
    this.impPrgDirectCtrl = this.getController('ImpDirectPrgCtrl');
    this.impPrgDirectCtrl.on('eventImportAllPrg', this.updatePrgAftImpAll, this);
    var me = this;
    //CR10224
    this.view.getEl().mask(TR("Loading..."));
    Ext.Ajax.request({
      url: '/BS350/prg/getLastEditprg',
      timeout: 180000,
      success: function (response) {
        var data = Ext.JSON.decode(response.responseText);
        if (data !== null) {
          var idx = data.lastModif;

          me.loadData(idx);
        } else {
          //when we fail then CR8956
          me.loadData(0);
        }
      },
      failure: function (response, opts) {
        //when we fail then CR8956
        me.loadData(0);
      }
    });

    this.on('stepadded', function () {
      if (this.maxSrbStepReached()) {
        this.V.tightButton.setDisabled(true);
      }
    });
    this.on('stepremoved', function () {
      if (!this.maxSrbStepReached()) {
        this.V.tightButton.setDisabled(false);
      }
    });
  },

  retrieveLimits: function () {
    var me = this;
    Ext.Ajax.request({
      url: '/BS350/channel/limits',
      success: function (response) {
        var data = Ext.JSON.decode(response.responseText);
        // buffer for all program steps:
        var maxsrbsteps = data.maxsrbsteps;
        delete data.maxsrbsteps;
        me.limits = data;
        // buffer for current program step:
        if (typeof me.stepCtrl !== "undefined") {
          me.stepCtrl.limits = data;
        }
        // me.view.limits = data;
        me.maxSrbSteps = maxsrbsteps;
        if (me.maxSrbStepReached()) {
          me.V.tightButton.setDisabled(true);
        }
      }
    });
  },

  loadData: function (defaultPrg) {
    var me = this;
    Ext.Ajax.request({
      url: "/channel/torque_unit_factors",
      success: function (response) {
        APP.torqueUnitFactors = Ext.JSON.decode(response.responseText);
        me.prgStore.load({
          scope: me,
          callback: function () {
            this.updatePrgStore(defaultPrg);
            this.view.getEl().unmask();
          }
        });
        me.retrieveLimits();
      },
      failure: function () {
        var fn = function () {
          me.view.getEl().unmask();
          APP.tabview.getActiveTab().close();
        };
        Ext.Msg.alert(TR("Error"), TR("Could not load torque unit factors for conversion"), fn);
      }
    });

  },

  updatePrgStore: function (defaultPrg) {
    var me = this;
    var comboStore = me.V.prgSelect.getStore();

    comboStore.removeAll();
    var id;
    for (id = 1; id <= me.prgStore.count(); id++) {
      var prg = me.prgStore.getById(id);
      comboStore.add({prgId: id, prgName: prg.get('Name'), prgSlot: prg.get('Slot')});
    }
    if (defaultPrg !== undefined) {
      var item = comboStore.getAt(comboStore.findExact('prgSlot', defaultPrg));
      me.V.prgSelect.select(item);
      me.selectPrg(me.V.prgSelect, item.get('prgId'));
    } else {
      me.V.prgSelect.select(comboStore.first());
    }
  },

  updatePrgAftImpAll : function(){
    if (!this.view) return;
    var cuslot = 0;
    if (this.currentProgram !== null) {
      cuslot = this.currentProgram.get('Slot');
    }
    this.view.getEl().mask(TR("Importing..."));
    this.loadData(cuslot);
  },

  showValidationErrorsSummary: function () {
    if (this.currentProgram.steps().data.items.length < 3) {
      this.V.msg_lbl_bbar.setText(TR('Step: Program needs at least one step'));
    } else {
      this.V.msg_lbl_bbar.setText("");
    }
  },
  prgStoreChanged:  function (store, record) {

    this.showValidationErrorsSummary();

    if (!this.currentProgram.isValid()) {
      this.V.saveButton.setDisabled(true);
      return;
    }

    if (this.saving) { return; }
    if (!this.deleting && this.currentProgram.get('Name') === 'n.a') {
      this.currentProgram.set({Name: ''});
    }
    this.V.saveButton.setDisabled(!this.prgStore.hasChanged());

    var comboStore = this.V.prgSelect.getStore();
    var comboRec = comboStore.getAt(record.getId() - 1);
    comboRec.set('prgName', this.currentProgram.get('Name'));
    this.V.prgSelect.select(comboRec);
  },

  checkChanges: function(combo, prgId) {
    var me = this;
    if (this.prgStore.hasChanged()) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') {
            me.saveProgram(null, null, {callback: function () {
            me.V.saveButton.setDisabled(!me.prgStore.hasChanged());
            me.saving = false;
            me.V.prgSelect.select(prgId);
            me.view.getEl().unmask();
            } });
          }
          else if (btn === 'no') {
            me.view.getEl().mask(TR("Loading..."));
            me.prgStore.load({
              scope: me,
              callback: function () {
                me.V.prgSelect.select(prgId);
                this.view.getEl().unmask();
              }
            });
            //me.prgStore.discardChanges();
            me.V.saveButton.setDisabled(!me.prgStore.hasChanged());
            //me.V.prgSelect.select(prgId);
          }else{
            //do nothing
          }
        },
        icon: Ext.Msg.QUESTION
      });
      return false
    }
    return true;
  },

  selectPrg: function (combo, prgId) {
    var me = this;
    me.view.getSelectionModel().deselectAll();
    var store = me.view.getStore();
    var prg = this.prgStore.getById(prgId);
    me.V.removeButton.setDisabled(true);
    me.V.editButton.setDisabled(true);
    me.V.tightButton.setDisabled(true);
    //if (!prg) return;
    if (!prg) {return; }
    if (!prg.steps) { alert('Prg has no "steps"'); return; }

    this.currentProgram = prg;

    if (me.currentProgram.get('Comment').length > 0) {
      me.V.infoButton.setText(TR('Info') + ' [...]');
    } else {
      me.V.infoButton.setText(TR('Info'));
    }

    if (prg.get('Name') === 'n.a') {
      var newTorqueUnit = parseInt(APP.torqueUnitFactors.Aktiv, 10);
      prg.set('TorqueUnit', newTorqueUnit);
      prg.commit();
      prg.steps().data.items[0].set('TorqueUnit', newTorqueUnit);
      prg.steps().data.items[0].commit();
    }

    if (prg && prg.steps) {
      store.loadFromSteps(prg.steps());
      // Until more column are supported again!
      //var maxCol = store.getMaxCol(0, 0);
      this.view.setNumColumns(1);
    } else {
      store.removeAll();
      this.view.setNumColumns(1);
    }



    if (!prg.steps().hasListener('update')) {
      prg.steps().addListener('update', function () { me.prgStoreChanged(store, prg); });
    }

    this.V.prgSelect.setFieldLabel('Prg ' + prg.get('Slot'));

    var myPrgview = Ext.ComponentQuery.query('#myToolview')[0];
    if (myPrgview.getStore().getCount() === 2) {
      myPrgview.getSelectionModel().setCurrentPosition({row: myPrgview.getStore().getCount() - 1, column: 1});
    }


    var importexport = prg.get('Name') !== 'n.a';
    //this.V.importPrgButton.setDisabled(!importexport);
    this.V.exportPrgButton.setDisabled(!importexport);
    this.V.exportAllButton.setDisabled(false);
    this.showValidationErrorsSummary();
  },

  checkSelection: function (row, column) {
    var gridStore = this.view.getStore();
    var item = gridStore.getItem(row, column - 1);
    var buttonStatus = {tightButton: false, /*branchButton: false,*/ removeButton: false};

    if (!item || item.type === START_STEP || item.type === NOK_STEP || item.type === NOK_CONN_STEP) {
      buttonStatus = {tightButton: false, /* branchButton: false, */ removeButton: false};
    } else {
      if (item.type === END_STEP) {
        var prevItem = gridStore.getItem(row - 1, column - 1);
        if (prevItem.type === NOK_STEP) {
          buttonStatus = {tightButton: true, /*branchButton: false,*/ removeButton: true};
        } else {
          buttonStatus = {tightButton: true, /*branchButton: false,*/ removeButton: false};
        }
      } else if (item.type === TIGHTB_STEP) {
        buttonStatus = {tightButton: true, /*branchButton: false,*/ removeButton: true};
      } else {
        buttonStatus = {tightButton: true, /*branchButton: true,*/ removeButton: true};
      }
    }
    //edit button for the time being has no dependency to a step
    if (item) {
      buttonStatus.editButton = true;
    } else {
      buttonStatus.editButton = false;
    }

    if (this.maxSrbStepReached()) {
      buttonStatus.tightButton = false;
    }

    var s;
    for (s in buttonStatus) {
      if (buttonStatus.hasOwnProperty(s)) {
        this.V[s].setDisabled(!buttonStatus[s]);
      }
    }
  },

  stepSelected: function (model, record, row, column) {
    this.checkSelection(row, column);
  },

  saveProgram: function (button, event, eOpts) {
    this.view.getEl().mask(TR("Saving..."));
    this.saving = true;
    if (!eOpts.callback) {
      var me = this;
      eOpts.callback = function () { me.saving = false; me.view.getEl().unmask();};
    }
    this.prgStore.upload(eOpts.callback);

    eOpts.callback = null;

    this.V.saveButton.setDisabled(true);
    var importexport = this.currentProgram.get('Name') !== 'n.a';
    //this.V.importPrgButton.setDisabled(!importexport);
    this.V.exportPrgButton.setDisabled(!importexport);
    this.V.exportAllButton.setDisabled(false);

  },

  deleteProgram: function (button) {
    var me = this;
    Ext.Msg.show({
      title: TR('Remove Program'),
      msg: TR('All program data will be removed. Are you sure?'),
      buttons: Ext.Msg.YESNO,
      buttonText: {yes: TR('Continue'), no: TR('Cancel')},
      icon: Ext.Msg.QUESTION,
      fn: function (btn) {
        if (btn === 'yes') {
          me.view.getEl().mask(TR("Deleting..."));
          me.deleting = true;

          Ext.Ajax.request({
            url: 'channel/default_torque_unit',
            success: function (response, opts) {
              me.currentProgram = me.prgStore.findRecord('id', me.currentProgram.get('id'));
              var torqueUnit = Ext.JSON.decode(response.responseText);

              me.currentProgram.set({"Name": 'n.a', Date: 978303600, Version: '', Comment: '', id: me.currentProgram.get('id'), 'TorqueUnit': torqueUnit });
              var steps = me.currentProgram.steps();
              steps.removeAll();
              steps.add({id: 1, Type: 0, Column: 0, Row: 0, Name: TR('Start'), IO_Next: 2});
              steps.getAt(0).setDefaultStartLevel(5, 30, 5);
              steps.add({id: 2, Type: 2, Column: 0, Row: 1, Name: TR('End')});

              me.saveProgram(null, null, {callback: function () {
                me.selectPrg(me.V.prgSelect, me.currentProgram.getId());
                me.saving = false;
                me.view.getEl().unmask();
                me.deleting = false;
              }});
            },
            failure: function (response, opts) {
              Ext.MessageBox.alert(TR("Failed"), TR("Could not get torque unit of channel configuration"));
              me.view.getEl().unmask();
            }
          });

        }
      }
    });
  },

  importProgram: function () {
    var me = this;
    var currSlot = this.currentProgram.get('Slot');
    var uploadWin = Ext.create('Ext.window.Window', {
      title: TR('Import'),
      layout: 'fit',
      modal : true,
      width : 400,
      height: 120,
      closable: false,
      items: [
        {
          xtype: 'form',
          itemId : 'uploadForm',
          bodyPadding : 15,
          hidden: false,

          layout : 'anchor',
          defaults: { anchor: '100%' },

          items : [{
            xtype: 'filefield',
            name: 'fileupload',
            itemId: 'fileupload',
            fieldLabel: TR('Program File'),
            labelWidth: 100,
            msgTarget: 'side',
            allowBlank: false,
            toignore: false,
            buttonText: TR('Browse...'),
            listeners:{
                afterrender: function(cmp){
                  cmp.fileInputEl.set({
                    accept: '.nxprg'
                  });
                },
                validitychange: function(cmp, valid) {
                  if (valid === true){
                    try {
                      Ext.ComponentQuery.query("#uploadBtn")[0].handler();
                    }catch(err){}
                  }
                }
            },
            validator: function (value) {
              if (value.match(/\.nxprg$/g)) {
                Ext.ComponentQuery.query("#uploadBtn")[0].setDisabled(false);
                return true;
              }
              Ext.ComponentQuery.query("#uploadBtn")[0].setDisabled(true);
              return TR('File must be a *.nxprg program');
            }
          }]
        }
      ],
      buttons: [
        { itemId: 'uploadBtn', text: TR('Upload'),
          handler: function () {
            var win = this.up('window');
            var form = win.down('form').getForm();
            var submitForm = function () {
              if (form.isValid()) {
                form.submit({
                  url: '/BS350/prg/importPrgFile',
                  params: { prg: currSlot },
                  waitMsg: TR('Importing program...'),
                  success: function (form, action) {
                    me.view.getEl().mask(TR("Importing..."));
                    me.loadData(currSlot);
                    win.close();
                  },
                  failure: function (form, action) {
                    switch (action.failureType) {
                    case Ext.form.action.Action.CLIENT_INVALID:
                      Ext.Msg.alert(TR('Failure'), TR('Form fields may not be submitted with invalid values'));
                      break;
                    case Ext.form.action.Action.CONNECT_FAILURE:
                      Ext.Msg.alert(TR('Failure', TR('Ajax communication failed')));
                      break;
                    case Ext.form.action.Action.SERVER_INVALID:
                      Ext.Msg.alert(TR('Failure'), TR(action.result.msg));
                      break;
                    default:
                      Ext.Msg.alert(TR('Failure'), TR(action.result.msg));
                      break;
                    }
                    win.close();
                  }
                });
              }
            };
            Ext.Ajax.request({
              url: "/BS350/prg/existingPrograms",
              success: function (response) {
                var existingPrograms = Ext.JSON.decode(response.responseText);
                if (Ext.Array.contains(existingPrograms, currSlot)) {
                  Ext.Msg.confirm(TR("Program exists"), TR("Program for this slot exists already. Do you want to overwrite?"), function (arg) {
                    if (arg === "no") {
                      win.close();
                    } else if (arg === "yes") {
                      Ext.ComponentQuery.query('#fileupload')[0].hide();
                      submitForm();
                    }
                  });
                } else {
                  Ext.ComponentQuery.query('#fileupload')[0].hide();
                  submitForm();
                }
              },
              failure: function () {
                // silent failing
              }
            });
          }
          },
        { itemId: 'cancelBtn', text: TR('Cancel'), handler: function () {this.up('window').close(); } }
      ]
    });
    uploadWin.on('show', function(){
      try{
        if (!Ext.isIE10m) {
          uploadWin.down('form').down('filefield').fileInputEl.dom.click();
        }
      }catch(err){}
    }, this);
    uploadWin.show();
  },

  exportProgram: function () {
    var me = this;
    me.view.getEl().mask(TR("Exporting..."));

    Ext.Ajax.request({
      url: '/BS350/prg/exportPrgFile',
      method: 'GET',
      params: {num: me.currentProgram.get('Slot'), name: me.currentProgram.get('Name')},
      success: function (res) {
        var resData = Ext.JSON.decode(res.responseText);
        if (!resData.success) {
          Ext.Msg.alert('Export failed:', resData.msg);
        } else {
          window.location.href = '/BS350/fs/downloadR?f=' + encodeURIComponent(resData.msg);
        }
        me.view.getEl().unmask();
      },
      failure: function (res) {
        me.view.getEl().unmask();
        Ext.Msg.alert('Export failure:', res);
      }
    });
  },

    importAll: function () {

    var me = this;
    //var currSlot = this.currentProgram.get('Slot');
    me.impPrgDirectCtrl.showView();
    return;
  },

  exportAll: function () {
    var me = this;
    me.expImpPrgDirectCtrl.showView();
  },

  showInfo: function () {
    var win = Ext.create('Ext.window.Window', this.view.infoDialog);
    win.readonly = this.access !== 'w';
    win.setPrg(this.currentProgram);
    win.show();
  },

  renameProgram: function () {
    var me = this;
    var modalWin = Ext.create('Ext.window.Window', {
      title: TR('Name'),
      height: 130,
      width: 250,
      modal: true,
      resizable: false,
      layout: { type: 'vbox', align: 'middle', padding: 10, defaultMargin: 10 },
      items: [
        { xtype: 'label', text: TR('Enter the new program name:') },
        {  xtype: 'textfield', width: 220, itemId: 'renamePrgTxtId', enforceMaxLength: false, maxLength: 20, maskRe: /[^"'\\]/, value: me.currentProgram.get('Name') },
        { xtype: 'container', layout: { type: 'hbox', pack: 'stretch', align: 'bottom', padding: 10},
          items: [
            {  xtype: 'button', itemId: 'okButton', text: TR('OK'), width: 70, margin: '0 0 0 20',
              handler: function () {
                var renamePrgTxtId = modalWin.down('#renamePrgTxtId');
                if (renamePrgTxtId.isValid()) {
                  me.currentProgram.set({Name: renamePrgTxtId.value });
                  modalWin.hide();
                  me.updatePrgStore(me.currentProgram.get('Slot'));
                  if ( ! me.currentProgram.isValid()) {
                    me.V.saveButton.setDisabled(true);
                  }
                }
              }
              },
            {  xtype: 'button', itemId: 'cancelButton', text: TR('Cancel'), margin: '0 0 0 20', autoWidth: true, handler: function () { modalWin.hide(); } }
          ]
          }
      ]
    }).show();

/*    Ext.Msg.prompt(TR('Name'), TR('Enter the new program name:'), function (btn, text) {
      if (btn === 'ok') {
        console.log("tesxt", text);
        me.currentProgram.set({Name: text.replace('"', '\"')});
        //me.currentPrgram.set({Name: me.currentProgram.get('Name').replace('"', '\"')});
        console.log("currentProgramname", me.currentProgram.get('Name'));
      }
    }, me, false, me.currentProgram.get('Name')); */
  },

  maxSrbStepReached: function () {
    if (this.currentProgram !== null) {
      if (this.maxSrbSteps !== null) {
        if (this.maxSrbSteps !== undefined) {
          if (this.maxSrbSteps < this.currentProgram.stepsStore.data.items.length + 1) {
            return true;
          }
        }
      }
    }
    return false;
  },

  addTightStep: function () {
    this.insertItem(TIGHT_STEP);
    this.fireEvent('stepadded');
    try{
      var stepPos = this.getSelectedStepPos();
      if (stepPos) {
        this.checkSelection(stepPos.row, stepPos.col + 1);
      }
    } catch (exp) {}
  },

  addBranch: function () {
    this.insertItem(TIGHTB_STEP);
  },

  removeStep: function () {
    this.removeItem();
    this.fireEvent('stepremoved');
    try{
      var stepPos = this.getSelectedStepPos();
      if (stepPos) {
        this.checkSelection(stepPos.row, stepPos.col + 1);
      }
    } catch (exp) {}
  },

  editStep: function () {
    var stepPos = this.getSelectedStepPos();
    if (stepPos) {
      var stepRecord = this.view.getStore().getItem(stepPos.row, stepPos.col);
      var step = stepRecord.ref;

      this.stepCtrl.step = step;
      var stepView = this.stepCtrl.createView(undefined, {stepType: step.get('Type'), limits: this.limits }).show();

      if (this.access !== 'w') {
        //konsole.log('btnCancel', stepView.down('#btnCancel'));
        stepView.down('#btnCancel').setText(TR('Close'));
        Ext.each(Ext.ComponentQuery.query('textfield, checkbox', stepView), function (e) { e.setReadOnly(true); });
      }
    }
  },

  getSelectedStepPos: function () {
    var sel = this.view.getSelectionModel();
    if (!sel.selection) { return null; }
    var row = sel.selection.row;
    var col = sel.selection.column - 1; // -1 Due to numbering col
    if (row < 0 || col < 0) { return null; }
    return { row: row, col: col };
  },

  insertItem: function (itemType) {
    var stepPos = this.getSelectedStepPos();
    if (stepPos) {
      var addCol = this.view.getStore().insertItem(stepPos.row, stepPos.col, itemType);
      this.view.setNumColumns(this.view.columns.length + addCol - 1);
    }

    if (!this.currentProgram.isValid()) {
      this.V.saveButton.setDisabled(true);
    }
  },

  removeItem : function () {
    var stepPos = this.getSelectedStepPos();
    if (stepPos && stepPos.row > 0) {
      var remCol = this.view.getStore().removeItem(stepPos.row, stepPos.col);
      this.view.setNumColumns(this.view.columns.length - remCol - 1);
    }
    this.showValidationErrorsSummary();

    if (!this.currentProgram.isValid()) {
      this.V.saveButton.setDisabled(true);
      return;
    }
  },

  askclose: function (panel) {
    var me = this;
    if (me.prgStore.hasChanged() && !me.forceclose) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') { me.saveProgram(null, null, {callback: function () {panel.close(); }}); }
          if (btn === 'no') { me.forceclose = true; panel.close(); }
        },
        icon: Ext.Msg.QUESTION
      });
      return false;
    }
    return true;
  }
});
