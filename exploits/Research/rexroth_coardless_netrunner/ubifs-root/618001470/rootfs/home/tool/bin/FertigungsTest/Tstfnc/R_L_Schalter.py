# -*- coding: cp1252 -*-
'''
Created on 24.11.2011

@author: sth2mt
'''

import time
import threading
import thread
from ctypes import pythonapi, py_object, c_char
import FertigungsTest.GUI.Display as Display
import FertigungsTest.Hardware.RL_Schalter as RL_Schalter
import FertigungsTest.Hardware.StartSchalter as StartSchalter

# <Command>DirSwitchTst</Command>
# <Command>exit</Command>

def kill(thread,iStopTimeout,tid):
    if thread:
        thread.printf ("kill iStopTimeout=%d"%iStopTimeout)
        time.sleep(iStopTimeout)
        #nach 30s hart beenden
        if thread.isAlive():
            
            res = pythonapi.PyThreadState_SetAsyncExc(tid,py_object(SystemExit))
            if res == 0:
                raise ValueError("nonexistent thread id (%s)" % thread._Thread_name)
            elif res > 1:
                pythonapi.PyThreadState_SetAsyncExc(tid,0)
                raise SystemError("PyThreadState_SetAsyncExc failed")
            else :
                thread.printf ("kill Thread %s" % thread._Thread_name)
                thread.errorcode=600
                thread.isTimeout=True
                thread.__del__()
        else:
            thread.printf ( "kill %s not allive" % thread._Thread_name)
    else:
        print "kill: no handle"
   
        

    

class Prueffunktionen(threading.Thread):
    
    '''
    classdocs
    '''
    def __init__(self, O_Parser,O_Serializer,param=None):
        '''
        Constructor
        '''
        self._Thread_name = "DirSwitchTst"
        self.stout = False
        self.printf( "Constructor %s"% self._Thread_name)
        threading.Thread.__init__(self)
        super(Prueffunktionen,self).__init__()
        self._EventStop = threading.Event()
        self.iStopTimeout = 3 # Stop Timeout bis zum Kill
        self.iTimeout = 60 # Timeout bis Abbruch
        self.errorcode=600 # Fehlercode vorbelegen, Wenn Ok wird zurueckgesetzt
        self.isTimeout=False
        self.GoeppelBremse=True
        
        self.O_XmlParser = O_Parser
        self.O_XML_Cmd = O_Serializer
        self.O_Display = Display.Treiber()
        self.O_Startschalter = StartSchalter.Treiber()
        self.O_RL_Schalter = RL_Schalter.Treiber()
        self.O_Display.setHeadlines("diagnosis tools","direction switch")
        self.O_Display.setAction("","","")
        self.O_Display.paintDisplay()
        
        pass
    
    def __del__(self):
        
        '''
        Destructor
        '''
        if self.errorcode==0:
            sAbruchGrund="OK"
        else:
            sAbruchGrund="NOK"
        self.printf( "Destructor %s"% self._Thread_name)
        # Belegung der Prueffunktion im Parser objekt loeschen -> Freigabe
        self.printf( "Timeout %i, self._EventStop.isSet() %i"%(self.isTimeout,self._EventStop.isSet()))

        # Display bedienen
        if (self.isTimeout | self._EventStop.isSet()):
            #Abbruch der Funktion -> Fehler anzeigen
            if self._EventStop.isSet():
                sAbruchGrund="Abort"
                self.O_Display.setAction(sAbruchGrund,"","")
            else:
                #Timeout der Funktion -> Fehler anzeigen
                sAbruchGrund="Timeout"
                self.O_Display.setAction(sAbruchGrund,"","")
            self.O_Display.setOKNOK(0)
            self.O_Display.clrSelect()

        print "%s"%self.O_XML_Cmd.BuildRueckgabewert(self._Thread_name,"%s %s"%(self._Thread_name,sAbruchGrund),None,self.errorcode,None)
        
        self.O_Display.paintDisplay()
        del(self.O_Display)
        del(self.O_RL_Schalter)
        del(self.O_Startschalter)
        
        self.O_XmlParser.AktivePrueffunktion=None
        pass

        
    
    def stop(self):
        # Thread normal beenden
        self.printf("stop")
        if self.isAlive():
            self._EventStop.set()
            # Kill-thread falls dieser thread sich nicht nach 30s beendet
            for tid, tobj in threading._active.items():
                if tobj is self:
                    thread.start_new_thread(kill,(self,self.iStopTimeout,tid))
        #print "stop Ende"
        pass
    
    def run(self):
        # Ablauf starten
        self.printf("Ablauf starten")
        print "%s"%self.O_XML_Cmd.BuildTimeout(self.iTimeout,self._Thread_name)
        print "%s"%self.O_XML_Cmd.BuildPrintMainText("Recht/Links Schalter pruefen")
        
        # Watchdogtimer anstarten -> beendet Thread anch timeout
        for tid, tobj in threading._active.items():
            if tobj is self:
                thread.start_new_thread(kill,(self,self.iTimeout-self.iStopTimeout-1,tid))
        if self.GoeppelBremse:
            time.sleep(3)
        self.Ablauf()
        self.printf("Nach Ablauf")
        self.__del__()
        pass
    
    def stopped(self):
        return self._EventStop.isSet()


    def Ablauf(self):
        bschongetestet = False
        self.O_Display.setFortschritt(1)
        print "%s"%self.O_XML_Cmd.BuildProgressbar(1)

        self.printf("Recht/Links Schalter Test")
        
        bschongetestet = self.CheckRLSchalter(0)
        self.printf("Mitte testen")
        self.O_Display.ResetLastError()
        self.O_Display.setActionLP("------><------\nselect\nCENTER")
        while (not self.CheckRLSchalter(0)):
            time.sleep(0.1)
        print "%s"%self.O_XML_Cmd.BuildProgressbar(33)
        self.O_Display.setFortschritt(33)
        
        
        self.printf("Links testen")
        self.O_Display.setActionLP("------------->\nselect\nLEFT")
        self.O_Display.paintDisplay()
        while (not self.CheckRLSchalter(1)):
            time.sleep(0.1)
        self.O_Display.setFortschritt(66)
        print "%s"%self.O_XML_Cmd.BuildProgressbar(66)

        if bschongetestet:
            self.printf("Mitte testen")
            self.O_Display.ResetLastError()
            self.O_Display.setActionLP("------><------\nselect\nCENTER")
            while (not self.CheckRLSchalter(0)):
                time.sleep(0.1)
            print "%s"%self.O_XML_Cmd.BuildProgressbar(77)
            self.O_Display.setFortschritt(77)
        

        self.printf("Rechts testen")
        self.O_Display.setActionLP("<-------------\nselect\nRIGHT")
        self.O_Display.paintDisplay()
        while (not self.CheckRLSchalter(-1)):
            time.sleep(0.1)
        self.O_Display.setFortschritt(90)
        print "%s"%self.O_XML_Cmd.BuildProgressbar(90)

        
        self.errorcode=0 # Ok
        self.O_Display.setOKNOK(1)
        
        if self.errorcode==0: # Startschalter OK
            self.O_Display.setSelectLP("Confirm with_to ol_switch")
            #self.O_Display.setSelectLeft("Weiter")
            #self.O_Display.setSelectMiddle("mit Start")
            #self.O_Display.setSelectRight("schalter")
            #self.O_Display.paintDisplay()
            
            #Ergebnis bestaetigen
            self.O_Startschalter.Wait(True,self.stopped)
            # Bildschirm zuruecksetzen auf Default
            self.O_Display.BuildDefaultScreen()
        
        self.O_Display.setFortschritt(100)
        print "%s"%self.O_XML_Cmd.BuildProgressbar(100)

        self.printf("R/L Schalter Pr\xc3\xbcfung -> Ende")

        pass

    def CheckRLSchalter(self,Zustand):
        
        if Zustand < 0:# Links
            iMin = 0
            iMax = 2
        elif Zustand > 0:# Rechts
            iMin = 1
            iMax = 3
        elif Zustand == 0:# Mitte
            iMin = -1
            iMax = 1
        else:
            iMin = 223
            iMax = 255
        self.printf("Zustand %i, iMin %i, iMax %i"%(Zustand,iMin,iMax))
        ADWert=self.O_RL_Schalter.GetAnalog()
        self.printf(ADWert)
                    
        if ((ADWert < iMax) & (ADWert > iMin)):  
                return True
        else:
            return False
        pass


    
    def printf(self,string):
        if self.stout:
            print string
        pass


            
    
    def TestMenue(self,O_Paint):
        if O_Paint:
            O_Paint.SetTestText(["Startschalter bet\xc3\xa4tigen"])
            O_Paint.Update()
            Input = ' '
            while Input!= "z":
                Input=O_Paint.TestfunktionsEingabe()
                O_Paint.Update()
            
                O_Paint.Update()
                O_Paint.ClearTestText()
                return Input

        pass

    



pass                       