/*global Ext:false, TR: false, window: false */
Ext.define('BS350.controller.FirmwareCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['FirmwareView'],
  minimalBatteryPower: 25,
  items: [
    {name: 'toolFirmwarePanel', query: '#toolFirmwarePanel'},
    {name: 'toolPrevFirmwarePanel', query: '#toolPrevFirmwarePanel'},
    {name: 'powerFirmwarePanel', query: '#powerFirmwarePanel'},
    {name: 'updateToolBtn', query: '#updateToolBtn', actions: {click: 'updateToolFirmware'}},
    {name: 'messageToolLbl', query: '#messageToolLbl'},
    {name: 'rollbackPrevFWBtn', query: '#rollbackPrevFWBtn', actions: {click: 'startFwRollbackWin'}},
    {name: 'messagePrevFWLbl', query: '#messagePrevFWLbl'},
    {name: 'updatePowerBtn', query: '#updatePowerBtn', actions: {click: 'updatePowerFirmware'}},
    {name: 'messagePowerLbl', query: '#messagePowerLbl'}
  ],

  active: false,
  updateState: 'start',
  numRetry: 0,
  frmPrgs: 0,
  canRollback: false,

  init: function (application) {
    this.updateProgress.scope = this;
    this.frmUpdateTask.scope = this;

    this.HeaderCtrl = application.getController('HeaderCtrl');
    this.HeaderCtrl.on('updatestatus', this.checkStatus, this);
  },

  initView: function () {
    if (this.access !== 'w') {
      Ext.each(Ext.ComponentQuery.query('toolbar[dock=bottom]', this.view), function (e) {
        e.hide();
      });
    }
    this.readVersion();
    this.readPrevVersion();
    this.getPwPermission();
  },

  initUploadWin: function (type) {
    // Add windows elements
    this.V.uploadForm = this.V.uploadWin.down('#uploadForm');
    this.V.uploadForm.addListener('beforeaction', this.startUploading, this);
    this.V.uploadForm.addListener('actioncomplete', this.finishUploading, this);

    this.V.uploadBtn = this.V.uploadWin.down('#uploadBtn');
    this.V.cancelBtn = this.V.uploadWin.down('#cancelBtn');
    this.V.cancelBtn.addListener('click', function () {
      this.V.uploadWin.close();
    }, this);

    this.V.updateProgress = this.V.uploadWin.down('#updateProgress');
    this.V.progressLabel = this.V.uploadWin.down('#progressLbl');
    this.V.progressBar = this.V.uploadWin.down('#progressBar');

    if (type == 'power') {
      this.V.uploadBtn.addListener('click', this.uploadPowerFile, this);
      this.V.uploadForm.down('filefield').validator = function (value) {
        if (value.match(/\.bin$/g)) {
          return true;
        }
        return TR('File must be a .bin');
      };
    }
    else {
      this.V.uploadBtn.addListener('click', this.uploadToolFile, this);
      this.V.uploadForm.down('filefield').validator = function (value) {
        if (value.match(/\.nxfw$/g)) {
          return true;
        }
        return TR('File must be a .nxfw');
      };
    }

  },

  startFwRollbackWin: function () {
    var me = this;

    me.V.uploadWin = Ext.create('BS350.view.UploadFirmwareWindow', {
      title: TR('Firmware rollback')
    });
    me.V.uploadForm = me.V.uploadWin.down('#uploadForm');
    me.V.uploadBtn = me.V.uploadWin.down('#uploadBtn');
    me.V.uploadBtn.setText('Start');
    me.V.cancelBtn = me.V.uploadWin.down('#cancelBtn');
    me.V.cancelBtn.addListener('click', function () {
      me.V.uploadWin.close();
    }, me);
    me.V.uploadBtn.addListener('click', me.rollbackFirmware, me);
    me.V.updateProgress = me.V.uploadWin.down('#updateProgress');
    me.V.progressLabel = me.V.uploadWin.down('#progressLbl');
    me.V.progressBar = me.V.uploadWin.down('#progressBar');
    me.V.uploadForm.down('filefield').setVisible(false);
    me.V.uploadForm.down('#hintLbl').setVisible(true);
    me.V.progressBar.setVisible(false);
    me.V.uploadForm.down('#hintLbl').setText(TR('Do you want to roll firmware/configurations back?'));
    me.V.uploadWin.addListener('close', function () {
      me.updateState = 'start';
    }, me);
    me.updateState = 'upload';
    me.V.uploadWin.show();
  },

  readVersion: function () {
    var me = this;
    Ext.Ajax.request({
      url: '/BS350/setting/version',
      success: function (res) {
        me.V.toolFirmwarePanel.update(res.responseText);
      }
    });
  },

  readPrevVersion: function () {
    var me = this;
    Ext.Ajax.request({
      url: '/BS350/setting/prevVersion',
      success: function (res) {
        me.V.toolPrevFirmwarePanel.update(res.responseText);
        if (res.responseText !== '' && res.responseText !== '-') {
          me.canRollback = true;
        }
        me.V.rollbackPrevFWBtn.setDisabled(!me.canRollback);
      }
    });
  },

  getPwPermission: function () {
    var me = this;
    Ext.Ajax.request({
      url: '/BS350/accounts/isSpecialUser',
      success: function (res) {
        if (res.responseText === 'yes') {
          me.V.powerFirmwarePanel.setVisible(true);
        }
      }
    });
  },

  updateToolFirmware: function () {
    this.V.uploadWin = Ext.create('BS350.view.UploadFirmwareWindow', {
      title: TR('Tool Firmware Update')
    });
    this.initUploadWin('tool');
    this.V.uploadForm.down('filefield').addListener('validitychange', function (cmp, valid) {
      if (valid === true) {
        try {
          this.uploadToolFile();
        } catch (err) {
        }
      }
    }, this);
    this.V.uploadWin.addListener('show', function () {
      try {
        var cmp = this.V.uploadWin.down('form').down('filefield');
        if (!cmp.isVisible()) return;//only when we have it
        cmp.fileInputEl.set({accept: '.nxfw'});
        if (!Ext.isIE10m) {
          cmp.fileInputEl.dom.click();
        }
      } catch (err) {
      }
    }, this);
    this.V.uploadWin.show();
    this.V.uploadWin.addListener('close', function () {
      this.updateState = 'start';
    }, this);

    this.updateState = 'upload';
  },

  rollbackFirmware: function () {
    var me = this;
    function doRollback () {
      me.V.uploadForm.setVisible(false);
      me.V.updateProgress.setVisible(true);
      me.V.rollbackPrevFWBtn.setDisabled(true);
      me.V.progressBar.reset();
      me.V.progressLabel.setText(TR('Firmware/configurations is being rolled back please wait'));
      me.HeaderCtrl.disconnectedMsgEnabled = false;
      Ext.Ajax.request({
        url: '/BS350/setting/switchPrevFW',
        timeout: 300000,
        success: function (res, opts) {
          var resData = Ext.JSON.decode(res.responseText);
          if (resData.success) {
            me.updateState = 'restart';
            me.numRetry = 0;
            if(resData.successDBRem === false) {
              Ext.Msg.alert(TR('Firmware rollback'), TR("Result database could not be removed!"));
            }
          }
          else {
            me.V.uploadWin.close();
            Ext.Msg.alert(TR('Failure'), TR('Firmware roll back failed'));
          }
          me.V.rollbackPrevFWBtn.setDisabled(false);
        },
        failure: function (res, opts) {
          me.V.rollbackPrevFWBtn.setDisabled(false);
          if (res.statusText === "") {
            me.updateState = 'restart';
            me.numRetry = 0;
          } else {
            me.V.uploadWin.close();
            Ext.Msg.alert(TR('Failure'), TR('Communication error'));
          }
        }
      });
    }
    Ext.Ajax.request({
      url: '/BS350/setting/prevAndCurrMajorNumVersion',
      success: function (res) {
        var versions = Ext.JSON.decode(res.responseText);
        if (versions.prev <= 1100 && versions.curr >= 1200) {
          Ext.MessageBox.confirm(
            TR("Firmware rollback"),
            TR("The result database of current version is not compatible with the previous version. Do you want to remove it?"),
            function (answer) {
              if (answer === "yes") {
                doRollback();
              } else {
                me.V.uploadWin.close();
              }
            }
          );
        } else {
          doRollback();
        }
      }
    });

  },

  updatePowerFirmware: function () {
    this.V.uploadWin = Ext.create('BS350.view.UploadFirmwareWindow', {
      title: TR('Power section Firmware Update')
    });
    this.initUploadWin('power');
    this.V.uploadForm.down('filefield').addListener('validitychange', function (cmp, valid) {
      if (valid === true) {
        try {
          this.uploadPowerFile();
        } catch (err) {
        }
      }
    }, this);
    this.V.uploadWin.addListener('show', function () {
      try {
        var cmp = this.V.uploadWin.down('form').down('filefield');
        if (!cmp.isVisible()) return;
        cmp.fileInputEl.set({accept: '.bin'});
        if (!Ext.isIE10m) {
          cmp.fileInputEl.dom.click();
        }
      } catch (err) {
      }
    }, this);
    this.V.uploadWin.show();
    this.V.uploadWin.addListener('close', function () {
      this.updateState = 'start';
    }, this);
    this.updateState = 'upload';
  },


  uploadToolFile: function () {
    var me = this;
    var form = this.V.uploadForm.getForm();
    var valid = form.getFields().getAt(0).validate();
    var filename = form.getFields().getAt(0).value;

    var index = filename.indexOf('NxFw-');
    if (index > -1) {
      var newmajorversion = parseInt(filename.slice(index + 6, index + 10));
      if (isNaN(newmajorversion)) {
        Ext.MessageBox.alert(
          TR("Firmware update not possible"),
          TR("New major Version is not retrievable. Check the filename of your firmware update"),
          function () {
            me.V.uploadWin.close();
          }
        );
        return;
      }
      var beginUpdate = function (me) {
        if (valid) {
          me.V.uploadBtn.setDisabled(true);
          Ext.Ajax.request({
            url: '/BS350/setting/beforefwupload',
            success: function () {
              me.V.uploadForm.down('filefield').hide();
              me.V.uploadForm.setVisible(false);
              me.V.updateProgress.setVisible(true);
              var fileName = form.getFields().getAt(0).value;
              form.submit({
                url: '/BS350/upload/upload/?' + fileName,
                success: function (form, action) {
                  Ext.TaskManager.stop(me.updateProgress);
                  me.V.uploadBtn.setDisabled(false);
                  me.V.progressBar.setVisible(false);
                  me.V.progressLabel.setText(TR('Firmware is being upgraded'));
                  me.HeaderCtrl.disconnectedMsgEnabled = false;
                  Ext.Ajax.request({
                    url: '/BS350/setting/performUpdate',
                    timeout: 300000,
                    success: function (res, opts) {
                      var resData = Ext.JSON.decode(res.responseText);
                      if (resData.success) {
                        me.updateState = 'restart';
                        me.numRetry = 0;
                      } else {
                        me.V.uploadWin.close();
                        Ext.Msg.alert(TR('Failure'), TR('Firmware upgrade failed'));
                      }
                    },
                    failure: function (res, opts) {
                      if (res.statusText === "") {
                        me.updateState = 'restart';
                        me.numRetry = 0;
                      } else {
                        me.V.uploadWin.close();
                        Ext.Msg.alert(TR('Failure'), TR('Communication error'));
                      }
                    }
                  });
                },
                failure: function (form, action) {
                  // IE can not handle this. Use only for debugging purposes.
                  // konsole.log('Upload failure ' + action.failureTyp);
                  me.V.uploadBtn.setDisabled(false);
                  Ext.TaskManager.stop(me.frmUpdateTask);
                  me.V.uploadWin.close();
                  Ext.TaskManager.stop(me.updateProgress);
                  switch (action.failureType) {
                    case Ext.form.action.Action.CLIENT_INVALID:
                      Ext.Msg.alert(TR('Failure'), TR('Form fields may not be submitted with invalid values'));
                      break;
                    case Ext.form.action.Action.CONNECT_FAILURE:
                      Ext.Msg.alert(TR('Failure', TR('Ajax communication failed')));
                      break;
                    case Ext.form.action.Action.SERVER_INVALID:
                      Ext.Msg.alert(TR('Failure'), TR(action.result.msg));
                      break;
                    default:
                      Ext.Msg.alert(TR('Failure'), TR(action.result.msg));
                      break;
                  }
                  me.updateState = 'start';
                }
              });
            },
            failure: function () {
              Ext.Msg.alert(TR('Failure'), TR('Upload of firmware stopped, to prevent corruption'));
              me.V.uploadBtn.setDisabled(false);
            }
          });
        }
      };
      Ext.Ajax.request({
        url: '/BS350/setting/getmajorversion',
        success: function (response, self) {
          var result = Ext.JSON.decode(response.responseText);
          if (result.downgrade_warning === true && newmajorversion <= 1100) {
            Ext.MessageBox.confirm(
              TR("Major Version Comparison"),
              TR("Downgrade from V1200 and newer to V1100 and older requires to remove result database. Are you sure?"),
              function (btn, none, obj) {
                if (btn === "yes") {

                  Ext.Ajax.request({
                    url: "/BS350/setting/removeresultdb",
                    success: function () {
                      beginUpdate(me);
                    },
                    failure: function () {
                      Ext.MessageBox.alert(
                        TR("Downgrade aborted"),
                        TR("Error on removing result db"),
                        function () {
                          me.V.uploadWin.close();
                        });
                    }
                  });
                } else {
                  me.V.uploadWin.close();
                }
              });
          } else {
            beginUpdate(me);
          }
        },
        failure: function () {
          Ext.MessageBox.alert(
            TR("Version Comparison not possible"),
            TR("Old or new Firmware Version is not accessible. Update aborted"),
            function () {
              me.V.uploadWin.close();
            });

        }
      });
    } else {
      Ext.MessageBox.alert(
        TR("Firmware update not possible"),
        TR("New major Version is not retrievable. Check the filename of your firmware update"),
        function () {
          me.V.uploadWin.close();
        }
      );
    }
    return;
  },

  uploadPowerFile: function () {
    var me = this;
    var form = this.V.uploadForm.getForm();
    var valid = form.getFields().getAt(0).validate();
    if (valid) {
      this.V.uploadForm.setVisible(false);
      this.V.updateProgress.setVisible(true);
      form.submit({
        url: '/BS350/setting/powerFirmware',
        success: function (form, action) {
          me.V.progressBar.setVisible(false);
          Ext.TaskManager.stop(me.updateProgress);
          me.HeaderCtrl.disconnectedMsgEnabled = false;
          me.updateState = 'powerUploadDone';
        },
        failure: function () {
          me.V.progressBar.setVisible(false);
          me.V.progressLabel.setVisible(false);
          me.V.uploadWin.doClose();
          Ext.TaskManager.stop(me.updateProgress);
          Ext.MessageBox.alert(TR("Error"), TR("Uploading Power Firmware failed"));
        }
      });
    }
  },

  updateProgress: {
    run: function () {
      var me = this;
      Ext.Ajax.request({
        url: '/BS350/default/upload/upload/progress',
        success: function (res) {
          me.V.progressLabel.setText(TR('Uploading firmware'));
          var prog = parseFloat(res.responseText);
          me.V.progressBar.updateProgress(prog, Math.floor(prog * 100) + '%');
        }
      });
    },
    interval: 1000
  },

  frmUpdateTask: {
    run: function () {
      this.V.progressBar.updateProgress(this.frmPrgs / 100, Math.floor(this.frmPrgs) + '%');
      this.frmPrgs += 2;
      if (this.frmPrgs === 100) {
        this.frmPrgs = 90;
      }
    },
    interval: 2000
  },

  checkStatus: function (status) {
    if (this.view && this.active) {
      if (this.updateState === 'start') {
        this.V.messageToolLbl.setText(TR('Battery charge under {0}%').format(this.minimalBatteryPower));
        this.V.messageToolLbl.setVisible(status.battery < this.minimalBatteryPower);
        this.V.messagePowerLbl.setText(TR('Battery charge under {0}%').format(this.minimalBatteryPower));
        this.V.messagePowerLbl.setVisible(status.battery < this.minimalBatteryPower);
        this.V.messagePrevFWLbl.setText(TR('Battery charge under {0}%').format(this.minimalBatteryPower));
        this.V.messagePrevFWLbl.setVisible(status.battery < this.minimalBatteryPower);
        this.V.updateToolBtn.setDisabled(status.battery < this.minimalBatteryPower);
        this.V.updatePowerBtn.setDisabled(status.battery < this.minimalBatteryPower);
        this.V.rollbackPrevFWBtn.setDisabled(!this.canRollback || (status.battery < this.minimalBatteryPower));
      } else if (this.updateState === 'powerUploadDone') {
        this.V.uploadWin.close();
        //Ext.Msg.alert(TR('Success'), TR('Firmware upgraded'));
      } else if (this.updateState === 'restart') {
        if (!status.connected || status.shutdownSig !== -1) {
          Ext.TaskManager.stop(this.frmUpdateTask);
          this.V.uploadWin.close();
          //Ext.MessageBox.alert(TR('Success'), TR('Firmware upgraded'));
          this.HeaderCtrl.disconnectedMsgEnabled = true;
          if (status.shutdownSig === 0 || status.shutdownSig === 1) {
            this.HeaderCtrl.downDialog.showMe(TR('Offline') + '  [' + TR('Firmware upgraded') + ']');
          } else {
            this.HeaderCtrl.offlineDialog.showMe({title: TR('Success'), msg: TR('Firmware upgraded')});
          }
        } else {
          this.V.progressLabel.setText(TR('Rebooting System... In case if auto connect fails, please try to reconnect manually'));
          this.V.progressBar.setVisible(false);
          this.numRetry++;
          if (this.numRetry === 25) {
            Ext.TaskManager.stop(this.frmUpdateTask);
            this.V.uploadWin.close();
            this.HeaderCtrl.disconnectedMsgEnabled = true;
            Ext.MessageBox.alert(TR('Firmware upgrade'), TR('Timeout reached waiting for reboot'));
          }
        }
      }
    }
  },

  startUploading: function () {
    this.V.progressLabel.setText(TR('Uploading firmware'));
    this.V.progressBar.updateProgress(0, '0%');

    Ext.TaskManager.start(this.updateProgress);
  },

  finishUploading: function () {
    Ext.TaskManager.stop(this.updateProgress);
  },

  activated: function () {
    this.active = true;
  },

  deactivated: function () {
    this.active = false;
  }
});

