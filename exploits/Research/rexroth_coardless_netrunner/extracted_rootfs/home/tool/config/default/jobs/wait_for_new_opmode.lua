c = require "constants"
f = require "runFunctions"
plc = require "plcsignals"
idsrc = require "idcodesources"

local initNode = {
   name = "initNode",
   timeout = 300,
   type = c.TypeIdleStartNode,
   selectsCw = 0,
   selectsEn = 0,
   displayJobSteps = 0,
   displayTime = 1,
   clearIDCode = 0,
   jobComment = '',
   jobUser = 'Bosch',
   jobDate = 1423752368,
   useIdleEn = 0,
   idcode_timeout1 = 600,
   idcode_timeout2 = 600,
   display_text1 = "",
   display_text2 = ""
}
-- Atoms for Idle Script ---
atoms  = {}

atoms["$AutoRun"] = {
   type = c.TypeTriggerOut,		-- TriggerOut --
   mode = c.TriggerOutModeAutoRun, 		-- AutoRun setzen --
   dest = 0,
   state = 0,				-- Falls AutoRun hier eine 1 eintragen --
   range = 0,
   valueList = {}
}

atoms["$WaitForAbort"] = {
  type = c.TypeTriggerIn,
  mode = c.TriggerInModeOperationModeSet,
  dest = 0, -- 0 = automatik, 1 = OpMSelect, 2 = manual
  state = 0, -- 1 = aktiv, 0 = passiv
  range = 0,
  valueList = {}
}
 
f.publishAtoms(atoms,function (a) cpp.job:addAtom(a) end)
  
nodes = {}
nodes["AutoRun"] = {}
nodes["WaitForAbort"]={}

nodes["AutoRun"].atom = atoms["$AutoRun"]
nodes["AutoRun"].successor = {{var = "dummy",val = nil, next = nodes["WaitForAbort"] }}

nodes["WaitForAbort"].atom = atoms["$WaitForAbort"]
nodes["WaitForAbort"].successor = {{var = "dummy",val = nil, next = f.EndNode }}

f.setInitNode(initNode)
f.checkPlausib(nodes)
f.go(nodes["AutoRun"])
f.cleanUpNodes(atoms, nodes)
