c = require "constants"
f = require "runFunctions"
plc = require "plcsignals"
codes = require "scancodes"
local initNode = {
   name = "initNode",
   timeout = 300,
   type = c.TypeIdleStartNode,
   selectsCw = 0,
   selectsEn = 0,
   displayJobSteps = 1,
   displayTime = 1,
   clearIDCode = 0,
   jobComment = '',
   jobUser = 'Bosch',
   jobDate = 1423752368
}
-- Atoms for Idle Script ---
atoms  = {}
-- Lokaler Knoten --
atoms["$Local"] = {
   type = c.TypeDevice, 
   mode = c.DeviceModeLocal,
   dest = "1"
}
atoms["$WaitJobEnable"] = {
   text ="",
   type = c.TypeTriggerIn,		-- TriggerIn --
   mode = c.TriggerInModeEnableJob, 		-- Warten auf Job Cw --
   dest  = 0,
   state = 0,
   range = 0,
   valueList = {}
}
atoms["$BmsEnable"] = {
   text ="",
   type = c.TypeTriggerOut,		-- TriggerIn --
   mode = c.TriggerOutModeBmsIn, 		-- Warten auf Job Cw --
   dest  = plc.In.En,
   state = 1,
   range = 0,
   valueList = {}
}
f.publishAtoms(atoms,function (a) cpp.job:addAtom(a) end)
nodes = {}
nodes[1] = {}
nodes[2] = {}
nodes[3] = {}
nodes[4] = {}
nodes[5] = {}
nodes[6] = {}
nodes[7] = {}
nodes[8] = {}
------------ CS/SE System ------- Channel Signals -------------------------
nodes[1].atom = atoms["$Local"]
nodes[1].successor = {{var = "dummy",val = nil, next = nodes[2] }}
nodes[2].atom = atoms["$WaitJobEnable"]
nodes[2].successor = {{var = "dummy",val = nil, next = nodes[3] }}
nodes[3].atom = atoms["$BmsEnable"]
nodes[3].successor = {{var = "dummy",val = nil, next = f.EndNode }}
------------ CS/SE System ------- END -------------------------------------
--Eigentlicher Start Code--
f.setInitNode(initNode)
f.checkPlausib(nodes)
f.go(nodes[1])
f.cleanUpNodes(atoms, nodes)
package.loaded["atoms"]=nil
