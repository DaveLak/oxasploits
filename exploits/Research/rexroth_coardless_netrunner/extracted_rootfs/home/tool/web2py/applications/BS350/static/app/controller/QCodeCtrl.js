/*global Ext: false, BS350: false, TR: false, window: false */
Ext.define('BS350.controller.QCodeCtrl', {
  extend: 'BS350.custom.ViewController',
  models: ['QCodeGridRowModel', 'QCodeMfList'],
  views: ['QCodeView', 'BS350.custom.ToggleColumn'],
  stores: ['QCodeStore', 'ReworkStore'],

  items: [
    {name: 'activeFlag', query: '#prActive', actions: {change: 'updateButtons'}},
    {
      name: 'GlobalForm',
      query: '#ipmGlobalComponentId',
      actions: {dirtychange: 'updateButtons', validitychange: 'updateButtons'}
    },
    {name: 'grid', query: '#qcodeGrid'},
    {name: 'reworkGrid', query: '#reworkGrid'},
    {name: 'msg_lbl_bbar', query: '#msg_lbl_bbar'},
    {name: 'editQCode', query: '#editQCode', actions: {click: 'editQCode'}},
    {name: 'addQCode', query: '#addQCode', actions: {click: 'addQCode'}},
    {name: 'removeQCode', query: '#removeQCode', actions: {click: 'removeQCode'}},
    {name: 'saveBtn', query: '#btnSave', actions: {click: 'save'}},
    {name: 'discardBtn', query: '#btnDiscard', actions: {click: 'updateBothData'}},
    //{ name: 'btnReworkSave', query: '#btnReworkSave', actions: {click: 'saveReworkData'} },
    //{ name: 'btnReworkDiscard', query: '#btnReworkDiscard', actions: {click: 'updateReworkData'} },
    {name: 'btnReset', query: '#btnReset', actions: {click: 'resetToFactory'}},
    //{ name: 'btnResetReworkCodes', query: '#btnResetReworkCodes', actions: {click: 'resetToFactoryReworkCodes'} },

    {name: 'btnImport', query: '#btnImport', actions: {click: 'importQCodes'}},
    {name: 'btnExport', query: '#btnExport', actions: {click: 'exportQCodes'}},
    {name: 'btnGridUp', query: '#btnGridUp', actions: {click: 'moveupGridEntry'}},
    {name: 'btnGridDown', query: '#btnGridDown', actions: {click: 'movedownGridEntry'}},

    {
      name: 'assignForm',
      query: '#assignForm',
      actions: {collapse: 'targetCollapsed', expand: 'targetCollapsed', validitychange: 'updateButtons'}
    },
    {
      name: 'scanForm',
      query: '#scanForm',
      actions: {collapse: 'targetCollapsed', expand: 'targetCollapsed', validitychange: 'updateButtons'}
    }

  ],

  forceClose: false,

  initView: function () {
    var me = this;
    if (me.access !== 'w') {
      Ext.each(Ext.ComponentQuery.query('textfield, combobox, checkbox', this.view), function (e) {
        e.setReadOnly(true);
      });
      this.view.getDockedItems()[0].hide();
      this.V.grid.getDockedItems()[2].hide();
      this.V.grid.getView().on('beforeedit', function (e) {
        return false;
      });
      this.V.reworkGrid.plugins[0].on('beforeedit', function (e) {
        return false;
      });
      Ext.each(Ext.ComponentQuery.query('togglecolumn', this.V.grid), function (e) {
        e.editable = false;
      });
    }
    this.forceClose = false;

    me.store = me.V.grid.getStore();
    me.store.on('datachanged', me.updateButtons, me);
    me.store.on('update', me.updateButtons, me);
    me.V.grid.on('selectionchange', me.updateButtons, me);

    var reworkStore = me.getStore("ReworkStore");
    reworkStore.on('datachanged', me.updateButtons, me);
    reworkStore.on('update', me.updateButtons, me);

    this.qcodeEditCtrl = this.getController('QCodeEditorCtrl');

    this.view.getEl().mask(TR("Loading..."));
    this.updateReworkData(function () {
      me.updateData();
    });
  },
  storeChanged: function () {
    return true;
  },

  addQCode: function () {
    var me = this;
    me.qcodeEditCtrl.qcode = null;
    var stepView = me.qcodeEditCtrl.createView(undefined, {}).show();
    if (me.access !== 'w') {
      stepView.down('#btnCancel').setText(TR('Close'));
    }
  },
  editQCode: function () {
    var me = this;
    var selection = me.V.grid.getSelectionModel().getSelection();
    if (selection.length > 0) {
      this.qcodeEditCtrl.qcode = selection[0];
      var stepView = this.qcodeEditCtrl.createView(undefined, {}).show();
      if (this.access !== 'w') {
        stepView.down('#btnCancel').setText(TR('Close'));
      }
    }
  },

  removeQCode: function () {
    var selection = this.V.grid.getSelectionModel().getSelection();
    var indexOf;
    if (selection.length > 0) {
      indexOf = this.store.indexOf(selection[0]);
      this.store.remove(selection[0]);
      if (indexOf === this.store.getCount()) {
        this.V.grid.getView().select(indexOf - 1);
      }
      else {
        this.V.grid.getView().select(indexOf);
      }
    }
  },

  save: function (button, event, eOpts) {

    var me = this;
    var store = me.V.grid.getStore();

    var data = []
    store.each(function (rec) {
      data.push(rec.data);
    });

    Ext.Ajax.request(
      {
        url: '/BS350/qcode/qcodes',
        method: 'POST',
        params: Ext.JSON.encode(data),
        success: function (res) {
          //me.getController('NavigationCtrl').updateActives();
          if (eOpts.callback) {
            eOpts.callback();
          } else {
            me.updateData();
            me.saveReworkData(button, event, eOpts);
          }
        }
      }
    );
    me.updateButtons();
  },

  saveReworkData: function (button, event, eOpts) {
    var me = this;
    var store = me.getStore("ReworkStore");

    var data = [];
    store.each(function (rec) {
      data.push(rec.data);
    });

    Ext.Ajax.request(
      {
        url: '/BS350/qcode/rcodes',
        method: 'POST',
        params: Ext.JSON.encode(data),
        success: function (res) {
          //me.getController('NavigationCtrl').updateActives();
          //store.sync();
          if (eOpts.callback) {
            eOpts.callback();
          } else {
            me.updateReworkData();
          }
        }
      }
    );
    me.updateButtons();
  },

  askclose: function (panel) {
    var me = this;

    var dirty = me.store.isDirty();
    if (dirty && !me.forceClose) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') {
            me.forceClose = true;
            me.save(null, null, {
              callback: function () {
                panel.close();
              }
            });
          }
          if (btn === 'no') {
            me.forceClose = true;
            panel.close();
          }
        },
        icon: Ext.Msg.QUESTION
      });
      return false;
    }
    return true;
  },

  updateBothData: function () {
    var me = this;
    this.updateReworkData(function () {
      me.updateData();
    });
  },

  updateData: function () {
    var me = this;
    var reworkStore = me.getStore("ReworkStore");
    var qcodeView = Ext.ComponentQuery.query("qcodeview")[0];
    Ext.Ajax.request({
      url: '/BS350/qcode/qcodes',
      success: function (res) {
        var data = Ext.JSON.decode(res.responseText);
        me.store.removeAll();
        //me.store.add(data.qcodes);
        me.store.loadRawData(data.qcodes);
        me.store.sync();

        //reworkStore.loadRawData(data.rcodes);
        //reworkStore.sync();

        me.ids = {};

        me.store.each(function (rec) {
          me.ids[rec.get('qcode')] = rec.get('RdOnly');
        });

        //me.getController('NavigationCtrl').updateActives();
        me.updateButtons();
        me.view.getEl().unmask();
        me.store.fireEvent('load', me.store);
      }
    });
  },

  updateReworkData: function (callback) {
    var me = this;
    var reworkStore = me.getStore("ReworkStore");
    Ext.Ajax.request({
      url: '/BS350/qcode/qcodes',
      success: function (res) {
        var data = Ext.JSON.decode(res.responseText);
        //me.store.add(data.qcodes);
        reworkStore.loadRawData(data.rcodes);
        reworkStore.sync();

        //me.V.addQCode.setDisabled(false);
        me.updateButtons();
        //me.getController('NavigationCtrl').updateActives();
        if (callback === undefined) {
          me.view.getEl().unmask();
        }
        //me.store.fireEvent('load', me.store);
      },
      callback: callback
    });
  },

  updateButtons: function () {
    var dirty = this.store.isDirty();
    var reworkDirty = this.getStore("ReworkStore").isDirty();
    this.V.editQCode.setDisabled(true);
    this.V.removeQCode.setDisabled(true);
    this.V.btnGridUp.setDisabled(true);
    this.V.btnGridDown.setDisabled(true);
    this.V.addQCode.setDisabled(true);
    if (this.V.grid.getView().getSelectionModel().getSelection().length > 0) {
      this.V.editQCode.setDisabled(false);
      var sel = this.V.grid.getView().getSelectionModel().getSelection()[0]
      var count = this.V.grid.getStore().getCount();
      var index = this.store.indexOf(sel);

      if (((index - 1) > -1) && !this.store.getAt(index - 1).get('RdOnly')) {
        this.V.btnGridUp.setDisabled(false);
      }
      if (((index + 1) < count) && !this.store.getAt(index).get('RdOnly')) {
        this.V.btnGridDown.setDisabled(false);
        this.V.addQCode.setDisabled(false);
      }

      if (((index + 2) === count)) {
        this.V.btnGridDown.setDisabled(true);
      }

      if (((index + 1) === count)) {
        this.V.btnGridDown.setDisabled(true);
        this.V.addQCode.setDisabled(true);
      }
      if (this.store.getAt(index).get('RdOnly') === false) {
        this.V.addQCode.setDisabled(false);
        this.V.removeQCode.setDisabled(false);
      }
      if (this.store.getAt(index).get('RdOnly') === true) {
        this.V.btnGridDown.setDisabled(true);
        this.V.btnGridUp.setDisabled(true);
        /* last of a block of system codes (next position good to add a nonsystem qcode) */
        if (((index + 1) < count) && !this.store.getAt(index + 1).get('RdOnly')) {
          this.V.addQCode.setDisabled(false);
        } else {
          this.V.addQCode.setDisabled(true);
        }
      }
    }
    //this.V.btnReworkSave.setDisabled(!reworkDirty);
    //this.V.btnReworkDiscard.setDisabled(!reworkDirty);
    this.V.saveBtn.setDisabled(!dirty && !reworkDirty);
    this.V.discardBtn.setDisabled(!dirty && !reworkDirty);
    this.V.btnImport.setDisabled(dirty || reworkDirty);
    this.V.btnExport.setDisabled(dirty || reworkDirty);
  },

  targetCollapsed: function () {
    if (this.V.scanForm.collapsed === false) {
      this.V.saveBtn.setVisible(true);
      this.V.discardBtn.setVisible(true);
      this.V.btnReset.setVisible(true);
      //this.V.btnReworkSave.setVisible(false);
      //this.V.btnReworkDiscard.setVisible(false);
    } else {
      this.V.saveBtn.setVisible(true);
      this.V.discardBtn.setVisible(true);
      this.V.btnReset.setVisible(true);
      //this.V.btnReworkSave.setVisible(true);
      //this.V.btnReworkDiscard.setVisible(true);
    }
    this.updateButtons();
  },

  resetToFactory: function () {
    var me = this;

    var reset = function () {
      Ext.Ajax.request({
        url: '/BS350/qcode/resetToFactory',
        success: function (res) {
          //me.getController('NavigationCtrl').updateActives();
          me.view.getEl().mask(TR("Resetting..."));
          me.updateData();
          me.updateReworkData();
          me.updateButtons();
        }
      });
    };

    var title = TR('Reset to factory');
    var msg = TR('Do you want to discard the current configuration and reset to factory? All relevant configuration files are to be overwritten.');
    BS350.custom.Utils.showResetToFactoryConfirmation(reset, title, msg);
  },
  moveupGridEntry: function () {
    var sel = this.V.grid.getSelectionModel().selected;
    var store = this.V.grid.getStore();
    if (sel.length > 0) {
      var item = sel.getAt(0);
      if (item.get('RdOnly') === false) {
        var pos = store.indexOf(item);
        if (pos > 0) {
          var otherItem = store.getAt(pos - 1);
          if (!otherItem.get('RdOnly')) {
            store.remove(item);
            store.insert(pos - 1, item);
            this.V.grid.getSelectionModel().select(item);
          }
        }
        this.updateButtons();
      }
    }
  },

  movedownGridEntry: function () {
    var sel = this.V.grid.getSelectionModel().selected;
    var store = this.V.grid.getStore();
    if (sel.length > 0) {
      var item = sel.getAt(0);
      if (item.get('RdOnly') === false) {
        var pos = store.indexOf(item);
        if (pos < store.count()) {
          var otherItem = store.getAt(pos + 1);
          if (!otherItem.get('RdOnly')) {
            store.remove(item);
            store.insert(pos + 1, item);
            this.V.grid.getSelectionModel().select(item);
          }
        }
      }
    }
    this.updateButtons();
  },
  importQCodes: function (button, event, eOpts) {
    var me = this;
    me.sdMonitoring = false;
    var win = Ext.create('Ext.window.Window', {
      title: 'Upload',
      height: 110, width: 400,
      layout: 'fit',
      items: {
        xtype: 'form',
        items: [
          {
            xtype: 'filefield',
            margin: 10,
            name: 'cfg',
            itemId: 'cfg',
            fieldLabel: TR('Configuration'),
            labelWidth: 150,
            msgTarget: 'side',
            allowBlank: false,
            anchor: '100%',
            buttonText: TR('Browse...'),
            listeners: {
              afterrender: function (cmp) {
                cmp.fileInputEl.set({
                  accept: '.nxqc'
                });
              },
              validitychange: function (cmp, valid) {
                if (valid === true) {
                  try {
                    Ext.ComponentQuery.query("#uploadBtn")[0].handler();
                  } catch (err) {
                  }
                }
              }
            },
            validator: function (value) {
              if (value.match(/^.*\.nxqc$/g)) {
                if (me.frmVersion !== '') {
                  var idx = value.lastIndexOf('\\');
                  if (idx !== -1) {
                    var val = value.substr(idx + 1);
                    if (val.indexOf(me.frmVersion) !== 0) {
                      return true;
                    }
                  } else if (value.indexOf(me.frmVersion) !== 0) {
                    return true;
                  }
                }
                return true;
              }
              return TR('Must be a *.nxqc file');
            }
          }
        ],
        buttons: [
          {
            itemId: 'uploadBtn', text: TR('Upload'),
            handler: function () {
              me.view.getEl().mask(TR("Importing..."));
              var form = this.up('form').getForm();

              if (form.isValid()) {
                Ext.ComponentQuery.query('#cfg')[0].hide();
                form.submit({
                  url: '/BS350/qcode/importQCodes',
                  timeout: 120000,
                  waitMsg: TR('Uploading QCodes'),
                  success: function (form, action) {
                    win.close();
                    me.updateReworkData(function () {
                      me.updateData();
                    });

                  },
                  failure: function (form, action) {
                    if (typeof action.result.rev_marker !== "undefined") {
                      Ext.MessageBox.alert(TR("Import impossible"), TR(action.result.msg));
                      me.view.getEl().unmask();
                    }
                    win.close();
                    action.result.msg = Ext.String.trim(action.result.msg);
                    var msg = action.result.msg;
                    if (msg !== 'Importer not found' &&
                      msg !== 'Password required' &&
                      msg !== 'No empty password' &&
                      msg !== 'Import file name required' &&
                      msg !== 'Empty import file name given' &&
                      msg !== 'No SD card' &&
                      msg !== 'SD card not mounted' &&
                      msg !== 'Configuration file not found' &&
                      msg !== 'Wrong configuration version') {
                      if (msg.indexOf('No or more than one *.cfg file found') > -1) {
                        action.result.msg = 'No or more than one *.cfg file found';
                      } else {
                        //a system error
                        action.result.msg = 'System error';
                      }
                    }
                    //me.setButtonStatus('File', 'import', true, TR(action.result.msg), true, false);
                  }
                });
              }
            }
          },
          {
            itemId: 'cancelBtn', text: TR('Cancel'), handler: function () {
            this.up('window').close();
          }
          }
        ]
      }
    });
    win.on('show', function () {
      try {
        if (!Ext.isIE10m) {
          win.down('form').down('filefield').fileInputEl.dom.click();
        }
      } catch (err) {
      }
    }, this);
    win.show();
  },
  exportQCodes: function (button, event, eOpts) {
    var me = this;
    me.view.getEl().mask(TR("Exporting..."));
    Ext.Ajax.request({
      url: "/qcode/exportQCodes",
      success: function (res) {
        var resData = Ext.JSON.decode(res.responseText);
        if (!resData.success) {
          Ext.Msg.alert('Export failed:', resData.msg);
        } else {
          window.location.href = '/BS350/fs/downloadR?f=' + encodeURIComponent(resData.msg);
        }
        me.view.getEl().unmask();
      },
      failure: function (res) {
        me.view.getEl().unmask();
        Ext.Msg.alert('Export failure:', res);
      }
    });
  }
});

