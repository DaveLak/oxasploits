/*global Ext: false, TR: false */
Ext.define('BS350.controller.VwXmlCtrl', {
  extend: 'BS350.custom.ViewController',
  views: ['VwXmlView'],
  stores: ['VwXmlStore'],

  items: [
    { name: 'activeFlag', query: '#prActive', actions: {change: 'updateButtons'} },
    { name: 'scanForm', query: '#scanForm', actions: { collapse: 'targetCollapsed', expand: 'targetCollapsed', validitychange: 'updateButtons'}},
    { name: 'grid', query: '#vwxmlgrid'},
    { name: 'saveBtn', query: '#btnSave', actions: {click: 'save'}},
    { name: 'discardBtn', query: '#btnDiscard', actions: {click: 'discardVwXmlData'} },
    { name: 'exportBtn', query: '#btnExport', actions: {click: 'exportVwXml'}},
    { name: 'importBtn', query: '#btnImport', actions: {click: 'importVwXmlCfg'}},
    { name: 'resetBtn', query: '#btnReset', actions: {click: 'resetToFactory'} }

  ],
  forceClose: false,

  data: {},
  loadingMask: null,

  initView: function () {
    var me = this;
    this.view.access = me.access;
    me.forceClose = false;
    if (me.access !== 'w') {
      Ext.each(Ext.ComponentQuery.query('checkbox', 'combobox', 'numberfield', this.view), function (e) {
        e.setReadOnly(true);
      });
      Ext.each(Ext.ComponentQuery.query('toolbar[dock=bottom]', this.view), function (e) { e.hide(); });
      // we could also try to get rid of the button listeners (removeListener):
      Ext.each(Ext.ComponentQuery.query('button', this.view), function (e) { e.hide(); });
      me.V.activeFlag.setReadOnly(true);
      me.forceClose = true;
    }

    me.store = me.V.grid.getStore();
    me.store.on('update', me.storeChanged, me);
    me.store.on('update', function (this_me, record) {
      var rec = record;
      var i;
      if (rec.get('myText') === 'Interface') {
        for (i = 0; i < rec.get('children').length; i++) {
          if (rec.get('children')[i].myText === 'TCP/IP port A (control data)') {
            rec.readonly = true;
          }
        }
      }
    }, me);

    me.view.getEl().mask(TR("Loading..."));
    this.updateVwXmlData();
    me.vwxmlData = {};
  },


  targetCollapsed: function () {

    if (this.V.scanForm.collapsed === false) {
      this.V.saveBtn.setVisible(true);
      this.V.discardBtn.setVisible(true);
      this.V.resetBtn.setVisible(true);
    } else{
      this.V.saveBtn.setVisible(false);
      this.V.discardBtn.setVisible(false);
      this.V.resetBtn.setVisible(false);
    }
  },

  save: function (button, event, eOpts) {
    var me = this;
    var scanCfg = [];
    var rootNode = me.store.getRootNode();
    var scanner = me.vwxmlData.vwxml[0];
    var guiDataEdited = me.serialize(rootNode);
    me.copyFromToStep(guiDataEdited, scanner);
    scanCfg.push(scanner);
    var settings = { active: me.V.activeFlag.getValue(),  vwxml: scanCfg};
    me.view.getEl().mask(TR("Saving..."));
    Ext.Ajax.request(
      {
        url: '/BS350/vw_xml/processCfg',
        method: 'POST',
        params: Ext.JSON.encode(settings),
        success: function (res) {
          me.getController('NavigationCtrl').updateActives();
          if (eOpts.callback) { eOpts.callback(); } else { me.updateVwXmlData(); }
        }
      }
    );
    me.V.saveBtn.setDisabled(true);
    me.V.discardBtn.setDisabled(true);
    me.V.exportBtn.setDisabled(false);
  },

  discardVwXmlData: function () {
    var me = this;
    me.view.getEl().mask(TR("Discarding..."));
    me.updateVwXmlData();
  },
  updateVwXmlData: function () {
    var me = this;
    //scanView.setLoading(true, true);
    Ext.Ajax.request({
      url: '/BS350/vw_xml/processCfg',
      success: function (res) {

        var data = Ext.JSON.decode(res.responseText);
        me.vwxmlData = Ext.JSON.decode(res.responseText);

        me.V.activeFlag.setValue(data.active);
        me.V.activeFlag.initValue();

        me.store.loadNewData(data.vwxml[0]);
        me.view.getEl().unmask();
        me.V.saveBtn.setDisabled(true);
        me.V.discardBtn.setDisabled(true);
        me.V.exportBtn.setDisabled(false);
        me.getController('NavigationCtrl').updateActives();

      },
      failure: function () {
        me.view.getEl().unmask();
      }
    });
  },

  copyFromToStep: function(stepData, guiData){
    if (stepData.myValue !== undefined) {
      guiData.myValue = stepData.myValue;
    }
    if (stepData.expanded !== undefined) {
      guiData.expanded = stepData.expanded;
    }

    if (stepData.children !== undefined) {
      var i;
      for (i = 0; i < stepData.children.length; i++) {
        this.copyFromToStep(stepData.children[i], guiData.children[i]);
      }
    }
  },

  serialize: function (rootNode) {
    var me = this;
    var result = Ext.data.writer.Json.prototype.getRecordData(rootNode),
        childNodes = rootNode.childNodes,
        len = childNodes.length,
        children, i;

    if (len > 0) {
      children = [];
      for (i = 0; i < len; i++) {
        children.push(me.serialize(childNodes[i]));
      }
      result.children = children;
    }
    return result;
  },

  exportVwXml: function () {
    var me = this;
    me.view.getEl().mask(TR("Exporting..."));

    Ext.Ajax.request({
      url: '/BS350/vw_xml/exportVwXml',
      method: 'GET',
      params: {},
      success: function (res) {
        var resData = Ext.JSON.decode(res.responseText);
        if (!resData.success) {
          Ext.Msg.alert('Export failed:', resData.msg);
        } else {
          window.location.href = '/BS350/fs/downloadR?f=' + encodeURIComponent(resData.msg);
        }
        me.view.getEl().unmask();
      },
      failure: function (res) {
        me.view.getEl().unmask();
        Ext.Msg.alert('Export failure:', res);
      }
    });
  },

  importVwXmlCfg: function() {
    var me = this;
    me.sdMonitoring = false;
    var win = Ext.create('Ext.window.Window', {
      title: 'Upload',
      height: 110, width: 400,
      layout: 'fit',
      items: {
        xtype: 'form',
        items: [
          {
            xtype: 'filefield',
            margin: 10,
            name: 'cfg',
            itemId: 'cfg',
            fieldLabel: TR('Configuration'),
            labelWidth: 150,
            msgTarget: 'side',
            allowBlank: false,
            anchor: '100%',
            buttonText: TR('Browse...'),
            listeners:{
                afterrender: function(cmp){
                  cmp.fileInputEl.set({
                    accept: '.vwXml'
                  });
                },
                validitychange: function(cmp, valid) {
                  if (valid === true){
                    try {
                      Ext.ComponentQuery.query("#uploadBtn")[0].handler();
                    }catch(err){}
                  }
                }
            },
            validator: function (value) {
              if (value.match(/\.vwXml$/g)) {
                if (me.frmVersion !== '') {
                  var idx = value.lastIndexOf('\\');
                  if (idx !== -1) {
                    var val = value.substr(idx + 1);
                    if (val.indexOf(me.frmVersion) !== 0) {
                      //return TR('Configuration does not match current firmware version');
                      return (true);
                    }
                  } else if (value.indexOf(me.frmVersion) !== 0) {
                    //return TR('Configuration does not match current firmware version');
                    return true;
                  }
                }
                return true;
              }
              return TR('Must be a *.vwXml file');
            }
          }
        ],
        buttons: [
          {
            itemId: 'uploadBtn', text: TR('Upload'),
            handler: function () {
              var form = this.up('form').getForm();
              if (form.isValid()) {
                Ext.ComponentQuery.query('#cfg')[0].hide();
                form.submit({
                  url: '/BS350/vw_xml/importVwXml',
                  timeout: 120000,
                  waitMsg: TR('Uploading configuration'),
                  success: function (form, action) {
                    win.close();
                    me.view.getEl().mask(TR("Importing..."));
                    //me.setButtonStatus('File', 'import', false, TR("Import successfull"), false, false);
                    //Ext.Ajax.request({ url: '/BS350/setting/reboot'});
                    me.updateVwXmlData();
                  },
                  failure: function (form, action) {
                    win.close();
                    action.result.msg = Ext.String.trim(action.result.msg);
                    var msg = action.result.msg;
                    if (msg !== 'Importer not found' &&
                        msg !== 'Password required' &&
                        msg !== 'No empty password' &&
                        msg !== 'Import file name required' &&
                        msg !== 'Empty import file name given' &&
                        msg !== 'No SD card' &&
                        msg !== 'SD card not mounted' &&
                        msg !== 'Configuration file not found' &&
                        msg !== 'Wrong configuration version') {
                      if (msg.indexOf('No or more than one *.cfg file found') > -1) {
                        action.result.msg = 'No or more than one *.cfg file found';
                      } else {
                        //a system error
                        action.result.msg = 'System error';
                      }
                    }
                    me.setButtonStatus('File', 'import', true, TR(action.result.msg), true, false);
                  }
                });
              }
            }
          },
          { itemId: 'cancelBtn', text: TR('Cancel'), handler: function () {this.up('window').close(); } }
        ]
      }
    });
    win.on('show', function(){
      try{
        if (!Ext.isIE10m) {
          win.down('form').down('filefield').fileInputEl.dom.click();
        }
      }catch(err){}
    }, this);
    win.show();
  },

  storeChanged: function () {
    this.updateButtons();
  },

  updateButtons: function () {
    var dirty = this.store.isDirty() || this.V.activeFlag.isDirty();

    try {
      this.V.saveBtn.setDisabled(!dirty);
      this.V.discardBtn.setDisabled(!dirty);
      this.V.exportBtn.setDisabled(dirty);
    } catch (e) {
      // pass
    }
  },

  resetToFactory: function(){
    var me = this;

    var reset = function () {
      me.view.getEl().mask(TR("Resetting..."));
      Ext.Ajax.request({
        url: '/BS350/vw_xml/resetToFactory',
        success: function (res) {
          me.updateVwXmlData();
          me.view.getEl().unmask();
        },
        failure: function () {
          me.view.getEl().unmask();
        }
      });
    }
    me.V.saveBtn.setDisabled(true);
    me.V.discardBtn.setDisabled(true);
    me.V.exportBtn.setDisabled(false);

    var title = TR('Reset to factory');
    var msg = TR('Do you want to discard the current configuration and reset to factory? All relevant configuration files are to be overwritten.');
    BS350.custom.Utils.showResetToFactoryConfirmation(reset, title, msg);
  },

  askclose: function (panel) {
    var me = this;
    if ((me.store.isDirty() || this.V.activeFlag.isDirty()) && !me.forceClose) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') { me.save(null, null, {callback: function () {me.forceClose = true; panel.close(); }}); }
          if (btn === 'no') {me.forceClose=true;  panel.close(); }
        },
        icon: Ext.Msg.QUESTION
      });
      return false;
    }
    return true;
  }
});
