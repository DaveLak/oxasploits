/*global Ext: false, BS350: false, TR: false */
Ext.define('BS350.controller.ExchangeCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['ExchangeView'],

  items: [
    { name: 'importSet', query: '#importSet'},
    { name: 'importSDBtn', query: '#importSDBtn', actions: {click: 'askImportSDCfg'} },
    { name: 'importSDAnim', query: '#importSDAnim'},
    { name: 'importSDMsg', query: '#importSDMsg'},

    { name: 'importFileBtn', query: '#importFileBtn', actions: {click: 'askImportFileCfg'} },
    { name: 'importFileAnim', query: '#importFileAnim'},
    { name: 'importFileMsg', query: '#importFileMsg'},

    { name: 'exportSet', query: '#exportSet'},
    { name: 'exportSDBtn', query: '#exportSDBtn', actions: {click: 'exportSDCfg'} },
    { name: 'exportSDAnim', query: '#exportSDAnim'},
    { name: 'exportSDMsg', query: '#exportSDMsg'},

    { name: 'exportFileBtn', query: '#exportFileBtn', actions: {click: 'exportFileCfg'} },
    { name: 'exportFileAnim', query: '#exportFileAnim'},
    { name: 'exportFileMsg', query: '#exportFileMsg'},

    { name: 'selectFileBtn', query: '#selectFileBtn', actions: {click: 'selectFileCfg'} },
    { name: 'selectFileAnim', query: '#selectFileAnim'},
    { name: 'selectFileMsg', query: '#selectFileMsg'},
    { name: 'selectSDBtn', query: '#selectSDBtn', actions: {click: 'selectSDCfg'} },
    { name: 'selectSDMsg', query: '#selectSDMsg'},
    { name: 'selectSDAnim', query: '#selectSDAnim'},
    { name: 'filenamesgrid', query: '#filenamesgrid' },
    { name: 'importSelectedBtn', query: '#importSelectedBtn', actions: {click: 'askimportSelCfgFiles'} },
    { name: 'discardSelectedBtn', query: '#discardSelectedBtn', actions: {click: 'selectAll'} },
    { name: 'unSelectAllBtn', query: '#unSelectAllBtn', actions: {click: 'unSelectAll'} },
    { name: 'clearSelectedCfgBtn', query: '#clearSelectedCfgBtn', actions: {click: 'clearSelectedCfg'} },
    { name: 'collapseAllCfgBtn', query: '#collapseAllCfgBtn', actions: {click: 'collapseAllCfg'} },
    { name: 'expandAllCfgBtn', query: '#expandAllCfgBtn', actions: {click: 'expandAllCfg'} },
    { name: 'importSelectedAnim', query: '#importSelectedAnim'},
    { name: 'importSelectedMsg', query: '#importSelectedMsg'}

  ],

  sdMonitoring: false,
  sdDialogOpen: false,
  rootPath: null,
  sdCfgTarget: null,
  frmVersion: '',
  fileToUpload: null,
  removeList: null,
  trgtCfgSrc: -1,

  init: function (application) {
  },

  setDisabled: function (b) {
    var me = this;
    if ((me.access === 'w')) {
      return b;
    }
    return true;
  },
  initView: function () {
    /* this.V.importSet.setVisible(this.access === 'w');*/
    this.V.importSelectedBtn.setVisible(this.access === 'w');
    this.V.discardSelectedBtn.setVisible(this.access === 'w');
    this.V.unSelectAllBtn.setVisible(this.access === 'w');
    this.V.clearSelectedCfgBtn.setVisible(this.access === 'w');
    this.V.filenamesgrid.setVisible(this.access === 'w');
    if (this.access !== 'w') {
      Ext.each(Ext.ComponentQuery.query('button', this.view), function (e) { e.setDisabled(true); });
    }

    this.sdCfgTarget = null;
    this.rootPath = null;
    this.frmVersion = '';
    this.fileToUpload = null;
    this.removeList = null;
    this.trgtCfgSrc = -1;
    this.getVersion();
  },

  getVersion: function () {
    var me = this;
    if (this.frmVersion === '')
    {
      Ext.Ajax.request({
        url: '/BS350/setting/version',
        success: function (res) {
          me.frmVersion = Ext.String.trim(res.responseText);
        }
      });
    }
  },

  checkSD: function () {
    var me = this;
    if (!me.sdMonitoring) return;
    Ext.Ajax.request( {
        url: '/BS350/fs/sdPathList',
        method: 'GET',
        success: function(res)
        {
          var pathList = Ext.JSON.decode(res.responseText);
          if (pathList.length > 0) {
            me.setButtonStatus('SD', 'export', true, '', false, false);
            me.rootPath = pathList[0];
            Ext.Ajax.request({
              url: '/BS350/fs/checkCfgDir',
              params: {path:pathList[0]},
              method: 'GET',
              success: function(res) {
                var cfgExists = Ext.JSON.decode(res.responseText);
                var msg = !cfgExists ? TR('No configuration directory found') : '';
                if (!cfgExists) {
                  me.setButtonStatus('SD', 'select', cfgExists, msg, !cfgExists, false);
                  if (me.trgtCfgSrc === 1) {
                    me.clearSelectedCfg();
                  }
                } else {
                  if(me.trgtCfgSrc === 1 || me.trgtCfgSrc === -2) {
                    msg = me.V.selectSDMsg.text;
                  }
                  me.setButtonStatus('SD', 'select', cfgExists, msg, !cfgExists || (me.trgtCfgSrc < 0), false);
                }
              }
            });
          }
          else {
            var errorMsg = TR('No SD card inserted');
            me.rootPath = null;
            me.setButtonStatus('SD', 'export', false, errorMsg, true, false);
            if (me.trgtCfgSrc === 1) {
              me.clearSelectedCfg();
            } else if (me.trgtCfgSrc === -2){
              me.trgtCfgSrc = -1;
            }
            me.setButtonStatus('SD', 'select', false, errorMsg, true, false);
          }
        }
      }
    );
    setTimeout(function() {me.checkSD();}, 3000);
  },

  askImportSDCfg: function() {
    var me = this;
    Ext.Msg.show({
      title: TR('Import'),
      msg: TR('Warning all existing configuration files will be overwritten!') + '<br/>' + TR('After importing the tool will be rebooted'),
      buttons: Ext.Msg.OKCANCEL,
      buttonText: {ok: TR("Continue"), cancel: TR("Cancel")},
      fn: function (btn) {
        if (btn === "ok") {
          me.importSDCfg();
        }
      }
    });
  },

  askImportFileCfg: function() {
    var me = this;
    Ext.Msg.show({
      title: TR('Import'),
      msg: TR('Warning all existing configuration files will be overwritten!') + '<br/>' + TR('After importing the tool will be rebooted'),
      buttons: Ext.Msg.OKCANCEL,
      buttonText: {ok: TR("Continue"), cancel: TR("Cancel")},
      fn: function (btn) {
        if (btn === "ok") {
          me.importFileCfg();
        }
      }
    });
  },

  importSDCfg: function() {
    var me = this;
    var win = Ext.create('Ext.window.Window', {
      title: TR('Choose a config file from SD Card to upload'),
      height: 400, width: 800,
      layout: 'fit',
      items: {
        xtype: 'form',
          items: [
            {
              xtype: 'dataview', itemId:'dirData',
              autoScroll: true,
              resizable: true,
              height: 300,
              store: {
                fields: ['id', 'text'],
                proxy: {
                  type: 'ajax',
                  url: '/BS350/fs/getcfgs',
                  reader: { type: 'json' }
                }
              },
              tpl: ['<tpl for=".">',
                      '<div class="sdexplorer-item">',
                        '<div class="sdexplorer-leaf-true"></div>',
                        '<h3>{text}</h3>',
                      '</div>',
                    '</tpl>'
              ],
              itemSelector: 'div.sdexplorer-item',
              selectedItemCls: 'sdexplorer-item-selected',
              actions: {selectionchange: 'itemselected'}
            }
          ],
          bbar: [
                {xtype: 'button', itemId: 'btnCancel', text: TR('Cancel'), handler: function() { win.close();}}, '->',
                {xtype: 'button', itemId: 'btnSelect', text: TR('Select'), disabled: true, handler: function() {
                    me.execImportSDCfg();
                    win.close();
                  }
                }
          ]
      }
    });

    win.on('activate', function (){
      var dirdata = this.down('#dirData');
      var selectBtn = this.down('#btnSelect');
      var path = me.rootPath;
      dirdata.store.load({
        scope: this,
        params: {node: path}
      });
      dirdata.on('selectionchange', function(dataview, items){
        if (items.length > 0) {
          me.sdCfgTarget = items[0];
          selectBtn.setDisabled(me.setDisabled(false));
        }
        else {
          me.sdCfgTarget = null;
          selectBtn.setDisabled(true);
        }
      });
    });
    win.show();
  },

  execImportSDCfg: function() {
    var me = this;
    me.sdMonitoring = false;
    me.setButtonStatus('File', 'export', false, '', false, false);
    me.setButtonStatus('SD', 'export', false, '', false, false);
    var box = Ext.MessageBox.wait(TR('Uploading configuration'), '');
    Ext.Ajax.request( {
      url: '/BS350/setting/importSD',
      timeout: 120000,
      method: 'GET',
      params: {cfgname: me.sdCfgTarget.get('text')},
      success: function(res) {
        box.hide();
        var resData = Ext.JSON.decode(res.responseText);
        if (!resData.success) {
          me.setButtonStatus('SD', 'import', false, TR(resData.msg), true, false);
        }
        else {
          me.setButtonStatus('SD', 'import', false, TR("Import successfull"), false, false);
          Ext.Ajax.request({ url: '/BS350/setting/reboot'});
        }
        setTimeout(function() {me.sdMonitoring = true; me.checkSD();}, 5000);
        me.setButtonStatus('File', 'export', true, '', false, false);
      },
      failure: function(res) {
        box.hide();
        me.setButtonStatus('File', 'export', true, '', false, false);
        me.setButtonStatus('SD', 'import', false, TR("Server error"), true, false);
        setTimeout(function() {me.sdMonitoring = true; me.checkSD();}, 5000);
      }
    });
  },

  exportSDCfg: function() {
    var me = this;
    me.sdMonitoring = false;
    me.setButtonStatus('File', 'export', false, '', false, false);
    me.setButtonStatus('SD', 'export', false, TR('Exporting...'), false, true);
    var box = Ext.MessageBox.wait(TR('Exporting configuration'), '');
    Ext.Ajax.request( {
      url: '/BS350/setting/exportSD',
      timeout: 120000,
      method: 'GET',
      success: function(res) {
        box.hide();
        var resData = Ext.JSON.decode(res.responseText);
        if (!resData.success) {
          me.setButtonStatus('SD', 'export', false, TR(resData.msg), true, false);
        }
        else {
          me.setButtonStatus('SD', 'export', false, TR("Export successfull"), false, false);
        }
        setTimeout(function() {me.sdMonitoring = true; me.checkSD();}, 5000);
        me.setButtonStatus('File', 'export', true, '', false, false);
      },
      failure: function(res) {
        box.hide();
        me.setButtonStatus('SD', 'export', false, TR("Server error"), true, false);
        setTimeout(function() {me.sdMonitoring = true; me.checkSD();}, 5000);
        me.setButtonStatus('File', 'export', true, '', false, false);
      }
    });
  },

  importFileCfg: function () {
    var me = this;
    if (this.frmVersion === '')
    {
      Ext.Ajax.request({
        url: '/BS350/setting/version',
        success: function (res) {
          me.frmVersion = Ext.String.trim(res.responseText);
          me.execImportFileCfg();
        },
        failure: function(res) {
          me.execImportFileCfg();
        }
      });
    }
    else
    {
      me.execImportFileCfg();
    }
  },

  execImportFileCfg: function() {
    var me = this;
    me.sdMonitoring = false;
    var win = Ext.create('Ext.window.Window', {
      title: 'Upload',
      height: 110, width: 400,
      layout: 'fit',
      items: {
        xtype: 'form',
        items: [
          {
            xtype: 'filefield',
            margin: 10,
            name: 'cfg',
            itemId: 'cfg',
            fieldLabel: TR('Configuration'),
            labelWidth: 150,
            msgTarget: 'side',
            allowBlank: false,
            anchor: '100%',
            buttonText: TR('Select'),
            validator: function (value) {
              if (value.match(/\.nxcfg$/g)) {
                if (me.frmVersion !== '')
                {
                  var idx = value.lastIndexOf('\\');
                  if (idx !== -1)
                  {
                    var val = value.substr(idx + 1);
                    if (val.indexOf(me.frmVersion) !== 0)
                    {
                      //return TR('Configuration does not match current firmware version');
                      return (true);
                    }
                  }
                  else if(value.indexOf(me.frmVersion) !== 0)
                  {
                    //return TR('Configuration does not match current firmware version');
                    return (true);
                  }
                }
                return true;
              }
              return TR('Must be a *.nxcfg file');
            }
          }
        ],
        buttons: [
          {
            text: TR('Upload'),
            handler: function() {
              var form = this.up('form').getForm();
              if(form.isValid()){
                  Ext.ComponentQuery.query('#cfg')[0].hide();
                  form.submit({
                      url: '/BS350/setting/importFile',
                      timeout: 120000,
                      waitMsg: TR('Uploading configuration'),
                      success: function(form, action) {
                        win.close();
                        Ext.Ajax.request({ url: '/BS350/setting/reboot'});
                      },
                      failure: function(form, action) {
                        win.close();
                        action.result.msg = Ext.String.trim(action.result.msg);
                        var msg = action.result.msg;
                        if (msg !== 'Importer not found' &&
                            msg !== 'Password required' &&
                            msg !== 'No empty password' &&
                            msg !== 'Import file name required' &&
                            msg !== 'Empty import file name given' &&
                            msg !== 'No SD card' &&
                            msg !== 'SD card not mounted' &&
                            msg !== 'Configuration file not found' &&
                            msg !== 'Wrong configuration version'
                           )
                        {
                          if (msg.indexOf('No or more than one *.cfg file found') > -1)
                          {
                            action.result.msg = 'No or more than one *.cfg file found';
                          }
                          else
                          {
                            //a system error
                            action.result.msg = 'System error';
                          }
                        }
                      }
                  });
              }
            }
          }
        ]
      }
    });

    win.show();
  },

  exportFileCfg: function() {
    var me = this;
    me.sdMonitoring = false;
    me.setButtonStatus('SD', 'export', false, '', false, false);
    me.setButtonStatus('File', 'export', false, TR('Exporting...'), false, true);
    var box = Ext.MessageBox.wait(TR('Exporting configuration'), '');
    Ext.Ajax.request( {
      url: '/BS350/setting/exportFile',
      timeout: 120000,
      method: 'GET',
      success: function(res) {
        box.hide();
        var resData = Ext.JSON.decode(res.responseText);
        if (!resData.success) {
          me.setButtonStatus('File', 'export', true, TR(resData.msg), true, false);
        }
        else {
          me.setButtonStatus('File', 'export', true, TR("Export successfull"), false, false);
          window.location.href = '/BS350/fs/downloadR?f=' + encodeURIComponent(resData.msg);
        }
        me.sdMonitoring = true; me.checkSD();
      },
      failure: function(res) {
        box.hide();
        me.setButtonStatus('File', 'export', true, TR("Server error"), true, false);
        me.sdMonitoring = true; me.checkSD();
      }
    });
  },

  selectFileCfg: function () {
    var me = this;
    if (this.frmVersion === '')
    {
      Ext.Ajax.request({
        url: '/BS350/setting/version',
        success: function (res) {
          me.frmVersion = Ext.String.trim(res.responseText);
          me.execSelectFileCfg();
        },
        failure: function(res) {
          me.execSelectFileCfg();
        }
      });
    }
    else
    {
      me.execSelectFileCfg();
    }
  },

  execSelectFileCfg: function() {
    var me = this;
    //me.sdMonitoring = false; Removed from here too early
    var win = Ext.create('Ext.window.Window', {
      title: 'Upload',
      height: 110, width: 400, modal: true,
      layout: 'fit',
      items: {
        xtype: 'form',
        items: [
          {
            xtype: 'filefield',
            margin: 10,
            name: 'cfg',
            itemId: 'cfg',
            fieldLabel: TR('Configuration'),
            labelWidth: 150,
            msgTarget: 'side',
            allowBlank: false,
            anchor: '100%',
            buttonText: TR('Browse...'),
            listeners:{
                afterrender: function(cmp){
                  cmp.fileInputEl.set({
                    accept: '.nxcfg'
                  });
                },
                validitychange: function(cmp, valid) {
                  if (valid === true){
                    try {
                      Ext.ComponentQuery.query("#uploadBtn")[0].handler();
                    }catch(err){}
                  }
                }
            },
            validator: function (value) {
              if (value.match(/\.nxcfg$/g)) {
                if (me.frmVersion !== '')
                {
                  var idx = value.lastIndexOf('\\');
                  if (idx !== -1)
                  {
                    var val = value.substr(idx + 1);
                    if (val.indexOf(me.frmVersion) !== 0)
                    {
                      //return TR('Configuration does not match current firmware version');
                      return (true);
                    }
                  }
                  else if(value.indexOf(me.frmVersion) !== 0)
                  {
                    //return TR('Configuration does not match current firmware version');
                    return (true);
                  }
                }
                return true;
              }
              return TR('Must be a *.nxcfg file');
            }
          }
        ],
        buttons: [
          {
            itemId: 'uploadBtn', text: TR('Upload'),
            handler: function() {
              var form = this.up('form').getForm();
              if(form.isValid()){
                  var cfgComp = Ext.ComponentQuery.query('#cfg');
                  cfgComp[0].hide();
                  var fileName = cfgComp[0].value;
                  var idx = cfgComp[0].value.lastIndexOf('\\');
                  if (idx !== -1)
                  {
                    fileName = cfgComp[0].value.substr(idx + 1);
                  }
                  me.sdMonitoring = false;
                  form.submit({
                      url: '/BS350/setting/getZipFileInfo',
                      timeout: 120000,
                      headers: {},
                      waitMsg: TR('Uploading configuration to get content information'),
                      success: function(form, action) {
                        win.close();
                        me.setButtonStatus('File', 'select', true, fileName, false, false);
                        me.V.selectSDMsg.setText('');
                        me.fileToUpload = action.result.filedata;
                        me.removeList = action.result.rmvList;
                        var data = action.result.data;
                        me.V.filenamesgrid.getStore().loadData(data);
                        me.V.filenamesgrid.getStore().commitChanges();
                        me.V.filenamesgrid.getStore().on('update', me.cfgInfoSelection, me);
                        me.V.filenamesgrid.getStore().setGroupStates();
                        me.V.importSelectedBtn.setDisabled(me.setDisabled(false));
                        me.V.clearSelectedCfgBtn.setDisabled(me.setDisabled(false));
                        me.V.collapseAllCfgBtn.setDisabled(me.setDisabled(false));
                        me.V.expandAllCfgBtn.setDisabled(me.setDisabled(false));
                        me.V.unSelectAllBtn.setDisabled(me.setDisabled(false));
                        me.trgtCfgSrc = 0;
                        setTimeout(function() {me.sdMonitoring = true; me.checkSD();}, 5000);
                        me.V.filenamesgrid.getView().features[0].collapseAll();
                      },
                      failure: function(form, action) {
                        win.close();
                        setTimeout(function() {me.sdMonitoring = true; me.checkSD();}, 5000);
                        var msg = Ext.String.trim(action.result.msg);
                        if (msg !== 'Importer not found' &&
                            msg !== 'Password required' &&
                            msg !== 'No empty password' &&
                            msg !== 'Import file name required' &&
                            msg !== 'Empty import file name given' &&
                            msg !== 'No SD card' &&
                            msg !== 'SD card not mounted' &&
                            msg !== 'Configuration file not found' &&
                            msg !== 'Wrong configuration version' &&
                            msg !== 'File empty' &&
                            msg.indexOf('At least one required file not found in cfg') < 0
                           )
                        {
                          if (msg.indexOf('No or more than one *.cfg file found') > -1)
                          {
                            msg = 'No or more than one *.cfg file found';
                          }
                          else
                          {
                            msg = 'System error';
                          }
                        }
                        me.clearSelectedCfg();
                        me.setButtonStatus('File', 'select', true, Ext.String.format('{0}     -       {1}', fileName,  TR(msg)), true, false);
                        me.trgtCfgSrc = -1;
                      }
                  });
              }
            }
          },
          { itemId: 'cancelBtn', text: TR('Cancel'), handler: function () {this.up('window').close(); } }
        ]
      }
    });
    win.on('show', function(){
      try{
        if (!Ext.isIE10m) {
          win.down('form').down('filefield').fileInputEl.dom.click();
        }
      }catch(err){}
    }, this);
    win.show();
  },

  selectSDCfg: function() {
    var me = this;
    var win = Ext.create('Ext.window.Window', {
      title: TR('Choose a config file from SD Card to get content information'),
      height: 400, width: 800, modal: true,
      layout: 'fit',
      items: {
        xtype: 'form',
          items: [
            {
              xtype: 'dataview', itemId:'dirData',
              autoScroll: true,
              resizable: true,
              height: 300,
              store: {
                fields: ['id', 'text'],
                proxy: {
                  type: 'ajax',
                  url: '/BS350/fs/getcfgs',
                  reader: { type: 'json' }
                }
              },
              tpl: ['<tpl for=".">',
                      '<div class="sdexplorer-item">',
                        '<div class="sdexplorer-leaf-true"></div>',
                        '<h3>{text}</h3>',
                      '</div>',
                    '</tpl>'
              ],
              itemSelector: 'div.sdexplorer-item',
              selectedItemCls: 'sdexplorer-item-selected',
              actions: {selectionchange: 'itemselected'}
            }
          ],
          bbar: [
                {xtype: 'button', itemId: 'btnCancel', text: TR('Cancel'), handler: function() { win.close();}}, '->',
                {xtype: 'button', itemId: 'btnSelect', text: TR('Select'), disabled: true, handler: function() {
                    me.execSelectSDCfg();
                    win.close();
                  }
                }
          ]
      }
    });

    win.on('activate', function (){
      var dirdata = this.down('#dirData');
      var selectBtn = this.down('#btnSelect');
      var path = me.rootPath;
      dirdata.store.load({
        scope: this,
        params: {node: path}
      });
      dirdata.on('selectionchange', function(dataview, items){
        if (items.length > 0) {
          me.sdCfgTarget = items[0];
          selectBtn.setDisabled(me.setDisabled(false));
        }
        else {
          me.sdCfgTarget = null;
          selectBtn.setDisabled(me.setDisabled(false));
        }
      });
    });
    win.show();
  },

  execSelectSDCfg: function() {
    var me = this;
    me.sdMonitoring = false;
    var box = Ext.MessageBox.wait(TR('Getting configuration content information'), '');
    Ext.Ajax.request( {
      url: '/BS350/setting/getZipFileInfoSD',
      timeout: 120000,
      method: 'GET',
      params: {cfgname: me.sdCfgTarget.get('text')},
      success: function(res) {
        box.hide();
        var resData = Ext.JSON.decode(res.responseText);
        if (!resData.success) {
          var msg = Ext.String.trim(resData.msg);
          if (msg !== 'Importer not found' &&
              msg !== 'Password required' &&
              msg !== 'No empty password' &&
              msg !== 'Import file name required' &&
              msg !== 'Empty import file name given' &&
              msg !== 'No SD card' &&
              msg !== 'SD card not mounted' &&
              msg !== 'Configuration file not found' &&
              msg !== 'Wrong configuration version' &&
              msg !== 'File empty' &&
              msg.indexOf('At least one required file not found in cfg') < 0
             )
          {
            if (msg.indexOf('No or more than one *.cfg file found') > -1)
            {
              msg = 'No or more than one *.cfg file found';
            }
            else
            {
              msg = 'System error';
            }
          }
          me.clearSelectedCfg();
          me.setButtonStatus('SD', 'select', true, Ext.String.format('{0}     -       {1}', me.sdCfgTarget.get('text'),  TR(msg)), true, false);
          me.trgtCfgSrc = -2;
          setTimeout(function() {me.sdMonitoring = true; me.checkSD();}, 5000);
        }
        else {
          me.setButtonStatus('File', 'select', true, "", false, false);
          me.setButtonStatus('SD', 'select', true, me.sdCfgTarget.get('text'), false, false);
          me.removeList = resData.rmvList;
          var data = resData.data;
          me.V.filenamesgrid.getStore().loadData(data);
          me.V.filenamesgrid.getStore().commitChanges();
          me.V.filenamesgrid.getStore().on('update', me.cfgInfoSelection, me);
          me.V.filenamesgrid.getStore().setGroupStates();
          me.V.importSelectedBtn.setDisabled(me.setDisabled(false));
          me.V.clearSelectedCfgBtn.setDisabled(me.setDisabled(false));
          me.V.collapseAllCfgBtn.setDisabled(me.setDisabled(false));
          me.V.expandAllCfgBtn.setDisabled(me.setDisabled(false));
          me.V.unSelectAllBtn.setDisabled(me.setDisabled(false));
          me.trgtCfgSrc = 1;
          me.V.filenamesgrid.getView().features[0].collapseAll();
          setTimeout(function() {me.sdMonitoring = true; me.checkSD();}, 5000);
        }
      },
      failure: function(res) {
        box.hide();
        setTimeout(function() {me.sdMonitoring = true; me.checkSD();}, 5000);
        me.trgtCfgSrc = -1;
      }
    });
  },

  getExcludeList: function () {
    var sto = this.V.filenamesgrid.getStore(),
        fileList = this.removeList, records = sto.getUpdatedRecords();
    if (records.length > 0) {
      for (var i = 0; i < records.length; i++) {
        fileList.push(records[i].get('name'));
      }
    }
    return fileList;
  },

    askimportSelCfgFiles: function() {
    var me = this;
    Ext.Msg.show({
      title: TR('Import'),
      msg: TR('Warning all existing configuration files will be overwritten!') + '<br/>' + TR('After importing the tool will be rebooted'),
      buttons: Ext.Msg.OKCANCEL,
      buttonText: {ok: TR("Continue"), cancel: TR("Cancel")},
      fn: function (btn) {
        if (btn === "ok") {
          me.importSelCfgFiles();
        }
      }
    });
  },

  importSelCfgFiles: function () {
    if (this.trgtCfgSrc == 0) {
      this.importSelectedCfg()
    } else if (this.trgtCfgSrc == 1) {
      this.importSelectCfgSD();
    }
  },

  rebootAfterImport: function (secure) {
      if (secure === true) {
          Ext.Ajax.request({
             url: '/BS350/setting/postImportExecution',
             method: 'POST',
             params: { active : true }
          });
          var originNew = "https://" + window.location.hostname;
          setTimeout(function () {window.location = originNew; }, 120000);
      } else {
          Ext.Ajax.request({
             url: '/BS350/setting/postImportExecution',
             method: 'POST',
             params: { active : false }
          });
          var originNew = "http://" + window.location.hostname;
          setTimeout(function () {window.location = originNew; }, 120000);
      }
  },

  importSelectedCfg: function () {
    var me = this;
    this.sdMonitoring = false;
    if (this.fileToUpload !== null) {
      var box = Ext.MessageBox.wait(TR('Uploading configuration'), ''),
          fileList = this.getExcludeList();
      Ext.Ajax.request({
        url: '/BS350/setting/importSelectedFiles',
        timeout: 120000,
        params: {filedata: me.fileToUpload, excludeList: fileList},
        success: function(res) {
          box.hide();
          var resData = Ext.JSON.decode(res.responseText);
          if (!resData.success) {
            var msg = Ext.String.trim(resData.msg);
            if (msg !== 'Importer not found' &&
                msg !== 'Password required' &&
                msg !== 'No empty password' &&
                msg !== 'Import file name required' &&
                msg !== 'Empty import file name given' &&
                msg !== 'No SD card' &&
                msg !== 'SD card not mounted' &&
                msg !== 'Configuration file not found' &&
                msg !== 'Wrong configuration version'
               )
              {
                if (msg.indexOf('No or more than one *.cfg file found') > -1)
                {
                  msg = 'No or more than one *.cfg file found';
                }
                else
                {
                  //a system error
                  msg = 'System error';
                }
              }
              me.setButtonStatus('Selected', 'import', true, TR(msg), true, false);
              setTimeout(function() {me.sdMonitoring = true; me.checkSD();}, 5000);
            } else {
              me.setButtonStatus('Selected', 'import', false, TR("Import successfull"), false, false);
              me.rebootAfterImport(resData.https);
            }
          },
          failure: function(res) {
            box.hide();
            me.setButtonStatus('Selected', 'import', true, TR('Import selected files failed'), true, false);
          }
      });
    }
  },

  importSelectCfgSD: function() {
    var me = this;
    me.sdMonitoring = false;
    var box = Ext.MessageBox.wait(TR('Uploading configuration'), ''),
      fileList = this.getExcludeList();
    Ext.Ajax.request({
      url: '/BS350/setting/importSelectedFilesSD',
      timeout: 120000,
      params: {cfgname: me.sdCfgTarget.get('text'), excludeList: fileList},
        success: function(res) {
          box.hide();
          var resData = Ext.JSON.decode(res.responseText);
          if (!resData.success) {
            var msg = Ext.String.trim(resData.msg);
            if (msg !== 'Importer not found' &&
                msg !== 'Password required' &&
                msg !== 'No empty password' &&
                msg !== 'Import file name required' &&
                msg !== 'Empty import file name given' &&
                msg !== 'No SD card' &&
                msg !== 'SD card not mounted' &&
                msg !== 'Configuration file not found' &&
                msg !== 'Wrong configuration version'
               )
              {
                if (msg.indexOf('No or more than one *.cfg file found') > -1)
                {
                  msg = 'No or more than one *.cfg file found';
                }
                else
                {
                  //a system error
                  msg = 'System error';
                }
              }
              me.setButtonStatus('Selected', 'import', true, TR(msg), true, false);
              setTimeout(function() {me.sdMonitoring = true; me.checkSD();}, 5000);
            } else {
              me.setButtonStatus('Selected', 'import', false, TR("Import successfull"), false, false);
              me.rebootAfterImport(resData.https);
            }
          },
          failure: function(res) {
            box.hide();
            me.setButtonStatus('Selected', 'import', true, TR('Import selected files failed'), true, false);
          }
    });
  },

  cfgInfoSelection: function () {
    var me = this;
    var sto = this.V.filenamesgrid.getStore();
    if (sto.getUpdatedRecords().length > 0) {
      this.V.discardSelectedBtn.setDisabled(me.setDisabled(false));
    } else {
      this.V.discardSelectedBtn.setDisabled(true);
    }
  },

  collapseAllCfg: function () {
    var me = this;
    this.V.filenamesgrid.getView().features[0].collapseAll();
    this.V.expandAllCfgBtn.setDisabled(me.setDisabled(false));
    this.V.collapseAllCfgBtn.setDisabled(true);
  },

  expandAllCfg: function () {
    var v = this.V.filenamesgrid.getView();
    var sto = v.getStore();
    var grps = sto.getGroups(), len = grps.length;
    for (var i=0; i < len; i++){
      if (sto.canExpand(grps[i].name)){
        v.features[0].expand(grps[i].name);
      }
    }
    this.V.expandAllCfgBtn.setDisabled(true);
    this.V.collapseAllCfgBtn.setDisabled(me.setDisabled(false));
  },

  selectAll: function () {
    var sto = this.V.filenamesgrid.getStore();
    sto.rejectChanges();
    sto.setGroupStates();
    this.collapseAllCfg();
    this.V.unSelectAllBtn.setDisabled(me.setDisabled(false));
  },

  unSelectAll: function() {
    var sto = this.V.filenamesgrid.getStore();
    sto.setGroupStates(true);
    this.collapseAllCfg();
    this.V.unSelectAllBtn.setDisabled(true);
  },

  clearSelectedCfg: function () {
    var sto = this.V.filenamesgrid.getStore();
    sto.rejectChanges();
    sto.removeAll();
    sto.commitChanges();
    this.V.clearSelectedCfgBtn.setDisabled(true);
    this.V.importSelectedBtn.setDisabled(true);
    this.V.collapseAllCfgBtn.setDisabled(true);
    this.V.expandAllCfgBtn.setDisabled(true);
    this.V.unSelectAllBtn.setDisabled(true);
    this.setButtonStatus('File', 'select', true, '', false, false);
    this.V.selectSDMsg.setText('');
    this.fileToUpload = null;
    this.removeList = null;
    this.trgtCfgSrc = -1;
  },

  setButtonStatus: function (dev, func, active, text, error, animate) {
    var me = this;
    if (this.view === null) return;
    try {
      var button = this.V[func + dev + 'Btn'],
          label = this.V[func + dev + 'Msg'],
          anim = this.V[func + dev + 'Anim'];

      button.setDisabled(me.setDisabled(!active));
      label.setText(text);
      if (error) label.el.replaceCls('black-label', 'red-label');
      else label.el.replaceCls('red-label', 'black-label');
      anim.setVisible(animate);
    }catch(err){}
  },

  activated: function() {
    this.sdMonitoring = true;
    this.checkSD();
  },

  deactivated: function() {
    this.sdMonitoring = false;
  },

   askclose: function (panel) {
      this.sdMonitoring = false;
      this.clearSelectedCfg();
      return true;
    }
});

