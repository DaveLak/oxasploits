/*global Ext: false, GUI_DATA: false, TR: false, BS350: false */
Ext.define('BS350.controller.GuiSettingsCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['GuiSettingsView', 'BS350.custom.LangCombo'],

  items: [
    { name: 'cbStartView', query: '#prStartView', actions: {change: 'startViewChanged'} },
    { name: 'rdTheme', query: '#prTheme', actions: {change: 'themeChanged'} },
    { name: 'cbLanguage', query: '#prLanguage', actions: {change: 'languageChanged'} },
    { name: 'ckShowWarning', query: '#ckShowWarning', actions: {change: 'laserWarningChanged'} },
    { name: 'ckacknowledge', query: '#ckacknowledge', actions: {change: 'acknowledgeChanged' } },
    { name: 'ckShownokackpopup', query: '#ckShownokackpopup', actions: {change: 'shownokackpopupChanged' } },
    { name: 'ckSrvXml', query: '#ckSrvXml', actions: {change: 'ckSrvXmlChanged' } },
    { name: 'ckShowDataConnectionStatus', query: '#ckShowDataConnectionStatus', actions: {change: 'ckShowDataConnectionStatus' } },
    { name: 'fsLaserWarning', query: '#fsLaserWarning', actions: {} },
    { name: 'ckForceRead', query: '#ckForceRead', actions: {change: 'forceReadChanged'} },
    { name: 'gridMenu', query: '#prMenu' },
    //{ name: 'btnMenuAddMenu', query: '#btnMenuAdd menu', actions: {click: 'addMenuEntry', beforeshow: 'fillMenuEntry'} },
    //{ name: 'btnMenuRemove', query: '#btnMenuRemove', actions: {click: 'removeMenuEntry'} },
    { name: 'btnMenuUp', query: '#btnMenuUp', actions: {click: 'moveupMenuEntry'} },
    { name: 'btnMenuDown', query: '#btnMenuDown', actions: {click: 'movedownMenuEntry'} },
    { name: 'btnSave', query: '#btnSave', actions: {click: 'save'} },
    { name: 'btnDiscard', query: '#btnDiscard', actions: {click: 'reset'} },
    { name: 'btnReset', query: '#btnReset', actions: {click: 'resetToFactory'} }
  ],

  backup: {},
  changes: {},
  currdata: {},
  blockCheck: false,
  forceClose: false,

  initView: function () {
    this.forceClose = false;
    this.loadLanguages();
    if (this.access !== 'w') {
      Ext.each(Ext.ComponentQuery.query('textfield, checkbox, combobox', this.view), function (e) { e.setReadOnly(true); });
      Ext.each(Ext.ComponentQuery.query('toolbar', this.view), function (e) { e.hide(); });
      this.V.gridMenu.plugins[0].on('beforeedit', function (e) { return false; });
      Ext.each(Ext.ComponentQuery.query('togglecolumn', this.V.gridMenu), function (e) {
        e.editable = false;
      });
    }
    this.gridStore = this.V.gridMenu.getStore();
    this.gridStore.on('update', this.checkChanges, this);
  },

  loadLanguages: function () {
    // Detect browser language to use as default
    var me = this;
    me.V.cbLanguage.getStore().load(function () {
      me.getData();
    });
  },
  getNameForState: function (state) {
    var i;
    for (i = 0; i < GUI_DATA.length; i++) {
      var item = GUI_DATA[i];
      if (item.state === state) {
        return item.name;
      }
    }
    return null;
  },

  getData: function () {
    var me = this;
    Ext.Ajax.request({
      url: '/BS350/guisettings/cfg',
      success: function (res) {
        var backup = Ext.JSON.decode(res.responseText);
        Ext.Array.each(backup.view.MainMenu.entries, function (item) {
          item.name = me.getNameForState(item.state);
          if (item.active === undefined) {
            item.active = false;
          }
        });
        me.backup = backup;
        var data = Ext.JSON.decode(res.responseText);
        Ext.Array.each(data.view.MainMenu.entries, function (item) {
          item.name = me.getNameForState(item.state);
          if (item.active === undefined) {
            item.active = false;
          }
        });
        me.currdata = data;
        if (me.backup.view.warning === undefined) {
          me.backup.view.warning = {forceread: false};
          me.currdata.view.warning = {forceread: false};
        }

        me.reset();
      }
    });
  },

  reset: function () {
    this.changes = {};
    var data = this.backup;
    var me = this;
    me.blockCheck = true;
    me.V.cbStartView.setValue(data.global.startview);
    me.V.rdTheme.setValue(data.global.theme);
    me.V.cbLanguage.setValue(data.global.language);
    me.V.ckShowWarning.setValue(data.global.laserwarning);
    me.V.ckacknowledge.setValue(data.global.acknowledge);
    me.V.ckShownokackpopup.setValue(data.global.shownokackpopup);
    me.V.ckShowDataConnectionStatus.setValue(data.global.showdataconnectionstatus);
    //me.V.fsLaserWarning.setVisible(data.global.laserwarning);
    me.V.ckForceRead.setDisabled(!data.global.laserwarning);
    if (!data.global.laserwarning) {
      me.V.ckForceRead.setValue();
    }
    me.V.ckForceRead.setValue(data.view.warning.forceread);

    var menuEntries = data.view.MainMenu.entries;
    var menuStore = me.V.gridMenu.getStore();
    menuStore.removeAll();
    var e;
    var menuStates = Ext.Array.map(menuEntries, function (el) { return el.state; });
    var guiStates = Ext.Array.map(GUI_DATA, function (el) { return el.state; });
    var allStates = Ext.Array.difference(guiStates, menuStates);
    var statesToAdd = [];
    for (i = 0; i < GUI_DATA.length; i++) {
      if (Ext.Array.contains(allStates, GUI_DATA[i].state)) {
        statesToAdd.push(GUI_DATA[i]);
      }
    }
    for (e = 0; e < menuEntries.length; e++) {
      menuStore.add({name: me.getNameForState(menuEntries[e].state), state: menuEntries[e].state, pos: e, active: menuEntries[e].active  });
    }
    var entlen = menuEntries.length;
    for (i = 0; i < statesToAdd.length; i++) {
      statesToAdd[i]['pos'] = entlen++;
      menuStore.add(statesToAdd[i]);
    }

    menuStore.sync();

    me.blockCheck = false;
    me.V.btnSave.setDisabled(true);
    me.V.btnDiscard.setDisabled(true);
  },

  save: function (button, event, eOpts) {
    var me = this;
    /* CR15993 start */
    var currdata = [];
    me.V.gridMenu.getStore().each(function (item) {
      currdata[item.data.pos] = { state: item.get('state'), active: item.get('active') };
    });
    me.currdata.view.MainMenu.entries = currdata;
    /* CR15993 end */
    Ext.Ajax.request({
      url: '/BS350/guisettings/cfg',
      method: 'POST',
      jsonData: me.currdata,
      success: function (res) {
        if (eOpts.callback) {
          eOpts.callback();
        } else {
          me.backup = Ext.JSON.decode(res.responseText);
          me.currdata = Ext.JSON.decode(res.responseText);
          me.reset();
        }
      }
    });
  },

  checkChanges: function () {
    if (this.blockCheck) { return; }
    var isDirty = this.isDirty();
    this.V.btnSave.setDisabled(!isDirty);
    this.V.btnDiscard.setDisabled(!isDirty);
  },

  isDirty: function () {
    var k, keys;

    // Global
    keys = ['language', 'theme', 'startview', 'laserwarning', 'acknowledge', 'showdataconnectionstatus', 'shownokackpopup'];
    for (k in keys) { if (this.backup.global[keys[k]] !== this.currdata.global[keys[k]]) { return true; } }

    // Views
    keys = ['forceread'];
    for (k in keys) { if (this.backup.view.warning[keys[k]] !== this.currdata.view.warning[keys[k]]) { return true; } }

    var store = this.V.gridMenu.getStore();


    if (store.isDirty()) {
      var newItems = [];
      store.each(function (item) { newItems.push({state: item.get('state'), name: null, active: item.get('active') }); });
      this.currdata.view.MainMenu.entries = newItems;
      return true;
    }

    return false;
  },

  startViewChanged: function (combo, value) {
    this.currdata.global.startview = value;
    this.checkChanges();
  },

  themeChanged: function (radio, value) {
    this.currdata.global.theme = value;
    this.checkChanges();
  },

  languageChanged: function (combo, value) {
    this.currdata.global.language = value;
    this.checkChanges();
  },

  /*
  fillMenuEntry: function (menu) {
    var s;
    var item;
    var menuStore = this.V.gridMenu.getStore();
    menu.removeAll();
    for (s = 1; s < GUI_DATA.length; s++) {
      item = GUI_DATA[s];
      if (menuStore.find('state', item.state) < 0) {
        menu.add({text: item.name, state: item.state});
      }
    }
  },

  removeMenuEntry: function () {
    var i;
    var item;
    var store;
    var pos;
    var sel = this.V.gridMenu.getSelectionModel().selected;
    if (sel.length > 0) {
      item = sel.getAt(0);
      store = this.V.gridMenu.getStore();
      pos = item.get('pos');

      for (i = pos + 1; i < store.count(); i++) {
        store.getAt(i).set('pos', i - 1);
      }
      store.remove(item);

      this.checkChanges();
    }
  },*/

  moveupMenuEntry: function () {
    var sel = this.V.gridMenu.getSelectionModel().selected;
    if (sel.length > 0) {
      var item = sel.getAt(0);
      var pos = item.get('pos');
      if (pos > 0) {
        var store = this.V.gridMenu.getStore();
        item.set('pos', item.get('pos') - 1);
        store.getAt(pos - 1).set('pos', pos);
        store.sort('pos', 'ASC');
      }
      this.checkChanges();
    }
  },

  movedownMenuEntry: function () {
    var sel = this.V.gridMenu.getSelectionModel().selected;
    if (sel.length > 0) {
      var item = sel.getAt(0);
      var pos = item.get('pos');
      var store = this.V.gridMenu.getStore();
      if (pos < store.count() - 1) {
        item.set('pos', item.get('pos') + 1);
        store.getAt(pos + 1).set('pos', pos);
        store.sort('pos', 'ASC');
      }
    }
    this.checkChanges();
  },

  askclose: function (panel) {
    var me = this;
    if (!me.forceClose && this.isDirty()) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') { me.save(null, null, { callback: function () { me.forceClose = true; panel.close(); }}); }
          if (btn === 'no') { me.forceClose = true; panel.close(); }
        },
        icon: Ext.Msg.QUESTION
      });
      return false;
    }
    return true;
  },

  resetToFactory: function () {
    var me = this;

    var reset = function () {
      Ext.Ajax.request({
        url: '/BS350/guisettings/resetToFactory',
        success: function (res) {
          me.getData();
        }
      });
    };

    var title = TR('Reset to factory');
    var msg = TR('Do you want to discard the current configuration and reset to factory? All relevant configuration files are to be overwritten.');
    BS350.custom.Utils.showResetToFactoryConfirmation(reset, title, msg);
  },

  laserWarningChanged: function (checkbox, value) {
    //this.V.fsLaserWarning.setVisible(value);
    this.V.ckForceRead.setDisabled(!value);
    if (!value) {
      this.V.ckForceRead.setValue(false);
    }
    this.currdata.global.laserwarning = value;
    this.checkChanges();
  },

  acknowledgeChanged: function (checkbox, value) {
    this.currdata.global.acknowledge = value;
    this.checkChanges();
  },

  shownokackpopupChanged: function (checkbox, value) {
    this.currdata.global.shownokackpopup = value;
    this.checkChanges();
  },

  ckShowDataConnectionStatus: function (checkbox, value) {
    this.currdata.global.showdataconnectionstatus = value;
    this.checkChanges();
  },

  forceReadChanged: function (checkbox, value) {
    this.currdata.view.warning.forceread = value;
    this.checkChanges();
  }
});

