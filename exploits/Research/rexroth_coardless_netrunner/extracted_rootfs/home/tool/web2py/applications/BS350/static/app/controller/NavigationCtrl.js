/*global Ext: false, TR: false */
Ext.define('BS350.controller.NavigationCtrl', {
    extend: 'BS350.custom.ViewController',

    views: ['NavigationView'],

    navStore: null,
    currentPath: '/',

    navDataOrig: {
        home: {
            icon: '',
            name: TR('Home'),
            items: {
                analysis: {
                    icon: 'ico24-analysis', name: TR('Analysis'), id: 'navanalysisid', items: {
                        actualvalues: {
                            icon: 'ico24-actualvalues',
                            name: TR('Actual Values'),
                            id: 'navactualvaluesid',
                            ctrl: 'ActualValuesCtrl'
                        },
                        storedactualvalues: {
                            icon: 'ico24-actualvalues-all',
                            name: TR('Stored Values'),
                            id: 'navstoredactualvaluesid',
                            ctrl: 'StoredActualValuesCtrl'
                        },
                        graph: {icon: 'ico24-graph', name: TR('Graph'), id: 'navgraphid', ctrl: 'GraphCtrl'},
                        storedgraph: {
                            icon: 'ico24-graph-all',
                            name: TR('Stored Graph'),
                            id: 'navstoredgraphid',
                            ctrl: 'StoredGraphCtrl'
                        }
                    }
                },
                mastertool: {
                    icon: 'ico24-masterjob" style="width:24px;height:24px"',
                    name: TR('Mode'),
                    id: 'navmastertoolid',
                    ctrl: 'MasterJobCtrl'
                },
                jobtool: {
                    icon: 'ico24-job" style="width:32px;height:24px"',
                    name: TR('Jobs'),
                    id: 'navjobtoolid',
                    ctrl: 'JobCtrl'
                },
                prgtool: {
                    icon: 'ico24-prgtool" style="width:40px;height:24px"',
                    id: 'navprgtoolid',
                    name: TR('Program Tool'),
                    ctrl: 'PrgToolCtrl'
                },
                settings: {
                    icon: 'ico24-settings',
                    name: TR('Settings'),
                    id: 'navsettingsid',
                    items: {
                        clock: {
                            icon: 'ico24-clock',
                            name: TR('Time & Date'),
                            id: 'navtimeanddateid',
                            ctrl: 'TimeConfigCtrl'
                        },
                        accounts: {
                            icon: 'ico24-accounts', name: TR('Accounts'), id: 'navaccountsid',
                            items: {
                                users: {icon: 'ico24-user', name: TR('Users'), ctrl: 'UsersCtrl'},
                                membership: {icon: 'ico24-membership', name: TR('Membership'), ctrl: 'MembershipCtrl'},
                                groups: {icon: 'ico24-group', name: TR('Groups'), ctrl: 'GroupsCtrl'},
                                permissions: {
                                    icon: 'ico24-permissions',
                                    name: TR('Permissions'),
                                    ctrl: 'PermissionsCtrl'
                                },
                                myaccount: {icon: 'ico24-myaccount', name: TR('My Account'), ctrl: 'MyAccountCtrl'}
                            }
                        },
                        gui: {icon: 'ico24-gui', name: TR('GUI'), ctrl: 'GuiSettingsCtrl'},
                        tooldata: {
                            icon: 'ico24-tooldata',
                            name: TR('Tool Data'),
                            active: false,
                            activeUrl: '/BS350/ressrv/anyDataActive',
                            items: {
                                //CR11599 idcode: {icon: 'ico24-idcode', name: TR('ID Code'), ctrl: 'IDCodeCtrl', active: false, activeUrl: '/BS350/ressrv/IDCodeActive'},
                                database: {icon: 'ico24-database', name: TR('Database'), ctrl: 'DatabaseCtrl'},
                                ftp: {
                                    icon: 'ico24-result-output',
                                    name: TR('Nexo Standard'),
                                    active: false,
                                    activeUrl: '/BS350/ressrv/anyStandardProcessActive',
                                    items: {
                                        ftp: {
                                            icon: 'ico24-result-output',
                                            name: TR('FTP'),
                                            ctrl: 'ResFTPCtrl',
                                            active: false,
                                            activeUrl: '/BS350/ressrv/processActive?proc=FTP'
                                        },
                                        nxsd: {
                                            icon: 'ico24-result-output',
                                            name: TR('NxSd'),
                                            ctrl: 'ResNxsdCtrl',
                                            active: false,
                                            activeUrl: '/BS350/ressrv/processActive?proc=NXSD'
                                        },
                                        http: {
                                            icon: 'ico24-result-output',
                                            name: TR('PQM'),
                                            ctrl: 'ResHttpCtrl',
                                            active: false,
                                            activeUrl: '/BS350/ressrv/processActive?proc=HTTP'
                                        },
                                        nfs: {
                                            icon: 'ico24-result-output',
                                            name: TR('NFS'),
                                            ctrl: 'ResNfsCtrl',
                                            active: false,
                                            activeUrl: '/BS350/ressrv/processActive?proc=NFS'
                                        }
                                    }
                                },

                                openprotocol: {
                                    icon: 'ico24-data',
                                    name: TR('Open Protocol'),
                                    ctrl: 'OpenProtocolCtrl',
                                    active: false,
                                    activeUrl: '/BS350/ressrv/processActive?proc=Open%20protocol'
                                },
                                ipm: {
                                    icon: 'ico24-result-output',
                                    name: TR('IPM'),
                                    ctrl: 'IpmCtrl',
                                    active: false,
                                    activeUrl: '/BS350/ressrv/processActive?proc=IPM'
                                },
                                vwxml: {
                                    icon: 'ico24-data',
                                    name: TR('XML Protocol'),
                                    ctrl: 'VwXmlCtrl',
                                    active: false,
                                    activeUrl: '/BS350/ressrv/processActive?proc=VW-XML'
                                }
                            }
                        },
                        channelview: {icon: 'ico24-channel', name: TR('Channel'), ctrl: 'ChannelCtrl'},
                        firmware: {icon: 'ico24-firmware', name: TR('Firmware'), ctrl: 'FirmwareCtrl'},
                        bmsview: {icon: 'ico24-bms', name: TR('BMS'), ctrl: 'BMSCtrl'},
                        batchcounter: {
                            icon: 'ico24-bcounter',
                            name: TR('Batch Counter'),
                            ctrl: 'BatchCounterCtrl',
                            active: false,
                            activeUrl: '/BS350/bcounter/active'
                        },
                        qcode: {icon: 'ico24-qcode', name: TR('Quality Code'), ctrl: 'QCodeCtrl'},
                        wlan: {
                            icon: 'ico24-wlan',
                            name: TR('Wlan'),
                            ctrl: 'WlanCtrl',
                            active: false,
                            activeUrl: '/BS350/wlan/active'
                        },
                        security: {icon: 'ico24-group', name: TR('Security'), ctrl: 'SecurityCtrl'},
                        signaling: {
                            icon: 'ico24-signaling',
                            name: TR('Signaling'),
                            ctrl: 'SignalingCtrl',
                            active: false,
                            activeUrl: '/BS350/signaling/active'
                        },
                        assignment: {icon: 'ico24-assignment', name: TR('ID Input Assignment'), ctrl: 'AssignmentCtrl'},
                        scanner: {
                            icon: 'ico24-scanner',
                            name: TR('Scanner'),
                            ctrl: 'ScanCtrl',
                            active: false,
                            activeUrl: '/BS350/scanner/active'
                        },
                        fccTestmode: {
                            icon: 'ico24-default',
                            name: TR('FCC Test mode'),
                            ctrl: 'FccTestModeCtrl',
                            active: false,
                            activeUrl: '/BS350/wlan/fccTestModeActive'
                        },
                        resettofactory: {
                            icon: 'ico24-factory',
                            name: TR('resettofactory.Defaults'),
                            ctrl: 'ResetToFactoryCtrl'
                        },
                        backuprestore: {icon: 'ico24-backup-restore', name: TR('Exchange'), ctrl: 'ExchangeCtrl'}
                    }
                },
                diagnosis: {
                    icon: 'ico24-diagnostics', name: TR('Diagnosis'),
                    items: {
                        info: {icon: 'ico24-info', name: TR('System info'), ctrl: 'SysInfoCtrl'},
                        logmessages: {icon: 'ico24-logbuch_rot', name: TR('Log Messages'), ctrl: 'LogMessagesCtrl'},
                        log: {icon: 'ico24-log', name: TR('Log'), ctrl: 'LogCtrl'},
                        readystatus: {icon: 'ico24-tick', name: TR('Ready status'), ctrl: 'ReadyStatusCtrl'},
                        syserrors: {icon: 'ico24-sys-errors', name: TR('System errors'), ctrl: 'SysErrorsCtrl'},
                        servererrors: {
                            icon: 'ico24-server_fehler',
                            name: TR('Server errors'),
                            ctrl: 'ServerErrorsCtrl'
                        },
                        screenshot: {icon: 'ico24-camera', name: TR('Screenshot'), ctrl: 'ScreenshotCtrl'},
                        texteditor: {icon: 'ico24-editor', name: TR('Editor'), ctrl: 'TextEditorCtrl'},
                        network: {
                            icon: 'ico24-red-wlan', name: TR('Network'),
                            items: {
                                wlan: {icon: 'ico24-red-wlan', name: TR('Wlan'), ctrl: 'DiagnosisWlanCtrl'},
                                ping: {icon: 'ico24-red-wlan', name: TR('Ping'), ctrl: 'DiagnosisNetworkPingCtrl'},
                                tcpdump: {
                                    icon: 'ico24-red-wlan',
                                    name: TR('Tcpdump'),
                                    ctrl: 'DiagnosisNetworkTcpdumpCtrl'
                                },
                                find_clients: {
                                    icon: 'ico24-red-wlan',
                                    name: TR('Find clients'),
                                    ctrl: 'DiagnosisNetworkFindClientsCtrl'
                                }
                            }
                        },
                        exportlogs: {icon: 'ico24-export-logs', name: TR('Export Logs'), ctrl: 'ExportLogsCtrl'},
                        service_diagnosis: {
                            icon: 'ico24-diagnostics', name: TR('Service diagnosis'),
                            items: {
                                hardware_test: {icon: 'ico24-diagnostics', name: TR('Hardware Test'), ctrl: 'HardwareCtrl' }
                            }
                        }
                    }
                }
            }
        },
        'favorite': {
            icon: 'ico24-favorite', name: TR('Favorite'), items: {}
        },
        'help': {
            icon: 'ico24-help', name: TR('Help'), items: {
                sdexplorer: {icon: 'ico24-sdcard', name: TR('SD Explorer'), ctrl: 'SDExplorerCtrl'},
                sddocs: {icon: 'ico24-log', name: TR('Documentation'), ctrl: 'SDDocsCtrl'}
            }
        }
    },

    navData: {
        home: {icon: '', name: TR('Home'), items: {}},
        favorite: {icon: '', name: TR('Favorite'), items: {}},
        help: {icon: '', name: TR('Help'), items: {}}
    },

    items: [
        {name: 'listContainer', query: '#lcontainer'},
        {name: 'navGrid', query: '#navGrid', actions: {itemclick: 'entrySelected'}},
        {name: 'homeTab', query: '#homeTab', actions: {click: 'tabSelected'}},
        {name: 'favTab', query: '#favTab', actions: {click: 'tabSelected'}},
        {name: 'helpTab', query: '#helpTab', actions: {click: 'tabSelected'}}
    ],

    init: function () {
        var me = this;
        me.addEvents('showView');
    },

    initView: function () {
        var me = this;
        this.navStore = this.V.navGrid.getStore();

        this.V.listContainer.items.each(function (panel, idx, len) {
            if (idx < len - 1) {
                panel.header.on('click', me.panelClick, me);
            }
            panel.header.setHeight(30);
            panel.header.addCls('nav-menu-header');
        });
        
        this.filterNavData(this.navDataOrig.home.items, this.navData.home.items);
        this.filterNavData(this.navDataOrig.help.items, this.navData.help.items);

        this.setPath('/home');
    },

    filterNavData: function (parentSrc, parentDest) {
        var added = 0;
        for (var i in parentSrc) {
            var item = parentSrc[i];
            if (Ext.Array.indexOf(globControllers, item.ctrl) >= 0) {
                parentDest[i] = parentSrc[i];
                added += 1;
            }
            else {
                var tmp = {icon: item.icon, name: item.name, path: item.path, items: {}};
                if (item.active) {
                    tmp.active = item.active;
                }
                if (item.activeUrl) {
                    tmp.activeUrl = item.activeUrl;
                }
                if (item.id) {
                    tmp.id = item.id;
                }
                if (this.filterNavData(item.items, tmp.items) > 0) {
                    parentDest[i] = tmp;
                    added += 1;
                }
            }
        }
        return added;
    },

    registerCtrl: function (path, id, name, icon, ctrl) {
        var pathSteps = Ext.Array.filter(path.split('/'), function (i) {
            return i.length > 0;
        });
        var currItem = this.navData;
        var lastItem = null;
        var i;
        for (i = 0; i < pathSteps.length; i++) {
            currItem = currItem[pathSteps[i]];
            if (currItem && currItem.items) {
                lastItem = currItem;
                currItem = currItem.items;
            }
            else {
                Ext.MessageBox.alert('Error: NavigationCtrl', 'Invalid path: ' + path);
                return;
            }
        }
        if (lastItem) {
            lastItem.items['id'] = {icon: icon, name: name, ctrl: ctrl};
        }
    },

    /**
     * set the tab which will be showed in navigation menu e.g. setPath('/home')
     * */
    setPath: function (path) {
        var me = this;
        var i;
        var tmpPath = '';
        var pathSteps = Ext.Array.filter(path.split('/'), function (i) {
            return i.length > 0;
        });
        var pathItems = [];
        var ctrlItem = null;
        var currItem = me.navData;
        for (i = 0; i < pathSteps.length; i++) {
            currItem = currItem[pathSteps[i]];
            if (currItem) {
                if (currItem.items) {
                    // Path element
                    pathItems.push(currItem);
                    currItem = currItem.items;
                    tmpPath += '/' + pathSteps[i];
                }
                else {
                    // Controller
                    ctrlItem = currItem;
                }
            }
            else {
                Ext.MessageBox.alert('Error: NavigationCtrl', 'Invalid path: ' + path);
                return;
            }
        }
        me.currentPath = tmpPath;

        var tmpPath2 = '';
        me.V.listContainer.items.each(function (panel, idx, len) {
            if (idx < pathItems.length - 1) {
                currItem = pathItems[idx];
                panel.setVisible(true);
                panel.setTitle(currItem.name);
                tmpPath2 += '/' + pathSteps[idx];
                panel.navPath = tmpPath2;
                panel.setIconCls(currItem.icon);
            }
            else if (idx === len - 1) {
                currItem = pathItems[pathItems.length - 1];
                panel.setTitle(currItem.name);
                panel.setIconCls(currItem.icon);
            }
            else {
                panel.setVisible(false);
            }
        });
        me.showActives(pathItems);

        if (ctrlItem) {
            if (ctrlItem.ctrl === "JobCtrl") {
                this.fireEvent('showView', ctrlItem.name, ctrlItem.ctrl, 'ico24-job', this.currentPath);
            } else if (ctrlItem.ctrl === "PrgToolCtrl") {
                this.fireEvent('showView', ctrlItem.name, ctrlItem.ctrl, 'ico24-prgtool', this.currentPath);
            } else {
                this.fireEvent('showView', ctrlItem.name, ctrlItem.ctrl, ctrlItem.icon, this.currentPath);
            }
        }
        return pathItems;
    },

    showActives: function (pathItems) {
        var me = this;
        if (me.lastPath === undefined || me.lastPath !== me.currentPath) {
            var entries = pathItems[pathItems.length - 1].items;
            me.navStore.removeAll();
            var i;
            me.lastPath = me.currentPath;
            if (entries) {
                for (i in entries) {
                    /**
                     We are checking whether the controller has permissions before adding any entries.
                     */
                    if (entries[i].ctrl === undefined || Ext.Array.contains(globControllers, entries[i].ctrl)) {
                        var item = me.navStore.add(Ext.apply(entries[i], {path: me.currentPath + '/' + i}))[0];
                        if (entries[i].activeUrl) {
                            me.checkActive(item, entries[i].activeUrl);
                        }
                    }
                }
            }
        }
    },

    entrySelected: function (grid, entry) {
        this.setPath(entry.get('path'));
    },

    panelClick: function (header) {
        var panel = header.ownerCt;
        this.setPath(panel.navPath);
    },

    tabSelected: function (tab) {
        this.setPath(tab.path);
    },

    checkActive: function (item, url, optionalSearch) {
        if (optionalSearch) {
          item = this.navStore.findRecord("ctrl", optionalSearch)
          url = item.get('activeUrl')
        }
        Ext.Ajax.request({
            url: url,
            success: function (res) {
                item.set('active', Ext.JSON.decode(res.responseText));
                item.commit();
            }
        });
    },

    updateActives: function () {
        var me = this;
        me.navStore.each(function (item) {
            if (item.get('activeUrl')) {
                me.checkActive(item, item.get('activeUrl'));
            }
        });
    }
});

