import json
import os
import shutil
import subprocess
import syslog
import time
import datetime
import uuid
import WGDBus
import Activity
import fsio
import FilePaths
import notify_activity
import status_mod


VW_XML_FILENAME = '/home/tool/config/vwXmlCfg.json'
VW_XML_DEFAULT = '/home/tool/config/default/vwXmlCfg.json'

if False:
  response = None
  request = None
  session = None
  db = None

status_mod.sessionUserMgr.setLastVisit(session, request)


def parseBool(b):
    if b in ['true']:
        return True
    return False

#"Activated": ""
confMap = {
    "Version": { "name": "pnr", "conv": int},
    "TCP/IP port A (control data)": {'name': "portA", 'conv': int},
    "Keep alive timeout (A)": {"name": "keepAliveTOA", "conv": int},
    "TCP/IP port B (control data)": {"name": "portB", "conv": int},
    "Keep alive timeout (B)": {"name": "keepAliveTOB", "conv": int},
    "Archive server operation": {"name": "masterSPSMode", "conv": parseBool},
    "TCP/IP address B": {"name": "IPPortB", "conv": str},
    "ACK timeout": {"name": "responseTO", "conv": int},
    #"Buffer tightening results locally": "",
    "Delay when retransmitting from local buffer": {"name": "BPortSendRetryTime", "conv": int},
    "Delay when clearing buffered data": {"name": "archiveSendDelay", "conv": int},
    "X/Y": {"name": "kurvenTyp", "conv": int},
    "With graph slow-down": {"name": "kurvenNachlauf", "conv": parseBool},
    #"Reset MID after every RST command": "",
    #"Set sync bit if application result is NOK": "",
    #"Suppress COD10 for absent PLC signals": "",
    #"Use ID code as PRT, PI1 and PI2": "",
    #"Default transfer class": "",
    "OK": {"name": "cio", "conv": int},
    "NOK": {"name": "cno", "conv": int}
}


def _retrieveData(data, res):
    if data.get('myText') in confMap.keys():
        res[confMap.get(data.get('myText')).get('name')] = confMap.get(data.get('myText')).get('conv')(data.get('myValue'))
    if data.get('children'):
        for i in range(len(data.get('children'))):
            _retrieveData(data.get('children')[i], res)


@auth.requires(request.ajax==True, requires_login=True)
def processCfg():
    if request.env.request_method == "GET":
        data = fsio.jsonload(VW_XML_FILENAME)
        return response.json(data)

    if request.env.request_method == "POST":
        #res = {}
        data = json.loads(request.body.read())

        newActive = data.get('active')
        _setVwXmlActivationFlag(newActive)

        #for i in range(len(data.get('vwxml'))):
        #    _retrieveData(data.get('vwxml')[i], res)

        #fsio.jsondump_sorted(VW_XML_DEF_FILENAME, res)

        fsio.jsondump(VW_XML_FILENAME, data)
        notify_activity.configChanged(VW_XML_FILENAME, Activity.VW_XML_CHANGED, session=session)
        return response.json(data)


def _genVwXmlFileName(number):
  while len(str(number)) < 3:
    number = "0" + str(number)
  name = 'vwXml'

  ts = time.time()
  dateStamp = datetime.datetime.fromtimestamp(ts).strftime('%Y_%m_%d')
  return dateStamp + '_' + name.strip() + '.vwXml'


@auth.requires(request.ajax==True, requires_login=True)
def exportVwXml():
    res = {'success': False, 'msg': 'Unknown error'}
    fsio.fsLock.acquire()
    try:
        expfname = _genVwXmlFileName(request.vars.num)
        targetPrg = "/home/tool/config/vwXmlCfg.json"
        res = {'success': True, 'msg': '/tmp/' + expfname}
        pwd = FilePaths.generatePwd()
        syslog.syslog(syslog.LOG_INFO, "START vw_xml.exportVwXml.subprocess to " + expfname + " at " + time.asctime())
        p = subprocess.Popen(['{0}/vw_xml_exporter.sh'.format(FilePaths.SH_TOOL_PATH), pwd, expfname, targetPrg, '/tmp'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (stdout, stderr) = p.communicate()
        syslog.syslog(syslog.LOG_INFO, "DONE vw_xml.exportVwXml.subprocess to " + expfname + " at " + time.asctime())
        syslog.syslog(syslog.LOG_INFO, "RESULT vw_xml.exportVwXml.subprocess to stdout: " + str(stdout))
        syslog.syslog(syslog.LOG_INFO, "RESULT vw_xml.exportVwXml.subprocess to stderr: " + str(stderr))
        if p.returncode != 0:
            # Failure
            res['success'] = False
            res['msg'] = str(stderr)

        notify_activity.configChanged(VW_XML_FILENAME, Activity.VW_XML_CHANGED, session=session)
    except Exception, e:
        res['success'] = False
        res['msg'] = str(e)

    finally:
        fsio.fsLock.release()

    return response.json(res)


@auth.requires_login()
def importVwXml():
    res = {'success': True, 'msg': ''}
    fsio.fsLock.acquire()
    try:
        UUID = uuid.uuid4()
        with open('/tmp/{0}.vwXml'.format(UUID.hex), 'w') as f:
            f.write(request.vars.cfg.value)

        pwd = FilePaths.generatePwd()
        p = subprocess.Popen(['{0}/vw_xml_importer.sh'.format(FilePaths.SH_TOOL_PATH), pwd, '{0}.vwXml'.format(UUID.hex), '/tmp/'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (stdout, stderr) = p.communicate()
        if p.returncode != 0:
            # Failure
            res['success'] = False
            res['msg'] = str(stderr)
        if res['success']:
            notify_activity.configChanged(VW_XML_FILENAME, Activity.VW_XML_CHANGED, session=session)
    except Exception, e:
        res['success'] = False
        res['msg'] = str(e)
    finally:
        fsio.fsLock.release()

    return response.json(res)


def _setVwXmlActivationFlag(newActive):
  resSrv = fsio.jsonload(FilePaths.RESSRV_FILENAME)
  for i in range(len(resSrv.get('proc'))):
    if resSrv.get('proc')[i].get('name') == "VW-XML":
      if newActive != resSrv.get('proc')[i].get('active'):
        resSrv.get('proc')[i]['active'] = newActive
        fsio.jsondump(FilePaths.RESSRV_FILENAME, resSrv)
        notify_activity.configChanged(FilePaths.RESSRV_FILENAME, Activity.RESSRV_CHANGED, session=session)


@auth.requires(request.ajax==True, requires_login=True)
def resetToFactory():
    fsio.shcopyfile(VW_XML_DEFAULT, VW_XML_FILENAME)
    #fsio.shcopyfile(VW_XML_DEF_DEFAULT, VW_XML_DEF_FILENAME)
    newActive = False
    _setVwXmlActivationFlag(newActive)
    notify_activity.configChanged(VW_XML_FILENAME, Activity.VW_XML_CHANGED, session=session)
    return ''
