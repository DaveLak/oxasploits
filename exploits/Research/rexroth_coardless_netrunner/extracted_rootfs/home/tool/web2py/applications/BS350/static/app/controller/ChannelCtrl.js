/*global Ext: false, TR: false */
Ext.define('BS350.controller.ChannelCtrl',
  {
    extend: 'BS350.custom.ViewController',

    views: ['ChannelView'],
    stores: ['ChannelStore'],

    items: [
      {name: 'channelGrid', query: '#channelGrid'},
      {name: 'confPanel', query: '#confPanel'},
      { name: 'btnSave', query: '#btnSave', actions: {click: 'save'} },
      { name: 'btnDiscard', query: '#btnDiscard', actions: {click: 'discard'} }
    ],

    backup: {},
    changes: {},
    currdata: {},
    blockCheck: false,
    forceClose: false,
    update: false,
    loadMask: null,

    init: function(application) {
      application.getController('HeaderCtrl').on('cfgChanged', this.reloadCfg, this);
    },

    initView: function () {
      if (this.access !== 'w') {
        this.V.channelGrid.getPlugin('editing').on('beforeedit', function () { return false; });
        this.V.confPanel.getDockedItems()[1].hide();
      }
      this.forceClose = false;
      this.store = this.V.channelGrid.getStore();
      this.V.channelGrid.getStore().on('update', this.checkChanges, this);
      this.V.channelGrid.getView().on('destroy', this.refreshView, this);

      this.view.getEl().mask(TR("Loading..."));
      this.reset();
    },

    filterConfiguration: function () {
      this.V.channelGrid.getStore().filterBy(function (rec) {
        if (rec.get('group') === 'ToolLed') {
          return false;
        }
        if (rec.get('name') === 'DrehzahlMinReduziert' || rec.get('name') === 'MomentMaxReduziert') {
            return false;
        }
        return true;
      });
    },

    refreshView: function(ev) {
      this.store.removeAll();
    },

    discard: function () {
      this.view.getEl().mask(TR("Discarding..."));
      this.reset();
    },

    reset: function (callback) {
      var me = this;

      Ext.Ajax.request({
        url: '/BS350/channel/read',
        success: function (res) {
          var data = Ext.JSON.decode(res.responseText);
          me.store.removeAll();

          me.store.loadRawData(data);
          me.store.sync();

          me.filterConfiguration();
          me.V.channelGrid.getView().refresh();
          me.view.getEl().unmask();
        },
        failure: function () {
          me.view.getEl().unmask();
          Ext.Msg.alert(TR('Failure', TR('Ajax communication failed')));
        }

      });


      this.V.btnSave.setDisabled(true);
      this.V.btnDiscard.setDisabled(true);
    },

    save: function (button, event, eOpts) {
      this.view.getEl().mask(TR("Saving..."));
      this.update = true;

      // Remove one of the in firefox flickering methods vgl. CR11769:
      // this.V.channelGrid.getStore().clearFilter();
      var me = this;
      var mfuDatumDirty = false;

      Ext.each(this.V.channelGrid.store.data.items, function (item) {
        // only functional if key Faktor before key Datum in collection:
        if (item.data.group === "Mfu" && item.data.name === "MfuFaktor") {
          if (item.dirty) {
            mfuDatumDirty = true;
          }
        }
        if (item.data.group === "Mfu" && item.data.name === "Datum") {
          if (mfuDatumDirty) {
            item.setDirty(true);
          }
        }
      });

      if (eOpts.callback === undefined) {
        eOpts.callback = function () {
          me.updateHeaderKanalname();
          me.getTorqueUnitFactors();
        };
      }

      me.saveData(eOpts);

      this.V.btnSave.setDisabled(true);
      this.V.btnDiscard.setDisabled(true);
    },

    checkChanges: function () {
      var isDirty = this.isDirty();
      this.V.btnSave.setDisabled(!isDirty);
      this.V.btnDiscard.setDisabled(!isDirty);
    },

    isDirty: function () {
      return this.V.channelGrid.getStore().isDirty();
    },

    updateHeaderKanalname: function () {
      var headerCtrl = APP.getController('HeaderCtrl');
      headerCtrl.updateKanalname();
    },
    getTorqueUnitFactorsSync: function (callback) {
      Ext.Ajax.request({
        url: "/BS350/channel/torque_unit_factors",
        async: false,
        success: function (res) {
          var resData = Ext.JSON.decode(res.responseText);
          APP.torqueUnitFactors = resData;
        },
        failure: function (res) {
          Ext.Msg.alert(TR("Error"), TR("Could not load torque unit default value"));
        },
        callback: function (options, success, response) {
          if (success) {
            if (callback !== undefined) {
              callback();
            }
          }
        }
      });
    },
    getTorqueUnitFactors: function (callback) {
      Ext.Ajax.request({
        url: "/BS350/channel/torque_unit_factors",
        success: function (res) {
          var resData = Ext.JSON.decode(res.responseText);
          APP.torqueUnitFactors = resData;
        },
        failure: function (res) {
          Ext.Msg.alert(TR("Error"), TR("Could not load torque unit default value"));
        },
        callback: function (options, success, response) {
          if (success) {
            if (callback !== undefined) {
              callback();
            }
          }
        }
      });
    },
    reloadCfg: function () {
      var me = this;
      if (!this.view){return;}
      if (this.update) {
        me.reset();
        this.update = false;
      }
    },

    saveData: function(eOpts) {
      var me = this;
      var data = [];
      me.store.each(function (rec) {
        data.push(rec.data);
      });

      Ext.Ajax.request({
        url: '/BS350/channel/update',
        params: Ext.JSON.encode(data),
        success: function (res) {
          if(eOpts.callback !== undefined){
            eOpts.callback();
          }
        },
        failure: function() {
          me.view.getEl().unmask();
          Ext.Msg.alert(TR('Failure', TR('Ajax communication failed')));
        }
      });
    },

    askclose: function (panel) {
      var me = this;
      if (!me.forceClose && this.isDirty()) {
        Ext.Msg.show({
          title: TR('Save changes?'),
          msg: TR('Do you want to save the changes?'),
          buttons: Ext.Msg.YESNOCANCEL,
          fn: function (btn) {
            if (btn === 'yes') { me.save(null, null, { callback: function () {panel.close(); me.updateHeaderKanalname(); me.getTorqueUnitFactors(); }}); }
            if (btn === 'no') { me.forceClose = true; panel.close(); }
          },
          icon: Ext.Msg.QUESTION
        });
        return false;
      }
      return true;
    }
  });

