/*global Ext: false, TR: false */
Ext.define('BS350.controller.MasterJobStepCtrl', {
  extend: 'BS350.custom.ViewController',
  models: ['MasterJobTask'],
  views: ['MasterJobStepView'],

  items: [
    { name: 'btnOk', query: '#btnOK', actions: {click: 'setAndClose'}},
    { name: 'btnCancel', query: '#btnCancel', actions: {click: 'close'}},

    { name: 'formPanel1', query: '#formPanel1', actions: {change: 'updateButtons', dirtychange: 'updateButtons', validitychange: 'updateButtons' } },
    { name: 'masterTree', query: '#masterTree'}
  ],

  initView: function () {
    var me = this,
        panel = this.V.formPanel1,
        treePanel = this.V.masterTree,
        treeStore = treePanel.getStore(),
        stepData = this.step.getData(),
        stepDataCopy = Ext.decode(Ext.encode(stepData));

    this.invalid = false;

    if (me.access !== 'w') {
      me.V.btnOk.hide();
      me.recursiveReadonly(stepDataCopy);
    }

    if(me.step.get('Type') === SELECTION_STEP){
      me.addSelectiveColumns(stepDataCopy)
    }

    if(me.step.get('Type') === START_STEP){
      if (this.selectedColumn == 0) {
        // Set Prg/Job selection to readonly in default column 0
        var opmode = me.searchTree(stepDataCopy, "Operation Mode Settings");
        if (opmode) {
          // Set trigger node invisible in default column
          me.searchTree(opmode, "Trigger").invisible = true;
          // Set prg/job selection readonly and false in default column
          var prg = me.searchTree(opmode, "Allow Prg selection")
          var job = me.searchTree(opmode, "Allow Job selection")
          prg.myValue = "false";
          prg.readonly = true;
          job.myValue = "false";
          job.readonly = true;
        }
      }

      me.sourceSwitch(stepDataCopy);
      treeStore.loadNewData(stepDataCopy);
    }
    else if(me.step.get('Type') === SCAN_STEP){

      if (this.selectedColumn > 0) {
        var extctrl = me.searchTree(stepDataCopy, "External job control");
        if (extctrl) {
          extctrl.myValue = "false";
          extctrl.readonly = true;
        }
      }

      me.targetMaskingSourceSwitch(stepDataCopy);
      me.filterBarcodes(stepDataCopy);
    }
    else{
      treeStore.loadNewData(stepDataCopy);
    }

    // Window title
    this.view.setTitle(TR('Mode') + ' ' + TR('Step') + ':' + this.step.getData().Name);
  },

  addSelectiveColumns: function(data) {
    var array = [], i;

    for (i = 0; i < this.columnCnt; i++)
    {
      array.push([i, MASTER_BRANCH_FIELDS[i]]);
    }

    var obj = this.searchTree(data, "Select active column");
    obj.choice = array;
  },


  sourceSwitch: function(guiData){
    var me = this, source, sourceInt, delID;

    source = me.searchTree(guiData, "Source Selection Start");
    delID = me.searchTree(guiData, "Delete ID code after start");

    sourceInt = parseInt(source.myValue, 10);
    switch (sourceInt)
    {
      case 0:
        delID.myValue = false;
        delID.invisible = true;
        break;
      case 1:
        delID.myValue = false;
        delID.invisible = true;
        break;
      case 2:
        delID.invisible = false;
        break;
      case 3:
        delID.invisible = false;
        break;
      case 4:
        delID.myValue = false;
        delID.invisible = true;
        break;
      case 5:
        delID.invisible = false;
        break;
    }

  },

  targetMaskingSourceSwitch: function(guiData){
    var me = this, target, source, i, targetObj, sourceObj;
    var idInputOptions, sourceSelect, delID, scanOptions, barcodes;

    sourceSelect =  me.searchTree(guiData, "Source Selection Start");
    delID =  me.searchTree(guiData, "Delete ID code after start");

    targetObj = me.searchTree(guiData, "Choose target for ID Input");
    sourceObj = me.searchTree(guiData, "Source Selection");

    idInputOptions = me.searchTree(guiData, "ID Input Options");

    scanOptions = me.searchTree(guiData, "Scan Options");
    barcodes = me.searchTree(guiData, "Barcodes");

    var startStep = me.searchStep(this.step.store.data.items, "Start");

    sourceSelect.myValue = me.searchTree(startStep.getData(), "Source Selection Start").myValue;
    delID.myValue = me.searchTree(startStep.getData(), "Delete ID code after start").myValue;

    switch (parseInt(sourceSelect.myValue, 10))
    {
      case 0:
        delID.invisible = true;
        break;
      case 1:
        delID.invisible = true;
        break;
      case 2:
        delID.invisible = false;
        break;
      case 3:
        delID.invisible = false;
        break;
      case 4:
        delID.invisible = true;
        break;
      case 5:
        delID.invisible = false;
        break;
    }

    target = parseInt(targetObj.myValue, 10);
    source = parseInt(sourceObj.myValue, 10);

    switch ( target ){
      case 1:
        idInputOptions.children[2].myText = "Masking ID Code";
        idInputOptions.children[2].invisible = false;
        idInputOptions.children[3].invisible = true;
        me.V.masterTree.id_range = idInputOptions.children[2].myValue;
        me.V.masterTree.range = idInputOptions.children[3].myValue;

        //External job control
        idInputOptions.children[5].invisible = false;
        break;
      case 4:
        idInputOptions.children[2].myText = "Masking ID Input Assignment";
        idInputOptions.children[3].myText = "Masking ID Input Assignment";
        me.V.masterTree.id_range = idInputOptions.children[2].myValue;
        me.V.masterTree.range = idInputOptions.children[3].myValue;
        idInputOptions.children[2].invisible = true;
        idInputOptions.children[3].invisible = false;

        //External job control
        idInputOptions.children[5].invisible = true;
        break;
      case 5:
        idInputOptions.children[2].myText = "Masking ID Code";
        idInputOptions.children[3].myText = "Masking ID Input Assignment";
        me.V.masterTree.id_range = idInputOptions.children[2].myValue;
        me.V.masterTree.range = idInputOptions.children[3].myValue;
        idInputOptions.children[2].invisible = false;
        idInputOptions.children[3].invisible = false;

        //External job control
        idInputOptions.children[5].invisible = true;
        break;
      default:
        idInputOptions.children[2].myText = "Masking ID Code";
        me.V.masterTree.id_range = idInputOptions.children[2].myValue;
        me.V.masterTree.range = idInputOptions.children[3].myValue;
        idInputOptions.children[2].invisible = false;
        idInputOptions.children[3].invisible = true;
    }

    switch ( source )
    {
      case 0:
        scanOptions.invisible = false;
        for( i= 0; i <  scanOptions.children.length; i++){
          scanOptions.children[i].invisible = false;
        }

        for( i= 0; i <  barcodes.children.length; i++){
          barcodes.children[i].invisible = false;
        }
        break;
      case 1:
        scanOptions.invisible = true;
        for( i= 0; i <  scanOptions.children.length; i++){
          scanOptions.children[i].invisible = true;
        }

        scanOptions.children[2].invisible = true;
        for( i= 0; i <  barcodes.children.length; i++){
          barcodes.children[i].invisible = true;
        }
        break;
      default:
        scanOptions.invisible = false;
        for( i= 0; i <  scanOptions.children.length; i++){
          scanOptions.children[i].invisible = false;
        }

        scanOptions.children[2].invisible = false;
        for( i= 0; i <  barcodes.children.length; i++){
          barcodes.children[i].invisible = false;
        }
        break;
    }

  },


  searchStep: function (object, searchObject){
    var retNode;
    Ext.Array.each(object, function(node){
      if(node.get('Name') === searchObject)
      {
        retNode =  node;
        return;
      }
    });
    return retNode;
  },

  recursiveReadonly: function (object){
    var me = this;
    if(object)
      object.readonly = true;

    if (object.children){
      for(var i=0; i < object.children.length; i++){
        me.recursiveReadonly(object.children[i]);
      }
    }
  },


  searchTree: function (object, searchObject){
    var me = this;
    if(object.myText === searchObject){
      return object;
    }
    if (object.children){
      var result = null, i;
      for(i=0; result === null && i < object.children.length; i++){
        result = me.searchTree(object.children[i], searchObject);
      }
      return result;
    }
    return null;
  },

  filterBarcodes: function(guiData){
    var me = this, data, jsonData;
    Ext.Ajax.request({
      url: '/BS350/scanner/processCfg',
      success: function (res) {
        jsonData = Ext.JSON.decode(res.responseText);
        if (jsonData.scanner[0].children[0] !== undefined) {
          data = Ext.JSON.decode(res.responseText).scanner[0].children[0].children;

          var barcodes = me.searchTree(guiData, "Barcodes").children, i;

          for (i = 0; i < data.length; i++) {
            if (data[i].myValue === "false") {
              if(barcodes) {
                barcodes[i].invisible = true;
                barcodes[i].myValue = false;
                barcodes[i].readonly = true;
              }
            }
          }
          me.V.masterTree.getStore().loadNewData(guiData);
        }
        else{
          //console.log("Problems in ScanCfg.json")
        }
      }
    });
  },

  copyFromToStep: function(stepData, guiData){
    if(guiData.myValue !== undefined){
      guiData.myValue = stepData.myValue.toString();
    }
    //if(stepData.expanded !== undefined){
    //  guiData.expanded = stepData.expanded;
    //}

    if(stepData.readonly !== undefined){
      guiData.readonly = stepData.readonly;
    }

    if(stepData.children !== undefined){
      for(var i=0; i< stepData.children.length; i++)
        this.copyFromToStep(stepData.children[i], guiData.children[i])
    }
  },

  setAndClose: function () {

    var jobCtrl = APP.getController('MasterJobCtrl');
    var me = this;
    me.view.down('#masterTree').getPlugin().completeEdit();
    var stepCfg = [];
    var tree = this.V.masterTree;
    var startNode = tree.getRootNode();
    var stepData = this.step.getData();

    startNode.cascadeBy(function (currNode) {
      tree.fireEvent('deselect', this, currNode);
    });

    var stepDataCopy = Ext.decode(Ext.encode(stepData));
    var guiDataEdited = me.serialize(startNode);

    if (me.step.get('Type') == SELECTION_STEP) {
      var opMode = me.searchTree(guiDataEdited, "Select active column");
      jobCtrl.activeColumn = parseInt(opMode.myValue);
    }

    me.copyFromToStep(guiDataEdited, stepDataCopy);

    if(tree.getStore().isDirty()){
      this.step.set(stepDataCopy);
      jobCtrl.storeChanged = true;
      jobCtrl.jobStoreChanged();
    }

    //this.step.data.Name = startNode.findChild('myText', 'Name', true).get('myValue');
    Ext.ComponentQuery.query('#myMasterJobview')[0].view.refresh();

    this.view.close();
  },


  serialize: function(rootNode) {
    var me = this;
    var result = Ext.data.writer.Json.prototype.getRecordData(rootNode),
        childNodes = rootNode.childNodes,
        len = childNodes.length,
        children, i;

    if (len > 0) {
      children = [];
      for (i = 0; i < len; i++) {
        children.push(me.serialize(childNodes[i]));
      }
      result.children = children;
    }
    return result;
  },

  close: function (button, value) {
    this.view.close();
  },

  updateButtons: function () {
    var formPanelValid = this.V.formPanel1.getForm().isValid();
    if (!formPanelValid || this.invalid){
      this.V.btnOk.setDisabled(true);
    } else {
      this.V.btnOk.setDisabled(false);
    }
  }

});
