/*global Ext: false, BS350: false, TR: false */

/**
 * Created by kai on 12.08.14.
 */

Ext.define('BS350.controller.SignalingCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['SignalingView'],
  stores: ['SignalingStore'],

  items: [
        { name: 'activeFlag', query: '#prActive', actions: {change: 'updateButtons'} },
        { name: 'signalingForm', query: '#signalingForm', actions: {validitychange: 'updateButtons'}},
        { name: 'grid', query: '#signalinggrid', actions: { change: 'updateButtons'} },
        { name: 'saveBtn', query: '#btnSave', actions: {click: 'save'}},
        { name: 'discardBtn', query: '#btnDiscard', actions: {click: 'discardData'} },
        { name: 'importBtn', query: '#btnImport', actions: {click: 'importSignaling'}},
        { name: 'exportBtn', query: '#btnExport', actions: {click: 'exportSignaling'}},
        { name: 'resetBtn', query: '#btnReset', actions: {click: 'resetToFactory'} }
      ],
      forceClose: false,

      data: {},

      initView: function () {
        var me = this;
        this.forceClose = false;
        if (me.access !== 'w') {
          me.V.activeFlag.setReadOnly(true);
          Ext.each(Ext.ComponentQuery.query('checkbox', 'combobox', this.view), function (e) {
            e.setReadOnly(true);
          });
          this.view.getDockedItems()[0].hide();
          this.V.grid.on('beforeedit', me.checkReadonly, me.V.grid);
          this.forceClose = true;
        }

        me.store = me.V.grid.getStore();
        me.store.on('update', me.storeChanged, me);

        this.updateData();

        me.signalingData = {};
      },

      checkReadonly: function (sm, record) {
        if (record.record.get('readonly')) {
          return false;
        }
      },

    save: function (button, event, eOpts) {
        var me = this;
        var signalingCfg = [];
        var rootNode = me.store.getRootNode();
        var signaling = signalingData.signaling[0];
        var guiDataEdited = me.serialize(rootNode);
        me.view.getEl().mask(TR("Saving..."));
        me.copyFromToStep(guiDataEdited, signaling);
        signalingCfg.push(signaling);
        var settings = { active: me.V.activeFlag.getValue(),  signaling: signalingCfg};
        Ext.Ajax.request(
            {
              url: '/BS350/signaling/processCfg',
              method: 'POST',
              params: Ext.JSON.encode(settings),
              success: function (res) {
                me.getController('NavigationCtrl').updateActives();
                if (eOpts.callback) { eOpts.callback(); } else { me.updateData(); }
              }
            }
        );
        signalingdata = {};
        me.V.saveBtn.setDisabled(true);
        me.V.discardBtn.setDisabled(true);
      },

      discardData: function () {
        var me = this;
        me.view.getEl().mask(TR("Discarding..."));
        this.updateData();
      },

      updateData: function () {
        var me = this;
        Ext.Ajax.request({
          url: '/BS350/signaling/processCfg',
          success: function (res) {

            var data = Ext.JSON.decode(res.responseText);
            signalingData = Ext.JSON.decode(res.responseText);

            me.V.activeFlag.setValue(data.active);
            me.V.activeFlag.initValue();

            me.store.loadNewData(data.signaling[0]);
            me.view.getEl().unmask();
            me.V.saveBtn.setDisabled(true);
            me.V.discardBtn.setDisabled(true);
            me.getController('NavigationCtrl').updateActives();
            me.view.showVerticalLine();
            if (me.access !== 'w') {
              me.store.getRootNode().cascadeBy(function (e) {
                e.set('readonly', true);
              });
            }
          }
        });
      },

      copyFromToStep: function(stepData, guiData){
        if(stepData.myValue !== undefined ){
          guiData.myValue = stepData.myValue;
        }
        if(stepData.expanded !== undefined){
          guiData.expanded = stepData.expanded;
        }

        if(stepData.children !== undefined){
          for(var i=0; i< stepData.children.length; i++)
            this.copyFromToStep(stepData.children[i], guiData.children[i])
        }
      },

      serialize: function(rootNode) {
        var me = this;
        var result = Ext.data.writer.Json.prototype.getRecordData(rootNode),
            childNodes = rootNode.childNodes,
            len = childNodes.length,
            children, i;

        if (len > 0) {
          children = [];
          for (i = 0; i < len; i++) {
            children.push(me.serialize(childNodes[i]));
          }
          result.children = children;
        }
        return result;
      },

      storeChanged: function () {
        this.updateButtons();
      },

      updateButtons: function () {

        var dirty = this.store.isDirty() || this.V.activeFlag.isDirty();

        this.V.saveBtn.setDisabled(!dirty);
        this.V.discardBtn.setDisabled(!dirty);
        this.V.importBtn.setDisabled(false);
        this.V.exportBtn.setDisabled(false);
      },

      importSignaling: function () {
        var me = this,
            uploadWin = Ext.create('Ext.window.Window', {
              title: TR('Import'),
              layout: 'fit',
              modal : true,
              width : 400,
              height: 120,
              closable: false,
              items: [
                {
                  xtype: 'form',
                  itemId : 'uploadForm',
                  bodyPadding : 15,
                  hidden: false,

                  layout : 'anchor',
                  defaults: { anchor: '100%' },
                  items : [{
                    xtype: 'filefield',
                    name: 'fileupload',
                    itemId: 'fileupload',
                    fieldLabel: TR('Import LED Configuration'),
                    labelWidth: 100,
                    msgTarget: 'side',
                    allowBlank: false,
                    toignore: false,
                    buttonText: TR('Browse...'),
                    listeners:{
                        afterrender: function(cmp){
                          cmp.fileInputEl.set({
                            accept: '.nxled'
                          });
                        },
                        validitychange: function(cmp, valid) {
                          if (valid === true){
                            try {
                              Ext.ComponentQuery.query("#uploadBtn")[0].handler();
                            }catch(err){}
                          }
                        }
                    },
                    validator: function (value) {
                      if (value.match(/\.nxled$/g)) {
                        Ext.ComponentQuery.query("#uploadBtn")[0].setDisabled(false);
                        return true;
                      }
                      Ext.ComponentQuery.query("#uploadBtn")[0].setDisabled(true);
                      return TR('File must be a *.nxled Job');
                    }
                  }]
                }
              ],
              buttons: [
                { itemId: 'uploadBtn', text: TR('Upload'),
                  handler: function () {

                    var win = this.up('window'),
                        form = win.down('form').getForm(),
                        submitForm = function () {
                          if (form.isValid()) {
                            form.submit({
                              url: '/BS350/signaling/importSignalingFile',
                              //params: { job: currSlot },
                              waitMsg: TR('Importing LED...'),
                              success: function (form, action) {
                                me.updateData();
                                win.close();
                              },
                              failure: function (form, action) {
                                switch (action.failureType) {
                                  case Ext.form.action.Action.CLIENT_INVALID:
                                    Ext.Msg.alert(TR('Failure'), TR('Form fields may not be submitted with invalid values'));
                                    break;
                                  case Ext.form.action.Action.CONNECT_FAILURE:
                                    Ext.Msg.alert(TR('Failure', TR('Ajax communication failed')));
                                    break;
                                  case Ext.form.action.Action.SERVER_INVALID:
                                    Ext.Msg.alert(TR('Failure'), TR(action.result.msg));
                                    break;
                                  default:
                                    Ext.Msg.alert(TR('Failure'), TR(action.result.msg));
                                    break;
                                }
                                win.close();
                              }
                            });
                          }
                        };
                        submitForm();
                  }
                },
                { itemId: 'cancelBtn', text: TR('Cancel'), handler: function () {this.up('window').close(); } }
              ]
            });
        uploadWin.on('show', function(){
          try{
            if (!Ext.isIE10m) {
              uploadWin.down('form').down('filefield').fileInputEl.dom.click();
            }
          }catch(err){}
        }, this);
        uploadWin.show();
      },

      exportSignaling: function () {
        var me = this;
        me.view.getEl().mask(TR("Exporting..."));

        Ext.Ajax.request({
          url: '/BS350/signaling/exportSignalingFile',
          method: 'GET',
          success: function (res) {
            var resData = Ext.JSON.decode(res.responseText);
            if (!resData.success) {
              Ext.Msg.alert('Export failed:', resData.msg);
            } else {
              window.location.href = '/BS350/fs/downloadR?f=' + encodeURIComponent(resData.msg);
            }
            me.view.getEl().unmask();
          },
          failure: function (res) {
            me.view.getEl().unmask();
            Ext.Msg.alert('Export failure:', res);
          }
        });
      },

      resetToFactory: function(){
        var me = this;
        var reset = function () {
          Ext.Ajax.request({
            url: '/BS350/signaling/resetToFactory',
            success: function (res) {
              me.updateData();
            }
          });
        };
        me.V.saveBtn.setDisabled(true);
        me.V.discardBtn.setDisabled(true);

        var title = TR('Reset to factory');
        var msg = TR('Do you want to discard the current configuration and reset to factory? All relevant configuration files are to be overwritten.');
        BS350.custom.Utils.showResetToFactoryConfirmation(reset, title, msg);
      },

      askclose: function (panel) {
        var me = this;
        if ((me.store.isDirty() || this.V.activeFlag.isDirty()) && !me.forceClose) {
          Ext.Msg.show({
            title: TR('Save changes?'),
            msg: TR('Do you want to save the changes?'),
            buttons: Ext.Msg.YESNOCANCEL,
            fn: function (btn) {
              if (btn === 'yes') { me.save(null, null, {callback: function () {me.forceClose = true; panel.close(); }}); }
              if (btn === 'no') {me.forceClose=true;  panel.close(); }
            },
            icon: Ext.Msg.QUESTION
          });
          return false;
        }
        return true;
      }
    });
