/*global Ext: false, BS350: false, TR: false */
Ext.define('BS350.controller.IpmCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['IpmView', 'BS350.custom.ToggleColumn'],
  stores: ['AfoStore'],

  items: [
    { name: 'activeFlag', query: '#prActive', actions: {change: 'updateButtons'} },
    { name: 'addLoggingFlag', query: '#prAddLogging', actions: {change: 'updateButtons'} },
    { name: 'GlobalForm', query: '#ipmGlobalComponentId', actions: {dirtychange: 'updateButtons', validitychange: 'updateButtons'}},
    { name: 'grid', query: '#ipmGrid'},
    { name: 'msg_lbl_bbar', query: '#msg_lbl_bbar'},
    { name: 'addAfoBtn', query: '#addAfo', actions: {click: 'addAfo'} },
    { name: 'addLooseningAfoBtn', query: '#addLooseningAfo', actions: {click: 'addLooseningAfo'} },
    { name: 'removeAfoBtn', query: '#removeAfo', actions: {click: 'removeAfo'} },
    { name: 'saveBtn', query: '#btnSave', actions: {click: 'save'}},
    { name: 'discardBtn', query: '#btnDiscard', actions: {click: 'discardData'} },
    { name: 'btnReset', query: '#btnReset', actions: {click: 'resetToFactory'} }
  ],

  forceClose: false,

  initView: function () {
    var me = this;
    if (me.access === 'r') {
      Ext.each(Ext.ComponentQuery.query('textfield, combobox, checkbox', this.view), function (e) {
        e.setReadOnly(true);
      });
      this.view.getDockedItems()[0].hide();
      this.V.grid.getDockedItems()[2].hide();
      this.V.grid.plugins[0].on('beforeedit', function (e) { return false; });
      Ext.each(Ext.ComponentQuery.query('togglecolumn', this.V.grid), function (e) {
        e.editable = false;
      });
    }
    if(this.access === 'd'){
      this.V.addLoggingFlag.setVisible(true);
    }
    this.forceClose = false;

    me.store = me.V.grid.getStore();
    me.store.on('datachanged', me.storeChanged, me);
    me.store.on('update', me.storeChanged, me);

    this.view.getEl().mask(TR("Loading..."));
    this.updateData();
  },

  getNextUniqueValues: function (afo_name_prefix, prgs_order) {

    if (prgs_order === undefined) { prgs_order = 'ASC'; } else { prgs_order = 'DESC'; }

    // Loosening should have prg number 99
    if (afo_name_prefix === 'L-AFO_') {
      var all_prgs = BS350.custom.Utils.range(99, 255);
    }else {
      var all_prgs = BS350.custom.Utils.range(0, 255);
    }

    var afo_names_set = [];
    var found_prgs = [];

    var grid = this.V.grid;
    grid.getStore().each(
      function (item) {
        var found_afo_value = item.get('afo');
        var found_prg_value = item.get('prg');

        found_prgs.push(parseInt(found_prg_value, 10));

        var match = found_afo_value.match(afo_name_prefix + '([0-9]{3})');
        if (match !== null) {
          afo_names_set.push(match[1]);
        }
      }
    );

    var possible_prgs = Ext.Array.difference(all_prgs, found_prgs);
    var next_prg;
    var l;
    var afo_name;
    if (prgs_order === 'ASC') {
      next_prg = possible_prgs.sort(function (a, b) { return a - b; })[0];
    } else {
      next_prg = possible_prgs.sort(function (b, a) { return a - b; })[0];
    }

    if (afo_names_set.length < 1) {
      afo_name = afo_name_prefix + '001';
    } else {
      var next = String() + (Math.max.apply(Math, afo_names_set) + 1);
      for (l = next.length; l < 3; l++) {
        next = '0' + next;
      }
      afo_name = afo_name_prefix + next;
    }
    return { next_prg: next_prg, afo_name: afo_name };
  },

  addAfo: function () {
    var me  = this;
    var chnValue = null;
    me.V.addAfoBtn.setDisabled(true);
    Ext.Ajax.request(
      {
        url: '/BS350/ressrv/retrieveKanalNr',
        success: function (res) {
          chnValue = parseInt(res.responseText, 10);
          var values = me.getNextUniqueValues('AFO_');
          var newRow = {'enabled': '1', 'chn': chnValue, 'prg': values.next_prg, 'afo': values.afo_name, 'desc': '', 'filter': 3, 'modeOk': 0, 'modeNok': 1, 'unwind': '1', 'absolute': '0', 'loosen': '0', 'stepNumbering': 0, 'stepTypifying': 0, 'stepFilter': 0, 'stepOrdering': 0};
          me.__addAfo__(newRow);
        }
      }
    );
  },

  addLooseningAfo: function () {
    var me  = this;
    var chnValue = null;
    me.V.addLooseningAfoBtn.setDisabled(true);
    Ext.Ajax.request(
      {
        url: '/BS350/ressrv/retrieveKanalNr',
        success: function (res) {
          chnValue = parseInt(res.responseText, 10);
          var values = me.getNextUniqueValues('L-AFO_');
          var newRow = {'enabled': '1', 'chn': chnValue, 'prg': values.next_prg, 'afo': values.afo_name, 'desc': '', 'filter': 3, 'modeOk': 0, 'modeNok': 1, 'unwind': '1', 'absolute': '0', 'loosen': '1', 'stepNumbering': 0, 'stepTypifying': 0, 'stepFilter': 0, 'stepOrdering': 0};
          me.__addAfo__(newRow);
        }
      });
  },

  __addAfo__: function (newRow) {
    if (this.V.grid.getSelectionModel().hasSelection()) {
      var selection = this.V.grid.getSelectionModel().getSelection();
      var indexOf = this.store.indexOf(selection[0]);
      this.store.insert(indexOf + 1, newRow);
      this.V.grid.getView().select(indexOf+1);
      this.V.grid.plugins[0].startEditByPosition({row: indexOf + 1, column: 3});
    } else {
      this.store.add(newRow);
      this.V.grid.plugins[0].startEditByPosition({row: this.store.count() - 1, column: 3});
    }
  },

  removeAfo: function () {
    var selection = this.V.grid.getSelectionModel().getSelection();
    var indexOf;
    if (selection.length > 0) {
      indexOf = this.store.indexOf(selection[0]);
      this.store.remove(selection[0]);
      if(indexOf === this.store.getCount()){
        this.V.grid.getView().select(indexOf-1);
      }
      else {
        this.V.grid.getView().select(indexOf);
      }
    }
  },

  save: function (button, event, eOpts) {
    var me = this;

    var afo = [];
    me.store.each(function (item) { afo.push(item.data); });

    var global = me.V.GlobalForm.form.getFieldValues();
    var settings = { loggingenable: me.V.addLoggingFlag.getValue(), active: me.V.activeFlag.getValue(), settings: { global: global, afolist: afo}};

    me.view.getEl().mask(TR("Saving..."));
    Ext.Ajax.request(
      {
        url: '/BS350/ressrv/processCfg?proc=IPM',
        method: 'POST',
        params: Ext.JSON.encode(settings),
        success: function (res) {
          me.getController('NavigationCtrl').updateActives();
          if (eOpts.callback) { eOpts.callback(); } else { me.updateData(); }
        }
      }
    );
    me.V.saveBtn.setDisabled(true);
    me.V.discardBtn.setDisabled(true);
  },

  askclose: function (panel) {
    var me = this;
    me.view.getEl().mask(TR("Saving..."));
    var dirty = me.V.GlobalForm.form.isDirty() || me.store.isDirty();
    if (dirty && !me.forceClose) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') {me.forceClose = true; me.save(null, null, {callback: function () { panel.close(); }}); }
          if (btn === 'no') { me.forceClose = true; panel.close(); }
        },
        icon: Ext.Msg.QUESTION
      });
      return false;
    }
    return true;
  },

  discardData: function () {
    var me = this;
    me.view.getEl().mask(TR("Discarding..."));
    me.updateData();
  },

  updateData: function () {
    var me = this;
    var ipmView = Ext.ComponentQuery.query("ipmview")[0];
    Ext.Ajax.request({
      url: '/BS350/ressrv/processCfg?proc=IPM',
      success: function (res) {
        var data = Ext.JSON.decode(res.responseText);

        me.V.GlobalForm.form.setValues(data.settings.global);
        me.V.activeFlag.setValue(data.active);

        me.V.activeFlag.initValue();
        me.V.addLoggingFlag.setValue(data.loggingenable);

        me.V.addLoggingFlag.initValue();
        me.store.loadRawData(data.settings.afolist);

        me.V.saveBtn.setDisabled(true);
        me.V.discardBtn.setDisabled(true);
        me.getController('NavigationCtrl').updateActives();
        me.view.getEl().unmask();
      }
    });
  },

  storeChanged: function () {
    if (this.store.count() > 255) {
      this.V.msg_lbl_bbar.setText(TR('Max. amount of afos reached'));
      this.V.addAfoBtn.setDisabled(true);
      this.V.addLooseningAfoBtn.setDisabled(true);
    } else {
      this.V.msg_lbl_bbar.setText('');
      this.V.addAfoBtn.setDisabled(false);
      this.V.addLooseningAfoBtn.setDisabled(false);
    }
    this.V.removeAfoBtn.setDisabled(this.store.count() < 1);

    this.updateButtons();
  },

  updateButtons: function () {
    var valid = this.V.GlobalForm.form.isValid();
    var dirty = this.V.GlobalForm.form.isDirty() || this.store.isDirty() || this.V.activeFlag.isDirty() || this.V.addLoggingFlag.isDirty();

    this.V.saveBtn.setDisabled(!dirty || !valid);
    this.V.discardBtn.setDisabled(!dirty);
  },

  resetToFactory: function () {
    var me = this;
    var reset = function () {
      me.view.getEl().mask(TR("Resetting..."));
      Ext.Ajax.request({
        url: '/BS350/ressrv/processCfg?proc=IPM&factory=true',
        success: function () {
          me.getController('NavigationCtrl').updateActives();
          me.updateData();
        },
        failure: function () {
          Ext.MessageBox.alert(TR("Failure"), TR("Reset to factory failed."));
          me.view.getEl().unmask();
        }
      });
    };

    var title = TR('Reset to factory');
    var msg = TR('Do you want to discard the current configuration and reset to factory? All relevant configuration files are to be overwritten.');
    BS350.custom.Utils.showResetToFactoryConfirmation(reset, title, msg);
  }
});

