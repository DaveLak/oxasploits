/*global Ext: false, TR: false */
Ext.define('BS350.controller.PrgStepCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['PrgStepView'],

  items: [
    { name: 'btnOk', query: '#btnOK', actions: {click: 'setAndClose'}},
    { name: 'btnCancel', query: '#btnCancel', actions: {click: 'close'}},

    { name: 'general_panel', query: '#generalPanel', actions: { collapse: 'targetCollapsed', expand: 'targetCollapsed', change: 'updateButtons', dirtychange: 'updateButtons', validitychange: 'updateButtons' } },
    { name: 'target_panel', query: '#targetPanel', actions: { collapse: 'targetCollapsed', expand: 'targetCollapsed', change: 'updateButtons', dirtychange: 'updateButtons', validitychange: 'updateButtons' } },
    { name: 'monitor_panel', query: '#monitorPanel', actions: { collapse: 'targetCollapsed', expand: 'targetCollapsed', change: 'updateButtons', dirtychange: 'updateButtons', validitychange: 'updateButtons' } },
    { name: 'propSpeed', query: '#propSpeed', actions: { change: 'checkSpeed' } },
    { name: 'propSpeedContainer', query: '#propSpeedContainer' },
    { name: 'propSpeedWarn', query: '#propSpeedWarn', actions: { change: 'checkSpeed' } },
    { name: 'target_primary', query: '#propPrimTarget', actions: {change: 'changedPrimaryTarget'}},
    { name: 'primaryTorqueContainer', query: '#primaryTorqueContainer' },
    { name: 'target_torque_p', query: '#propTTorqueP', actions: { change: 'checkPrimaryTorque', validitychange: 'updateButtons', dirtychange: 'updateButtons' } },
    { name: 'primaryTorqueWarn', query: '#primaryTorqueWarn', actions: {change: 'checkPrimaryTorque' } },
    { name: 'target_angle_p', query: '#propTAngleP', actions: { validitychange: 'updateButtons', dirtychange: 'updateButtons' } },
    { name: 'target_time_p', query: '#propTTimeP'},
    { name: 'propTorqueMax', query: '#propTorqueMax', actions: { change: 'updateButtons'} },
    { name: 'propTorqueMin', query: '#propTorqueMin', actions: { change: 'updateButtons'} },
    { name: 'propAngleMax', query: '#propAngleMax', actions: {change: 'updateButtons'} },
    { name: 'propAngleMin', query: '#propAngleMin', actions: {change: 'updateButtons'} },
    { name: 'propAngleMaxSwitch', query: '#propAngleMaxSwitch', actions: {validitychange: 'updateButtons'} },
    { name: 'propAngleMinSwitch', query: '#propAngleMinSwitch', actions: {validitychange: 'updateButtons'} },
    { name: 'propTorqueMaxSwitch', query: '#propTorqueMaxSwitch', actions: {validitychange: 'updateButtons'} },
    { name: 'propTorqueMinSwitch', query: '#propTorqueMinSwitch', actions: {validitychange: 'updateButtons'} },

    { name: 'target_secondary', query: '#propSecTarget', actions: {change: 'changedSecondaryTarget', validitychange: 'updateButtons', dirtychange: 'updateButtons' }},
    { name: 'secondaryTorqueContainer', query: '#secondaryTorqueContainer' },
    { name: 'secTargetSwitch', query: '#secTargetSwitch' },
    { name: 'target_torque_s', query: '#propTTorqueS', actions: { change: 'checkSecondaryTorque', validitychange: 'updateButtons', dirtychange: 'updateButtons' } },
    { name: 'secondaryTorqueWarn', query: '#secondaryTorqueWarn', actions: {change: 'checkSecondaryTorque' } },
    { name: 'target_angle_s', query: '#propTAngleS', actions: { validitychange: 'updateButtons', dirtychange: 'updateButtons' } },
    { name: 'target_time_s', query: '#propTTimeS'},
    { name: 'startup_panel', query: '#startupTPanel', actions: { validitychange: 'updateButtons', dirtychange: 'updateButtons' } }
  ],
  checkPrimaryTorque: function () {
    if (this.V.target_torque_p.value > this.limits.MomentMax || this.V.target_torque_p.value < this.limits.MomentMin) {
      this.V.primaryTorqueWarn.limit = this.limits.MomentMax;
      this.V.primaryTorqueWarn.setVisible(true);
    } else {
      this.V.primaryTorqueWarn.setVisible(false);
    }
  },
  checkSecondaryTorque: function () {
    if (this.V.target_torque_s.value > this.limits.MomentMax || this.V.target_torque_s.value < this.limits.MomentMin) {
      this.V.secondaryTorqueWarn.limit = this.limits.MomentMax;
      this.V.secondaryTorqueWarn.setVisible(true);
    } else {
      this.V.secondaryTorqueWarn.setVisible(false);
    }
  },
  checkSpeed: function () {
    var stepData = this.step.getData();
    var type = stepData.Type;
    if (type != 0) {
      if (parseFloat(this.V.propSpeed.value) >= 0) {
        this.V.propSpeedWarn.setVisible(this.V.propSpeed.value > this.limits.DrehzahlMax || this.V.propSpeed.value < this.limits.DrehzahlMin)
      } else {
        this.V.propSpeedWarn.setVisible(this.V.propSpeed.value > -this.limits.DrehzahlMin || this.V.propSpeed.value < -this.limits.DrehzahlMax)
      }
    } else {
      this.V.propSpeedContainer.setVisible(false);
    }
  },
  targetCollapsed: function () {
    var targetPanelNotValid = !this.V.target_panel.getForm().isValid();
    var generalPanelNotValid = !this.V.general_panel.getForm().isValid();
    var monitorPanelNotValid = !this.V.monitor_panel.getForm().isValid();

    if (this.V.general_panel.collapsed != false && generalPanelNotValid) {
      this.V.general_panel.setIconCls('x-form-invalid-icon');
    } else {
      this.V.general_panel.setIcon();
    }
    if (this.V.target_panel.collapsed != false && targetPanelNotValid) {
      this.V.target_panel.setIconCls('x-form-invalid-icon');
    } else {
      this.V.target_panel.setIcon();
    }
    if (this.V.monitor_panel.collapsed && monitorPanelNotValid) {
      this.V.monitor_panel.setIconCls('x-form-invalid-icon');
    }  else {
      this.V.monitor_panel.setIcon();
    }
  },
  tempData: {},
  initView: function () {
    var prgStep = this;
    var me = this;

    if (me.access !== 'w') {
      me.V.btnOk.hide();
    }

    this.tempData = {};

    var stepData = this.step.getData();

    // Window title
    this.view.setTitle(TR('Program') + ' ' + TR('Step') + ':' + stepData.Name);

    // General
    this.V.general_panel.form.setValues(stepData);

    // Set gui
    this.V.startup_panel.setDisabled(true);
    if (stepData.Type === 0) { // START
      if (stepData.Speed < 0) {
        stepData.Speed = Math.abs(stepData.Speed);
      }
      Ext.apply(stepData, {
        STSpeed: stepData.Speed,
        STStartSuppression: stepData.StartSuppression,
        STAngle: stepData.TF_Angle,
        STTorqueMax: stepData.MF_TorqueMax_Switching,
        STTimeMax: stepData.MF_Time_Switching
      });
      this.V.target_primary.setDisabled(true);
      this.V.target_torque_p.setDisabled(true);
      this.V.target_angle_p.setDisabled(true);
      this.V.target_time_p.setDisabled(true);
      this.V.target_secondary.setDisabled(true);
      this.V.target_torque_s.setDisabled(true);
      this.V.target_angle_s.setDisabled(true);
      this.V.target_time_s.setDisabled(true);

      this.V.target_secondary.setDisabled(true);
      this.V.startup_panel.setDisabled(false);
    } else if (stepData.Type === 2) { // END
      this.V.general_panel.collapsed = false;
    } else {  // TIGHT
      stepData.PrimaryTarget = 0;
      stepData.SecondaryTarget = 0;
      Ext.apply(stepData, {sUpperTorque: 0, sAngle: 0, sTime: 0});
      Ext.apply(stepData, {pUpperTorque: 0, pAngle: 0, pTime: 0});

      if (stepData.TF1_UpperTorque) {
        stepData.PrimaryTarget = 1;
        stepData.pUpperTorque = stepData.TF1_UpperTorque;
      } else if (stepData.TF1_Angle) {
        stepData.PrimaryTarget = 2;
        stepData.pAngle = stepData.TF1_Angle;
      } else if (stepData.TF1_Time) {
        stepData.PrimaryTarget = 3;
        stepData.pTime = stepData.TF1_Time;
      }

      if (stepData.TF2_UpperTorque) {
        stepData.SecondaryTarget = 1;
        stepData.sUpperTorque = stepData.TF2_UpperTorque;
        this.V.secTargetSwitch.setValue(true);
      } else if (stepData.TF2_Angle) {
        stepData.SecondaryTarget = 2;
        stepData.sAngle = stepData.TF2_Angle;
        this.V.secTargetSwitch.setValue(true);
      } else if (stepData.TF2_Time) {
        stepData.SecondaryTarget = 3;
        stepData.sTime = stepData.TF2_Time;
        this.V.secTargetSwitch.setValue(true);
      }


      // Reinterprete the monitor keys for the form:
      if (stepData.MF_TorqueMin_Switching !== null) {
        stepData.MF_TorqueMin = stepData.MF_TorqueMin_Switching;
        stepData.MF_TorqueMin_Switching = true;
      } else {
        stepData.MF_TorqueMin_Switching = false;
      }

      if (stepData.MF_TorqueMax_Switching !== null) {
        stepData.MF_TorqueMax = stepData.MF_TorqueMax_Switching;
        stepData.MF_TorqueMax_Switching = true;
      } else {
        stepData.MF_TorqueMax_Switching = false;
      }

      if (stepData.MF_AngleMax_Switching !== null) {
        stepData.MF_AngleMax = stepData.MF_AngleMax_Switching;
        stepData.MF_AngleMax_Switching = true;
      } else {
        stepData.MF_AngleMax_Switching = false;
      }

      this.V.monitor_panel.form.setValues(stepData);
    }
    this.V.target_panel.form.setValues(stepData);
  },

  close: function (button, value) {
    this.view.close();
  },

  changedPrimaryTarget: function (combo, value) {
    // Set secondary target to None if the same of the primary
    var secVal = this.V.target_secondary.getValue();
    var secondCBStore = this.V.target_secondary.getStore();
    if (secondCBStore.hiddenTarget) { secondCBStore.add(secondCBStore.hiddenTarget); }
    if (value === secVal) { this.V.target_secondary.setValue(0); }
    // Remove primary target from the secondary choice
    // hiddenTarget used to restore removed items from the secondary CB
    var tmp = secondCBStore.getById(value);
    secondCBStore.remove(tmp);
    secondCBStore.hiddenTarget = tmp;

    // Set visibility of the primary field depending of the target
    this.V.target_torque_p.setVisible(value === 1);
    this.V.primaryTorqueContainer.setVisible(value === 1);
    this.V.target_angle_p.setVisible(value === 2);
    this.V.target_time_p.setVisible(value === 3);

    // Write on the panel title the current targets
    var values = [combo.getRawValue()];
    if (this.V.target_secondary.getValue() > 0) { values.push(this.V.target_secondary.getRawValue()); }

    var title = TR('Target') + ' ( ' + values.join(',') + ' )';
    this.V.target_panel.title = title;
    if (this.V.target_panel.header) {
      this.V.target_panel.header.setTitle(title);
    }
    this.updateButtons();
  },

  updateButtons: function () {
    var generalPanelNotValid = !this.V.general_panel.getForm().isValid();
    var targetPanelNotValid = !this.V.target_panel.getForm().isValid();
    var monitorPanelNotValid = !this.V.monitor_panel.getForm().isValid();
    if (generalPanelNotValid || targetPanelNotValid || monitorPanelNotValid) {
      this.V.btnOk.setDisabled(true);
    } else {
      this.V.btnOk.setDisabled(false);
    }
  },

  changedSecondaryTarget: function (combo, value) {
    // Set visibility of the secondary field depending of the target
    this.V.target_torque_s.setVisible(value === 1);
    this.V.secondaryTorqueContainer.setVisible(value === 1);
    this.V.target_angle_s.setVisible(value === 2);
    this.V.target_time_s.setVisible(value === 3);

   // Write on the panel title the current targets
    var values = [this.V.target_primary.getRawValue()];
    if (combo.getValue() > 0) { values.push(combo.getRawValue()); }
    var title = TR('Target') + ' ( ' + values.join(',') + ' )';
    this.V.target_panel.title = title;
    if (this.V.target_panel.header) {
      this.V.target_panel.header.setTitle(title);
    }
    this.updateButtons();
  },

  setAndClose: function () {
    /*this.checkMFTorqueMax();
    this.checkMFTorqueMin();
    this.checkMFAngleMax();
    this.checkMFAngleMin();*/
    var stepType = this.step.get('Type');

    var newData = this.V.general_panel.form.getFieldValues();

    Ext.apply(newData, this.V.target_panel.form.getFieldValues());

    if (stepType === 0) { //START
      newData.Speed = newData.STSpeed;
      newData.StartSuppression = newData.STStartSuppression;
      newData.TF_Angle = newData.STAngle;
      newData.MF_TorqueMax_Switching = newData.STTorqueMax;
      newData.MF_Time_Switching = newData.STTimeMax;
    }

    if (stepType === 1) { // TIGHT
      newData.TF1_UpperTorque = newData.TF1_Angle = newData.TF1_Time = null;
      newData.TF2_UpperTorque = newData.TF2_Angle = newData.TF2_Time = null;
      switch (newData.PrimaryTarget) {
      case 1:
        newData.TF1_UpperTorque = newData.pUpperTorque;
        break;
      case 2:
        newData.TF1_Angle = newData.pAngle;
        break;
      case 3:
        newData.TF1_Time = newData.pTime;
        break;
      }
      switch (newData.SecondaryTarget) {
      case 1:
        newData.TF2_UpperTorque = newData.sUpperTorque;
        break;
      case 2:
        newData.TF2_Angle = newData.sAngle;
        break;
      case 3:
        newData.TF2_Time = newData.sTime;
        break;
      }

      Ext.apply(newData, this.V.monitor_panel.form.getFieldValues());
      // Reinterprete the monitor keys for the model e.g:
      // {MF_TorqueMin_Switching: true, MF_TorqueMin: 5} -> {MF_TorqueMin_Switching: 5, MF_TorqueMin: null}
      // {MF_TorqueMin_Switching: false, MF_TorqueMin: 5} -> {MF_TorqueMin_Switching: null, MF_TorqueMin: 5}

      newData.MF_TorqueMin_Switching = newData.MF_TorqueMin_Switching ? newData.MF_TorqueMin : null;
      newData.MF_TorqueMin = newData.MF_TorqueMin_Switching === null ? newData.MF_TorqueMin : null;

      newData.MF_TorqueMax_Switching = newData.MF_TorqueMax_Switching ? newData.MF_TorqueMax : null;
      newData.MF_TorqueMax = newData.MF_TorqueMax_Switching === null ? newData.MF_TorqueMax : null;

      newData.MF_AngleMax_Switching = newData.MF_AngleMax_Switching ? newData.MF_AngleMax : null;
      newData.MF_AngleMax = newData.MF_AngleMax_Switching === null ? newData.MF_AngleMax : null;

    }

    // Remove helper keys not used in Step model
    delete newData.STSpeed;
    delete newData.STStartSuppression;
    delete newData.STAngle;
    delete newData.STTorqueMax;
    delete newData.STTimeMax;

    delete newData.PrimaryTarget;
    delete newData.SecondaryTarget;
    delete newData.pUpperTorque;
    delete newData.pAngle;
    delete newData.pTime;
    delete newData.sUpperTorque;
    delete newData.sAngle;
    delete newData.sTime;

    // IE can not handle this. Use only for debugging purposes:
    // konsole.log(newData);

    // Update model
    this.step.set(newData);

    // Update table
    this.table.refresh();

    // close step view dialog
    this.view.close();
  },

  checkMFTorqueMax: function () {
    if (this.V.propTorqueMax.getValue() === 0)
      this.V.propTorqueMax.setValue(null);
  },

  checkMFTorqueMin: function () {
    if (this.V.propTorqueMin.getValue() === 0)
      this.V.propTorqueMin.setValue(null);
  },

  checkMFAngleMax: function () {
    if (this.V.propAngleMax.getValue() === 0)
      this.V.propAngleMax.setValue(null);
  },

  checkMFAngleMin: function () {
    if (this.V.propAngleMin.getValue() === 0)
      this.V.propAngleMin.setValue(null);
  }

});
