/*global Ext: false, TR: false, BS350: false */
Ext.define('BS350.controller.OpenProtocolCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['OpenProtocolView', 'BS350.custom.NumberFieldUnit'],

  items: [
    { name: 'activeFlag', query: '#prActive' },
    { name: 'loggingenable', query: '#prLoggingenable'},
    { name: 'btnSave', query: '#btnSave', actions: {click: 'save'} },
    { name: 'btnDiscard', query: '#btnDiscard', actions: {click: 'reset'} },
    { name: 'btnResetToFactory', query: '#btnReset', actions: {click: 'resetToFactory'} }
  ],

  forceClose: false,
  origData: {},

  initView: function () {
    if (this.access === 'r') {
      Ext.each(Ext.ComponentQuery.query('textfield, combobox, numberfield, checkbox', this.view), function (e) {
        e.setReadOnly(true);
      });
      this.view.getDockedItems()[0].hide();
    }
    if(this.access === 'd'){
      this.V.loggingenable.setVisible(true);
    }
    this.view.on('dirtychange', this.updateButtons, this);
    this.view.on('validitychange', this.updateButtons, this);
    this.forceClose = false;
    this.getData();
  },

  getData: function () {
    var me = this;
    Ext.Ajax.request({
      url: '/BS350/ressrv/processCfg?proc=Open%20protocol',
      success: function (res) {
        me.origData = Ext.JSON.decode(res.responseText);
        me.view.form.setValues(me.origData);
        me.V.btnSave.setDisabled(true);
        me.V.btnDiscard.setDisabled(true);
      }
    });
  },

  updateButtons: function (param1, param2, param3) {
    var isDirty = this.view.form.isDirty();
    var isValid = this.view.form.isValid();

    this.V.btnSave.setDisabled(!isDirty || !isValid);
    this.V.btnDiscard.setDisabled(!isDirty);
  },

  save: function (button, event, eOpts) {
    var me = this;
    var data = me.view.form.getFieldValues();
    Ext.apply(me.origData, data);
    Ext.Ajax.request({
      url: '/BS350/ressrv/processCfg?proc=Open%20protocol',
      method: 'POST',
      jsonData: me.origData,
      success: function (res) {
        me.getController('NavigationCtrl').updateActives();
        if (eOpts.callback) { eOpts.callback(); } else { me.getData(); }
      }
    });
    this.V.btnSave.setDisabled(true);
    this.V.btnDiscard.setDisabled(true);
  },

  askclose: function (panel) {
    var me = this;
    if (!me.forceClose && me.view.form.isDirty()) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') { me.save(null, null, { callback: function () { me.forceClose = true; panel.close(); } }); }
          if (btn === 'no') { me.forceClose = true; panel.close(); }
        },
        icon: Ext.Msg.QUESTION
      });
      return false;
    }
    return true;
  },

  reset: function() {
    this.getData();
  },

  resetToFactory: function () {
    var me = this;

    var reset = function () {
      Ext.Ajax.request({
        url: '/BS350/ressrv/processCfg?proc=Open%20protocol&factory=true',
        success: function (res) {
          me.getController('NavigationCtrl').updateActives();
          me.getData();
        }
      });
    };

    var title = TR('Reset to factory');
    var msg = TR('Do you want to discard the current configuration and reset to factory? All relevant configuration files are to be overwritten.');
    BS350.custom.Utils.showResetToFactoryConfirmation(reset, title, msg);
  }
});
