__author__ = 'kai'

import atoms

class IdCodeAssign:

    def __init__(self):
        self.data = []

    def requires(self):
        self.data.extend(atoms.Requires())

    def repeatScan(self):
        self.data.extend(atoms.RepeatScan())

    def initNode(self, user, comment, date,display_time, id_input_name1, id_input_comment1, id_input_name2, id_input_comment2):
        self.data.append('local initNode = {')
        self.data.append('   name = "initNode",')
        self.data.append('   timeout = 300,')
        self.data.append('   type = c.TypeIdleStartNode,')
        self.data.append('   selectsCw = 0,')
        self.data.append('   selectsEn = 0,')
        self.data.append('   displayJobSteps = 1,')
        self.data.append('   displayTime = %s,' % display_time)
        self.data.append('   clearIDCode = 0,')
        self.data.append('   ignoreResults = 0,')
        self.data.append('   jobComment = \'%s\',' % comment)
        self.data.append('   jobUser = \'%s\',' % user)
        self.data.append('   jobDate = %d,' % date)
        self.data.append('   id_input_name1 = \'%s\',' % id_input_name1)
        self.data.append('   id_input_comment1 = \'%s\',' % id_input_comment1)
        self.data.append('   id_input_name2 = \'%s\',' % id_input_name2)
        self.data.append('   id_input_comment2 = \'%s\'' % id_input_comment2)
        self.data.append('}')

    def config(self):
        self.data.append('--globale run Einstellungen setzen')
        self.data.append('local config = {')
        self.data.append('    stopOnNok = false,')
        self.data.append('    stopOnTimeout = false')
        self.data.append('}')
        self.data.append('f.setConfiguration(config)')
        self.data.append('')

    def localNode(self):
        self.data.extend(atoms.Local())

    def setEnable(self):
        self.data.extend(atoms.SetEnable())

    def unsetEnable(self):
        self.data.extend(atoms.UnsetEnable())

    def idCodeInit(self, source, fire_idcode, range1, target, id):
        self.data.extend(atoms.IDCodeInit(source, fire_idcode, range1, target, id))

    def initScanner(self, codes, laserontime, trigger, play_sound, id):
        self.data.extend(atoms.InitScanner(codes, laserontime, trigger, play_sound, id))

    def displayNoScanner(self):
        self.data.extend(atoms.DisplayNoScanner())

    def displayScannerNotActive(self):
        self.data.extend(atoms.DisplayScannerNotActive())

    def waitScanInitAck(self, id):
        self.data.extend(atoms.WaitScanInitAck(id))

    def waitScanStartTrigger(self, id, text, source):
        self.data.append('--warten auf Trigger Scanner')
        self.data.append('atoms["$WaitScanStartTrigger%s"]={' % id)
        if source == 0:
            self.data.append('  text= "%s",' % text)
        else:
            self.data.append('  text= "",')
        self.data.append('  type = c.TypeTriggerIn,')
        self.data.append('  mode = c.TriggerInModeScanTrigger, --c.TriggerOutScanPrg')
        self.data.append('  dest = 0,')
        self.data.append('  state= 1,')
        self.data.append('  range= 1,')
        self.data.append('  valueList = {}')
        self.data.append('}')
        self.data.append('')

    def doScan(self, id):
        self.data.extend(atoms.DoScan(id))

    def waitIDCodeTimeout(self, timeout, id, text, source):
        self.data.extend(atoms.WaitIDCodeTimeout(timeout, text, source, id))

    def waitIDCode(self, id):
        self.data.extend(atoms.WaitIDCode(id))

    def displayPrgNrTimeDelay(self, target):
        self.data.extend(atoms.DisplayPrgNrTimeDelay(target))

    def jobNr(self):
        self.data.extend(atoms.JobNr())

    def displayJobNrTimeDelay(self, target):
        self.data.extend(atoms.DisplayJobNrTimeDelay(target))

    def displayMsgTimeDelay(self, time_delay):
        self.data.extend(atoms.DisplayMsgTimeDelay(time_delay))

    def displayIdCode(self, display_time):
        self.data.extend(atoms.DisplayIDCode(display_time))

    def displayIdCodeTimeDelay(self):
        self.data.extend(atoms.DisplayIDCodeTimeDelay())

    def scanFinalJobOk(self):
        self.data.extend(atoms.ScanFinalJobOK())

    def scanFinalOK(self, source, trigger):
        state = 1 if source == 0 and trigger not in [5, 4] else 0
        self.data.extend(atoms.ScanFinalOK(state))

    def doNokResult(self):
        self.data.extend(atoms.DoNokResult())

    def scanTimeoutReached(self, id, timeout_text):
        self.data.extend(atoms.ScanTimeoutDelay(timeout_text=timeout_text, id=id))

    def scanTimeoutMsg(self, id):
        self.data.extend(atoms.ScanTimeoutMsg(id))

    def codeNotSupportedMsg(self, id):
        self.data.extend(atoms.CodeNotSupportedMsg(id))

    def codeNotActiveMsg(self, id):
        self.data.extend(atoms.CodeNotActiveMsg(id))

    def codeNotAssignedMsg(self, id):
        self.data.extend(atoms.CodeNotAssignedMsg(id))


    def publishAtoms(self):
        self.data.append('f.publishAtoms(atoms,function (a) cpp.job:addAtom(a) end)')
        self.data.append('')
        self.data.append('')

    def nodes(self, _op_mode):
        self.data.append('nodes = {}')

        self.data.append('nodes["StartWithEnable"] = {}')
        self.data.append('nodes["SetEnableStart"] = {}')
        self.data.append('nodes["StartWithoutEnable"] = {}')

        self.data.append('nodes["InitIDCode1"] = {}')
        self.data.append('nodes["InitScanner1"] = {}')
        self.data.append('nodes["DisplayNoScanner1"] = {}')
        self.data.append('nodes["DisplayScannerNotActive1"] = {}')

        self.data.append('nodes["WaitForScanInitAck1"] = {}')

        if _op_mode == 2:
            self.data.append('nodes["WaitInput1"] = {}')
        else:
            self.data.append('nodes["WaitForScanStartTrigger1"] = {}')

        self.data.append('nodes["Scanning1"] = {}')

        self.data.append('nodes["WaitIdCodeResult1"] = {}')
        self.data.append('nodes["RepeatTimeout1"] = {}')
        self.data.append('nodes["RepeatTimeoutDelay1"] = {}')
        self.data.append('nodes["RepeatCodeNotSupported1"] = {}')
        self.data.append('nodes["RepeatCodeNotSupportedDelay1"] = {}')
        self.data.append('nodes["RepeatCodeNotActive1"] = {}')
        self.data.append('nodes["RepeatCodeNotActiveDelay1"] = {}')
        self.data.append('nodes["RepeatCodeNoAssignment1"] = {}')
        self.data.append('nodes["RepeatCodeNoAssignmentDelay1"] = {}')

        self.data.append('nodes["ScanTimeout1"] = {}')
        self.data.append('nodes["ScanTimeoutDelay1"] = {}')

        self.data.append('nodes["DisplayNewIDCode"] = {}')
        self.data.append('nodes["DisplayNewIDCodeDelay"] = {}')
        self.data.append('nodes["ScanFinalOK"] = {}')


        self.data.append('nodes["InitIDCode2"] = {}')
        self.data.append('nodes["InitScanner2"] = {}')
        self.data.append('nodes["DisplayNoScanner2"] = {}')
        self.data.append('nodes["DisplayScannerNotActive2"] = {}')
        self.data.append('nodes["WaitForScanInitAck2"] = {}')

        if _op_mode == 2:
            self.data.append('nodes["WaitInput2"] = {}')
        else:
            self.data.append('nodes["WaitForScanStartTrigger2"] = {}')

        self.data.append('nodes["Scanning2"] = {}')

        self.data.append('nodes["WaitIdCodeResult2"] = {}')
        self.data.append('nodes["RepeatTimeout2"] = {}')
        self.data.append('nodes["RepeatTimeoutDelay2"] = {}')
        self.data.append('nodes["RepeatCodeNotSupported2"] = {}')
        self.data.append('nodes["RepeatCodeNotSupportedDelay2"] = {}')
        self.data.append('nodes["RepeatCodeNotActive2"] = {}')
        self.data.append('nodes["RepeatCodeNotActiveDelay2"] = {}')
        self.data.append('nodes["RepeatCodeNoAssignment2"] = {}')
        self.data.append('nodes["RepeatCodeNoAssignmentDelay2"] = {}')

        self.data.append('nodes["ScanTimeout2"] = {}')
        self.data.append('nodes["ScanTimeoutDelay2"] = {}')

        self.data.append('nodes["SetNewJobNr"] = {}')
        self.data.append('nodes["UnsetEnableJob"] = {}')
        self.data.append('nodes["DisplayNewJobNr"] = {}')
        self.data.append('nodes["DisplayNewJobNrDelay"] = {}')
        self.data.append('nodes["JobNrFinalOK"] = {}')

        self.data.append('nodes["SetNewPrgNr"] = {}')
        self.data.append('nodes["ResetBatchCounter"] = {}')
        self.data.append('nodes["SetEnablePrg"] = {}')
        self.data.append('nodes["DisplayNewPrgNr"] = {}')
        self.data.append('nodes["DisplayNewPrgNrDelay"] = {}')
        self.data.append('nodes["DoNokResult"] = {}')

        self.data.append('')

    def workflow(self, source1, source2, _op_mode):
        self.data.append('------------ CS/SE System ------- Channel Signals -------------------------')
        self.data.append('nodes["StartWithEnable"].atom = atoms["$Local"]')
        self.data.append('nodes["StartWithEnable"].successor = {{var = "dummy",val = nil, next = nodes["SetEnableStart"] }}')
        self.data.append('')

        self.data.append('nodes["SetEnableStart"].atom = atoms["$SetEnable"]')
        self.data.append('nodes["SetEnableStart"].successor = {{var = "dummy",val = nil, next = nodes["InitIDCode1"] }}')
        self.data.append('')

        self.data.append('nodes["StartWithoutEnable"].atom = atoms["$Local"]')
        self.data.append('nodes["StartWithoutEnable"].successor = {{var = "dummy",val = nil, next = nodes["InitIDCode1"] }}')
        self.data.append('')

        if source1 == 0:
            nodeJump = "InitScanner1"
        else:
            nodeJump = "WaitIdCodeResult1"

        self.data.append('nodes["InitIDCode1"].atom = atoms["$IdCodeInit$1"]')
        self.data.append('nodes["InitIDCode1"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')


        # Needed for reading allowed barcodes
        self.data.append('nodes["InitScanner1"].atom = atoms["$InitScanner$1"]')
        self.data.append('nodes["InitScanner1"].successor = {{var = "idcodestatus",val = c.jobResultScannerNotReady, next = nodes["DisplayScannerNotActive1"]},')
        self.data.append('		                 {var = "idcodestatus",val = c.jobResultComponentHasNoScanner, next = nodes["DisplayNoScanner1"]},')
        self.data.append('		                 {var = "idcodestatus",val = c.jobResultScannerRdy, next = nodes["WaitForScanInitAck1"]}}')
        self.data.append('')

        # Only if Scanner is set as source
        if source1 == 0:
            self.data.append('nodes["DisplayNoScanner1"].atom = atoms["$DisplayNoScanner"]')
            self.data.append('nodes["DisplayNoScanner1"].successor = {{var = "dummy",val = nil, next = nodes["WaitForScanInitAck1"] }}')
            self.data.append('')

            self.data.append('nodes["DisplayScannerNotActive1"].atom = atoms["$DisplayScannerNotActive"]')
            self.data.append('nodes["DisplayScannerNotActive1"].successor = {{var = "dummy",val = nil, next = nodes["WaitForScanInitAck1"] }}')
            self.data.append('')

            self.data.append('nodes["WaitForScanInitAck1"].atom = atoms["$WaitScanInitAck$1"]')

            if _op_mode == 2:
                self.data.append('nodes["WaitForScanInitAck1"].successor = {{var = "dummy",val = nil, next = nodes["WaitInput1"] }}')
                self.data.append('')

                self.data.append('nodes["WaitInput1"].atom = atoms["$TriggerInGrp1"]')
                self.data.append('nodes["WaitInput1"].successor = {{var = "idcodestatus", val = c.jobResultHMIPrgSelected, next = nodes["SetNewPrgNr"]},')
                self.data.append('                                 {var = "idcodestatus", val = c.jobResultHMIJobSelected, next = nodes["SetNewJobNr"]},')
                self.data.append('                                 {var = "idcodestatus", val = c.jobResultScanTrigger, next = nodes["Scanning1"]}}')
            else:
                self.data.append('nodes["WaitForScanInitAck1"].successor = {{var = "dummy",val = nil, next = nodes["WaitForScanStartTrigger1"] }}')
                self.data.append('')

                self.data.append('nodes["WaitForScanStartTrigger1"].atom = atoms["$WaitScanStartTrigger$1"]')
                self.data.append('nodes["WaitForScanStartTrigger1"].successor = {{var = "dummy",val = nil, next = nodes["Scanning1"] }}')

            self.data.append('')
            self.data.append('nodes["Scanning1"].atom = atoms["$DoScan$1"]')
            self.data.append('nodes["Scanning1"].successor = {{var = "dummy",val = nil, next = nodes["WaitIdCodeResult1"] }}')
            self.data.append('')


        self.data.append('--Wiederholsequenz, wenn Scanner keine Barcode gelesen hat')
        self.data.append('nodes["RepeatTimeout1"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatTimeout1"].successor = {{var = "dummy",val = nil, next = nodes["RepeatTimeoutDelay1"]}}')
        self.data.append('nodes["RepeatTimeoutDelay1"].atom = atoms["$ScanTimeoutMsg$1"]')
        self.data.append('nodes["RepeatTimeoutDelay1"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('--Wiederholsequenz, wenn Scanner einen nicht unterstuetzten Code gelesen hat')
        self.data.append('nodes["RepeatCodeNotSupported1"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatCodeNotSupported1"].successor = {{var = "dummy",val = nil, next = nodes["RepeatCodeNotSupportedDelay1"]}}')
        self.data.append('nodes["RepeatCodeNotSupportedDelay1"].atom = atoms["$CodeNotSupportedMsg$1"]')
        self.data.append('nodes["RepeatCodeNotSupportedDelay1"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('--Wiederholsequenz, wenn Scanner einen nicht aktiven Code gelesen hat')
        self.data.append('nodes["RepeatCodeNotActive1"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatCodeNotActive1"].successor = {{var = "dummy",val = nil, next = nodes["RepeatCodeNotActiveDelay1"]}}')
        self.data.append('nodes["RepeatCodeNotActiveDelay1"].atom = atoms["$CodeNotActiveMsg$1"]')
        self.data.append('nodes["RepeatCodeNotActiveDelay1"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('--Wiederholsequenz, wenn Id Code nicht zugeordnet werden konnte')
        self.data.append('nodes["RepeatCodeNoAssignment1"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatCodeNoAssignment1"].successor = {{var = "dummy",val = nil, next = nodes["RepeatCodeNoAssignmentDelay1"]}}')
        self.data.append('nodes["RepeatCodeNoAssignmentDelay1"].atom = atoms["$DisplayNoAssignment$1"]')
        self.data.append('nodes["RepeatCodeNoAssignmentDelay1"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('nodes["ScanTimeout1"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["ScanTimeout1"].successor = {{var = "dummy",val = nil, next = nodes["ScanTimeoutDelay1"]}}')
        self.data.append('nodes["ScanTimeoutDelay1"].atom = atoms["$ScanTimeoutDelay$1"]')
        self.data.append('nodes["ScanTimeoutDelay1"].successor = {{var = "dummy",val = nil, next = nodes["DoNokResult"]}}')

        self.data.append('nodes["WaitIdCodeResult1"].atom = atoms["$TriggerInGrp2"]')
        self.data.append('nodes["WaitIdCodeResult1"].successor = {{var = "timeout",val = 1, next = nodes["ScanTimeout1"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultScanTimeout, next = nodes["RepeatTimeout1"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultScannedCodeNotActive, next = nodes["RepeatCodeNotActive1"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultScannedCodeNotSupported, next = nodes["RepeatCodeNotSupported1"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultNewIDCodeAssignment, next = nodes["DisplayNewIDCode"]},')

        if _op_mode == 2:
            self.data.append('	                             {var = "idcodestatus", val = c.jobResultHMIPrgSelected, next = nodes["SetNewPrgNr"]},')
            self.data.append('	                             {var = "idcodestatus", val = c.jobResultHMIJobSelected, next = nodes["SetNewJobNr"]},')

        self.data.append('	                             {var = "idcodestatus",val = c.jobResultNoAssignmentFound, next = nodes["RepeatCodeNoAssignment1"]}}')
        self.data.append('')

        self.data.append('nodes["DisplayNewIDCode"].atom = atoms["$DisplayIDCode"]')
        self.data.append('nodes["DisplayNewIDCode"].successor = {{var = "dummy",val = nil, next = nodes["DisplayNewIDCodeDelay"] }}')
        self.data.append('')

        self.data.append('nodes["DisplayNewIDCodeDelay"].atom = atoms["$DisplayIDCodeTimeDelay"]')
        self.data.append('nodes["DisplayNewIDCodeDelay"].successor = {{var = "dummy",val = nil, next = nodes["ScanFinalOK"] }}')
        self.data.append('')

        self.data.append('nodes["ScanFinalOK"].atom = atoms["$ScanFinalOK"]')
        self.data.append('nodes["ScanFinalOK"].successor = {{var = "dummy",val = nil, next = nodes["InitIDCode2"] }}')
        self.data.append('')

        #-----------------------------------------------------------------------------------------------------
        #Start 2nd idcode step
        #-----------------------------------------------------------------------------------------------------

        if source2 == 0:
            nodeJump = "InitScanner2"
        else:
            nodeJump = "WaitIdCodeResult2"

        self.data.append('nodes["InitIDCode2"].atom = atoms["$IdCodeInit$2"]')
        self.data.append('nodes["InitIDCode2"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('nodes["InitScanner2"].atom = atoms["$InitScanner$2"]')
        self.data.append('nodes["InitScanner2"].successor = {{var = "idcodestatus",val = c.jobResultScannerNotReady, next = nodes["DisplayScannerNotActive2"]},')
        self.data.append('		                 {var = "idcodestatus",val = c.jobResultComponentHasNoScanner, next = nodes["DisplayNoScanner2"]},')
        self.data.append('		                 {var = "idcodestatus",val = c.jobResultScannerRdy, next = nodes["WaitForScanInitAck2"]}}')
        self.data.append('')

        self.data.append('nodes["DisplayNoScanner2"].atom = atoms["$DisplayNoScanner"]')
        self.data.append('nodes["DisplayNoScanner2"].successor = {{var = "dummy",val = nil, next = nodes["WaitForScanInitAck2"] }}')
        self.data.append('')

        self.data.append('nodes["DisplayScannerNotActive2"].atom = atoms["$DisplayScannerNotActive"]')
        self.data.append('nodes["DisplayScannerNotActive2"].successor = {{var = "dummy",val = nil, next = nodes["WaitForScanInitAck2"] }}')
        self.data.append('')

        self.data.append('nodes["WaitForScanInitAck2"].atom = atoms["$WaitScanInitAck$2"]')


        if _op_mode == 2:
            self.data.append('nodes["WaitForScanInitAck2"].successor = {{var = "dummy",val = nil, next = nodes["WaitInput2"] }}')
            self.data.append('')

            self.data.append('nodes["WaitInput2"].atom = atoms["$TriggerInGrp3"]')
            self.data.append('nodes["WaitInput2"].successor = {{var = "idcodestatus", val = c.jobResultHMIPrgSelected, next = nodes["SetNewPrgNr"]},')
            self.data.append('                                 {var = "idcodestatus", val = c.jobResultHMIJobSelected, next = nodes["SetNewJobNr"]},')
            self.data.append('                                 {var = "idcodestatus", val = c.jobResultScanTrigger, next = nodes["Scanning2"]}}')
        else:
            self.data.append('nodes["WaitForScanInitAck2"].successor = {{var = "dummy",val = nil, next = nodes["WaitForScanStartTrigger2"] }}')
            self.data.append('')

            self.data.append('nodes["WaitForScanStartTrigger2"].atom = atoms["$WaitScanStartTrigger$2"]')
            self.data.append('nodes["WaitForScanStartTrigger2"].successor = {{var = "dummy",val = nil, next = nodes["Scanning2"] }}')


        self.data.append('')

        self.data.append('nodes["Scanning2"].atom = atoms["$DoScan$2"]')
        self.data.append('nodes["Scanning2"].successor = {{var = "dummy",val = nil, next = nodes["WaitIdCodeResult2"] }}')
        self.data.append('')

        self.data.append('--Wiederholsequenz, wenn Scanner keine Barcode gelesen hat')
        self.data.append('nodes["RepeatTimeout2"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatTimeout2"].successor = {{var = "dummy",val = nil, next = nodes["RepeatTimeoutDelay2"]}}')
        self.data.append('nodes["RepeatTimeoutDelay2"].atom = atoms["$ScanTimeoutMsg$2"]')
        self.data.append('nodes["RepeatTimeoutDelay2"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('--Wiederholsequenz, wenn Scanner einen nicht unterstuetzten Code gelesen hat')
        self.data.append('nodes["RepeatCodeNotSupported2"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatCodeNotSupported2"].successor = {{var = "dummy",val = nil, next = nodes["RepeatCodeNotSupportedDelay2"]}}')
        self.data.append('nodes["RepeatCodeNotSupportedDelay2"].atom = atoms["$CodeNotSupportedMsg$2"]')
        self.data.append('nodes["RepeatCodeNotSupportedDelay2"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('--Wiederholsequenz, wenn Scanner einen nicht aktiven Code gelesen hat')
        self.data.append('nodes["RepeatCodeNotActive2"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatCodeNotActive2"].successor = {{var = "dummy",val = nil, next = nodes["RepeatCodeNotActiveDelay2"]}}')
        self.data.append('nodes["RepeatCodeNotActiveDelay2"].atom = atoms["$CodeNotActiveMsg$2"]')
        self.data.append('nodes["RepeatCodeNotActiveDelay2"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('--Wiederholsequenz, wenn Id Code nicht zugeordnet werden konnte')
        self.data.append('nodes["RepeatCodeNoAssignment2"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatCodeNoAssignment2"].successor = {{var = "dummy",val = nil, next = nodes["RepeatCodeNoAssignmentDelay2"]}}')
        self.data.append('nodes["RepeatCodeNoAssignmentDelay2"].atom = atoms["$DisplayNoAssignment$2"]')
        self.data.append('nodes["RepeatCodeNoAssignmentDelay2"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('nodes["ScanTimeout2"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["ScanTimeout2"].successor = {{var = "dummy",val = nil, next = nodes["ScanTimeoutDelay2"]}}')
        self.data.append('nodes["ScanTimeoutDelay2"].atom = atoms["$ScanTimeoutDelay$2"]')
        self.data.append('nodes["ScanTimeoutDelay2"].successor = {{var = "dummy",val = nil, next = nodes["DoNokResult"]}}')

        self.data.append('nodes["WaitIdCodeResult2"].atom = atoms["$TriggerInGrp4"]')
        self.data.append('nodes["WaitIdCodeResult2"].successor = {{var = "timeout",val = 1, next = nodes["ScanTimeout2"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultScanTimeout, next = nodes["RepeatTimeout2"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultScannedCodeNotActive, next = nodes["RepeatCodeNotActive2"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultScannedCodeNotSupported, next = nodes["RepeatCodeNotSupported2"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultNewPrgAssignment, next = nodes["SetNewPrgNr"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultNewJobAssignment, next = nodes["SetNewJobNr"]},')

        if _op_mode == 2:
            self.data.append('	                             {var = "idcodestatus", val = c.jobResultHMIPrgSelected, next = nodes["SetNewPrgNr"]},')
            self.data.append('	                             {var = "idcodestatus", val = c.jobResultHMIJobSelected, next = nodes["SetNewJobNr"]},')

        self.data.append('	                             {var = "idcodestatus",val = c.jobResultNoAssignmentFound, next = nodes["RepeatCodeNoAssignment2"]}}')
        self.data.append('')

        self.data.append('--Gutfall Job')
        self.data.append('nodes["SetNewJobNr"].atom = atoms["$JobNr"]')
        self.data.append('nodes["SetNewJobNr"].successor = {{var = "dummy",val = nil, next = nodes["UnsetEnableJob"]}}')
        self.data.append('')

        self.data.append('--Enable wegnehmen')
        self.data.append('nodes["UnsetEnableJob"].atom = atoms["$UnsetEnable"]')
        self.data.append('nodes["UnsetEnableJob"].successor = {{var = "dummy",val = nil, next = nodes["DisplayNewJobNr"]}}')
        self.data.append('')

        self.data.append('--Anzeige Job Nr')
        self.data.append('nodes["DisplayNewJobNr"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["DisplayNewJobNr"].successor = {{var = "dummy",val = nil, next = nodes["DisplayNewJobNrDelay"]}}')
        self.data.append('')

        self.data.append('nodes["DisplayNewJobNrDelay"].atom = atoms["$DisplayJobNrTimeDelay"]')
        self.data.append('nodes["DisplayNewJobNrDelay"].successor = {{var = "dummy",val = nil, next = nodes["JobNrFinalOK"]}}')
        self.data.append('')


        self.data.append('nodes["JobNrFinalOK"].atom = atoms["$ScanFinalJobOK"]')
        self.data.append('nodes["JobNrFinalOK"].successor = {{var = "dummy",val = nil, next = f.EndNode }}')
        self.data.append('')

        self.data.append('--Gutfall Prg')
        self.data.append('nodes["SetNewPrgNr"].atom = atoms["$PrgNr"]')
        self.data.append('nodes["SetNewPrgNr"].successor = {{var = "dummy",val = nil, next = nodes["ResetBatchCounter"]}}')
        self.data.append('')

        self.data.append('-- reset BatchCounter')
        self.data.append('nodes["ResetBatchCounter"].atom = atoms["$ResetBatchCounter"]')
        self.data.append('nodes["ResetBatchCounter"].successor = {{var = "dummy",val = nil, next = nodes["SetEnablePrg"]}}')
        self.data.append('')

        self.data.append('--Enable setzen')
        self.data.append('nodes["SetEnablePrg"].atom = atoms["$SetEnable"]')
        self.data.append('nodes["SetEnablePrg"].successor = {{var = "dummy",val = nil, next = nodes["DisplayNewPrgNr"]}}')
        self.data.append('')

        self.data.append('--Anzeige Job Nr')
        self.data.append('nodes["DisplayNewPrgNr"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["DisplayNewPrgNr"].successor = {{var = "dummy",val = nil, next = nodes["DisplayNewPrgNrDelay"]}}')
        self.data.append('')
        self.data.append('nodes["DisplayNewPrgNrDelay"].atom = atoms["$DisplayPrgNrTimeDelay"]')
        self.data.append('nodes["DisplayNewPrgNrDelay"].successor = {{var = "dummy",val = nil, next = nodes["DoNokResult"]}}')
        self.data.append('')

        self.data.append('--Kein ID Code -> Beenden Skript')
        self.data.append('nodes["DoNokResult"].atom = atoms["$DoNokResult"]')
        self.data.append('nodes["DoNokResult"].successor = {{var = "dummy",val = nil, next = f.EndNode}}')
        self.data.append('')

        self.data.append('------------ CS/SE System ------- END -------------------------------------')
        self.data.append('')
        self.data.append('')
        self.data.append('')
        self.data.append('--Eigentlicher Start Code--')
        self.data.append('f.setInitNode(initNode)')
        self.data.append('f.checkPlausib(nodes)')
        #self.data.append('cpp.job:logMsg("ENABLE=" .. ENABLE)')
        self.data.append('if( ENABLE == "1") then')
        self.data.append('	f.go(nodes["StartWithEnable"])')
        self.data.append('else')
        self.data.append('	f.go(nodes["StartWithoutEnable"])')
        self.data.append('end')
        self.data.append('f.cleanUpNodes(atoms, nodes)')
        self.data.append('package.loaded["atoms"]=nil')


    def create(self, codes1, timeout1, range1, target1, trigger1, timeouttext1,
               display_text1, source1, play_sound1, laserontime1,
               id_input_name1, id_input_comment1,
               codes2, timeout2, range2, target2, trigger2, timeouttext2,
               display_text2, source2, play_sound2, laserontime2,
               id_input_name2, id_input_comment2,
               user, comment, date, display_time, op_mode):

        id1 = '$1'
        id2 = '$2'

        self.requires()
        self.initNode(user, comment, date, display_time, id_input_name1, id_input_comment1, id_input_name2, id_input_comment2)
        self.config()
        self.localNode()
        self.setEnable()
        self.unsetEnable()
        self.idCodeInit(source1, 1, range1, target1, id1)

        self.initScanner(codes1, laserontime1, trigger1, play_sound1, id1)
        if source1 == 0:
            self.displayNoScanner()
            self.displayScannerNotActive()
            self.waitScanInitAck(id1)
            self.waitScanStartTrigger(id1, display_text1, source1)
            self.doScan(id1)

        if op_mode == 2:
            self.data.extend(atoms.WaitHMIInput(id1))
            self.data.extend(atoms.TriggerInGrp("\"$WaitHMIInput$1\", \"$WaitScanStartTrigger$1\"", "1"))

        self.waitIDCodeTimeout(timeout1, id1, display_text1, source1)
        self.waitIDCode(id1)

        if op_mode == 2 and source1 == 1:
            self.data.extend(atoms.TriggerInGrp("\"$WaitHMIInput$1\", \"$WaitIdCode$1\", \"$WaitIdCodeTimeout$1\"", "2"))
        else:
            self.data.extend(atoms.TriggerInGrp("\"$WaitIdCode$1\", \"$WaitIdCodeTimeout$1\"", "2"))

        self.displayIdCode(display_time)
        self.displayIdCodeTimeDelay()
        self.scanFinalOK(source2, trigger2)
        self.scanTimeoutReached(id1, timeouttext1)
        self.scanTimeoutMsg(id1)
        self.codeNotSupportedMsg(id1)
        self.codeNotActiveMsg(id1)
        self.codeNotAssignedMsg(id1)

        self.idCodeInit(source2, 1, range2, target2, id2)
        self.initScanner(codes2, laserontime2, trigger2, play_sound2, id2)
        self.waitScanInitAck(id2)
        self.waitScanStartTrigger(id2, display_text2, source2)

        if op_mode == 2:
            self.data.extend(atoms.WaitHMIInput(id2))
            self.data.extend(atoms.TriggerInGrp("\"$WaitHMIInput$2\", \"$WaitScanStartTrigger$2\"", "3"))


        self.doScan(id2)
        self.waitIDCodeTimeout(timeout2, id2, display_text2, source2)
        self.waitIDCode(id2)

        if op_mode == 2 and source2 == 1:
            self.data.extend(atoms.TriggerInGrp("\"$WaitHMIInput$2\", \"$WaitIdCode$2\", \"$WaitIdCodeTimeout$2\"", "4"))
        else:
            self.data.extend(atoms.TriggerInGrp("\"$WaitIdCode$2\", \"$WaitIdCodeTimeout$2\"", "4"))


        self.data.extend(atoms.PrgNr())
        self.data.extend(atoms.ResetBatchCounter(op_mode))

        self.displayPrgNrTimeDelay(target2)
        self.jobNr()
        self.displayJobNrTimeDelay(target2)
        self.displayMsgTimeDelay(display_time)
        self.scanFinalJobOk()
        self.doNokResult()
        self.scanTimeoutReached(id2, timeouttext2)
        self.scanTimeoutMsg(id2)
        self.codeNotSupportedMsg(id2)
        self.codeNotActiveMsg(id2)
        self.codeNotAssignedMsg(id2)
        self.publishAtoms()
        self.nodes(op_mode)
        self.workflow(source1, source2, op_mode)

        return self.data
