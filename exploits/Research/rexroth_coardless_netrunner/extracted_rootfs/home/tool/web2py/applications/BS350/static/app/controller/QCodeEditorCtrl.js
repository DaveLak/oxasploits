/*global Ext: false, TR: false, APP: false, BS350: false */
Ext.define('BS350.controller.QCodeEditorCtrl', {
  extend: 'BS350.custom.ViewController',
  models: ['QCodeItem'],
  views: ['QCodeEditorView', 'BS350.custom.ToggleColumn'],

  items: [
    { name: 'btnOk', query: '#btnOK', actions: {click: 'setAndClose'}},
    { name: 'btnCancel', query: '#btnCancel', actions: {click: 'close'}},

    { name: 'formPanel', query: '#formPanel', actions: {change: 'updateButtons', dirtychange: 'updateButtons', validitychange: 'updateButtons' } },
    { name: 'generalTree', query: '#generalTree'}
  ],
  initView: function () {
    var me = this;
    //panel = this.V.formPanel,
    var treePanel = this.V.generalTree;
    var treeStore = treePanel.getStore();
    var data = null;
    if (this.qcode === null) {
      data = BS350.model.QCodeGridRowModel.create();
      data.set("mfNokList", []);
      data.set("mfOkList", []);
      data.set("categoryList", []);
      this.qcode = data;
    } else {
      data = this.qcode;
    }
    var mfNokList = data.get('mfNokList');
    var mfOkList = data.get('mfOkList');
    var mfAllOther = data.get('mfAllOther');
    var categoryList = data.get('categoryList');
    var categorySimple = Ext.Array.map(categoryList, function (el) { return el.get('value'); });
    var mfNokSimple = Ext.Array.map(mfNokList, function (el) { return el.get('value'); });
    var mfOkSimple = Ext.Array.map(mfOkList, function (el) { return el.get('value'); });
    function convertToChoice(attr) {
      if (attr === "true") {
        return "0";
      }
      return "1";
    }
    function convert(attr) {
      if (attr === "A") {
        if (Ext.Array.contains(mfNokSimple, attr + "+")) { return "1"; }
        if (Ext.Array.contains(mfNokSimple, attr + "-")) { return "2"; }
        if (Ext.Array.contains(mfOkSimple, attr + "+")) { return "3"; }
      }
      if (attr === "T") {
        if (Ext.Array.contains(mfNokSimple, attr + "+")) { return "1"; }
        if (Ext.Array.contains(mfNokSimple, attr + "-")) { return "2"; }
        if (Ext.Array.contains(mfOkSimple, attr + "+")) { return "3"; }
      }
      if (attr === "t+") {
        if (Ext.Array.contains(mfNokSimple, attr)) { return "1"; }
        if (Ext.Array.contains(mfOkSimple, attr)) { return "2"; }
      }
      return Ext.Array.contains(mfNokSimple, attr) ? "1" : (Ext.Array.contains(mfOkSimple, attr) ? "3" : "0");
    }
    var rcodeValues = []
    var reworkCodes = {
        "expanded": true,
        "leaf": true,
        "myText": "Rework Code",
        "myValue": data.get('reworkCode'),
        "type": "COMBOBOX",
        "choice": rcodeValues
      };
    Ext.Ajax.request({
      url: '/BS350/qcode/rcodes',
      success: function (res) {
        var data = Ext.JSON.decode(res.responseText);
        data[0] = [0, TR(data[0][1])];
        reworkCodes['choice'] = data;
        var tabPanel = Ext.ComponentQuery.query('#generalTree')[0];
        tabPanel.getRootNode().cascadeBy(function () {
          if (arguments[0].get('myText') === 'Rework Code') {
            arguments[0].set('choice', data);
          }
        });
      },
      failure: function (res) {
        // rcodeValues remain empty
      }
    });
    var invisibleRdonly = data.get('RdOnly');
    var stepData = [
        {
          "expanded": false,
          "invisible": true,
          "leaf": true,
          "myText": "qcodeId",
          "myValue": data.get('id')
//          "type": "EDITBOX"
        },
        {
          "expanded": false,
          "invisible": true,
          "leaf": true,
          "myText": "RdOnly",
          "myValue": data.get('RdOnly')
//          "type": "EDITBOX"
        },
        {
          "expanded": true,
          "leaf": true,
          "myText": "Id",
          "myValue": data.get('qcode'),
          "validation": "QCodeId",
          "minLength": 1,
          "maxLength": 40,
          "type": "EDITBOX"
        },
        reworkCodes,
        {
          "expanded": !invisibleRdonly,
          "invisible": invisibleRdonly,
          "leaf": false,
          "myText": "Values",
          "myValue": "",
          "children": [
            {
              "expanded": !invisibleRdonly,
              "invisible": invisibleRdonly,
              "leaf": false,
              "myText": "Monitor",
              "validation": 'MfNokValidation',
              "children": [
                {"expanded": true,
                  "leaf": true,
                  "myText": "Torque",
                  "myValue": convert("T"),
                  "type": "COMBOBOX",
                  "choice": [
                    [0, "None"],
                    [1, "T+"],
                    [2, "T-"],
                    [3, "OK"]
                  ]
                  },
                {"expanded": true,
                  "leaf": true,
                  "myText": "Angle",
                  "myValue": convert("A"),
                  "type": "COMBOBOX",
                  "choice": [
                    [0, "None"],
                    [1, "A+"],
                    [2, "A-"],
                    [3, "OK"]
                  ]
                  },
                {"expanded": true,
                  "leaf": true,
                  "myText": BS350.custom.Utils.QCODE_TIME,
                  "myValue": convert("t+"),
                  "type": "COMBOBOX",
                  "choice": [
                    [0, "None"],
                    [1, "t+"],
                    [2, "OK"]
                  ]
                  } /*,
                {"expanded": true,
                  "leaf": true,
                  "myText": "NOK",
                  "myValue": convert("NOK"),
                  "type": "COMBOBOX",
                  "choice": [
                    [0, "None"],
                    [1, "NOK"],
                    [2, "OK"]
                  ]
                  }*/
              ]
            },
            {
              "expanded": true,
              "leaf": true,
              "myText": "All Other MF OK",
              "myValue": convertToChoice(mfAllOther),
              "type": "COMBOBOX",
              "choice": [
                [0, "OK"],
                [1, "OK/NOK"]
              ]
            },
            {
              "expanded": true,
              "invisible": invisibleRdonly,
              "leaf": false,
              "myText": "Category",
              "myValue": "",
              "children": [
                {"type": "CHECKBOX", "expanded": true, "leaf": true, "myText": "1: Tightening", "myValue":  Ext.Array.contains(categorySimple, "1: Tightening").toString()},
                {"type": "CHECKBOX", "expanded": true, "leaf": true, "myText": "2: Prelim. torque", "myValue": Ext.Array.contains(categorySimple, "2: Prelim. torque").toString()},
                {"type": "CHECKBOX", "expanded": true, "leaf": true, "myText": "3: End torque", "myValue": Ext.Array.contains(categorySimple, "3: End torque").toString()},
                {"type": "CHECKBOX", "expanded": true, "leaf": true, "myText": "4: Loosen", "myValue": Ext.Array.contains(categorySimple, "4: Loosen").toString()},
                {"type": "CHECKBOX", "expanded": true, "leaf": true, "myText": "5: Rework", "myValue": Ext.Array.contains(categorySimple, "5: Rework").toString()},
                {"type": "CHECKBOX", "expanded": true, "leaf": true, "myText": "6: Function A", "myValue": Ext.Array.contains(categorySimple, "6: Function A").toString()},
                {"type": "CHECKBOX", "expanded": true, "leaf": true, "myText": "7: Function B", "myValue": Ext.Array.contains(categorySimple, "7: Function B").toString()},
                {"type": "CHECKBOX", "expanded": true, "leaf": true, "myText": "8: Function C", "myValue": Ext.Array.contains(categorySimple, "8: Function C").toString()},
                {"type": "CHECKBOX", "expanded": true, "leaf": true, "myText": "9: Function D", "myValue": Ext.Array.contains(categorySimple, "9: Function D").toString()},
                {"type": "CHECKBOX", "expanded": true, "leaf": true, "myText": "10: Function E", "myValue": Ext.Array.contains(categorySimple, "10: Function E").toString()},
                {"type": "CHECKBOX", "expanded": true, "leaf": true, "myText": "11: Start", "myValue": Ext.Array.contains(categorySimple, "11: Start").toString()}
              ]
            }
          ]
        }
      ];
    var stepDataCopy = Ext.decode(Ext.encode(stepData));
    treeStore.loadNewData(stepDataCopy);

    var controller = this.getController('QCodeCtrl');
    if (controller.access !== 'w') {
      me.V.btnOk.hide();
    }
  },
  mapQCodeEditorResult2ModelElements: function (res) {
    var el;
    var qcodeListEl;
    var qcodeListEl2;
    var qcodeListEl3;
    var mappingObj = {
      mapA: {"1": "A+", "2": "A-", "3": ["A+", "A-"]},
      mapOkNok: {"1": "NOK", "2": "NOK", "3": "OK"},
      mapT: {"1": "T+", "2": "T-", "3": ["T+", "T-"]},
      mapt: {"1": "t+", "2": ["t+"]},
      maptOkNok: {"1": "NOK", "2": "OK"}
    };
    var mapResult = {
      mfOkList: [],
      mfOk: "",
      mfNokList: [],
      mfNok: "",
      categoryList: [],
      category: ""
    };
    for (el in res) {
      if (res.hasOwnProperty(el)) {
        if (Ext.Array.contains(BS350.custom.Utils.QCODE_ENTRIES, el)) {
          if (el === BS350.custom.Utils.QCODE_ANGLE) {
            BS350.custom.Utils.addElementToList(res[el], mappingObj.mapA, mapResult, mappingObj.mapOkNok);
          } else if (el === BS350.custom.Utils.QCODE_TORQUE) {
            BS350.custom.Utils.addElementToList(res[el], mappingObj.mapT, mapResult, mappingObj.mapOkNok);
          } else if (el === BS350.custom.Utils.QCODE_TIME) {
            BS350.custom.Utils.addElementToList(res[el], mappingObj.mapt, mapResult, mappingObj.maptOkNok);
          /* } else if (res[el] === "0") { */
          } else if (res[el] === "1") {
            qcodeListEl = Ext.create('BS350.model.QCodeMfList');
            qcodeListEl.set('value', el);
            mapResult.mfNokList.push(qcodeListEl);
            if (mapResult.mfNok === "") {
              mapResult.mfNok = el;
            } else {
              mapResult.mfNok = mapResult.mfNok + ", " + el;
            }
          } else if (res[el] === "3") {
            qcodeListEl2 = Ext.create('BS350.model.QCodeMfList');
            qcodeListEl2.set('value', el);
            mapResult.mfOkList.push(qcodeListEl2);
            if (mapResult.mfOk === "") {
              mapResult.mfOk = el;
            } else {
              mapResult.mfOk = mapResult.mfOk + ", " + el;
            }
          }
        } else if (Ext.Array.contains([
            '1: Tightening',
            '2: Prelim. torque',
            '3: End torque',
            '4: Loosen',
            '5: Rework',
            '6: Function A',
            '7: Function B',
            '8: Function C',
            '9: Function D',
            '10: Function E',
            '11: Start'], el)) {
          if (res[el] === "true") {
            qcodeListEl3 = Ext.create('BS350.model.QCodeMfList');
            if (mapResult.category.length > 0) {
              mapResult.category = mapResult.category + ", " + el;
            } else {
              mapResult.category = el;
            }
            qcodeListEl3.set('value', el);
            mapResult.categoryList.push(qcodeListEl3);
          }
        }
      }
    }
    var qcodeListEl4;
    if (mapResult.categoryList.length === 0 && !res.RdOnly) {
      qcodeListEl4 = Ext.create('BS350.model.QCodeMfList');
      qcodeListEl4.set('value', 'All');
      mapResult.categoryList.push(qcodeListEl4);
    } else if (mapResult.categoryList.length === 0 && res.RdOnly) {
      qcodeListEl4 = Ext.create('BS350.model.QCodeMfList');
      qcodeListEl4.set('value', 'System');
      mapResult.categoryList.push(qcodeListEl4);
    }
    if (mapResult.category.length === 0) {
      if (res.RdOnly) {
        mapResult.category = "System";
      } else {
        mapResult.category = "All";
      }
    }
    function convert(el) {
      var result = (el === "1" ? "false" : "true");
      return result;
    }
    mapResult.mfAllOther = convert(res['All Other MF OK']);
    return mapResult;
  },
  copyFromToStep: function (stepData, guiData) {
    var me = this;
    var controller = this.getController('QCodeCtrl');
    var selection = controller.V.grid.getSelectionModel().getSelection();

    if (guiData.myValue !== undefined) {
      guiData.myValue = stepData.myValue.toString();
    }

    function getMyText(data, res) {
      var a;
      var j;
      if (data.myText !== undefined && data.myText !== "") {
        res[data.myText] = data.myValue;
      }
      for (a in data) {

        if (data.hasOwnProperty(a)) {
          if (a === "children") {
            for (j = 0; j < data[a].length; j++) {
              getMyText(data[a][j], res);
            }
          }
        }

      }
    }

    var res = {};
    getMyText(stepData, res);
    var store = controller.V.grid.getStore();
    if (typeof res.RdOnly === 'string') {
      res.RdOnly = (res.RdOnly === "true" ? true : false);
    }
    var mapResult = me.mapQCodeEditorResult2ModelElements(res);

    function transferDataToGrid() {
      var gridElement;

      if (res.qcodeId === "0") {
        gridElement = Ext.create('BS350.model.QCodeGridRowModel');
      } else {
        gridElement = selection[0];
      }

      if (!res.RdOnly) {
        if (mapResult.category === "" && (gridElement.get('category') === "All" || gridElement.get('category') === "System")) {
          gridElement.data.category = gridElement.get('category');
        } else if (mapResult.category !== gridElement.get('category')) {
          gridElement.set('category', mapResult.category);
        }

        if (mapResult.categoryList.length === 0 && !gridElement.get('RdOnly')) {
          gridElement.set('category', 'All');
        } else if (mapResult.categoryList.length === 0 && gridElement.get('RdOnly')) {
          gridElement.set('category', 'System');
        }

        gridElement.set("mfOkList", mapResult.mfOkList);
        gridElement.set("mfOk", mapResult.mfOk);
        gridElement.set("mfNokList", mapResult.mfNokList);
        gridElement.set("mfNok", mapResult.mfNok);
        gridElement.set("categoryList", mapResult.categoryList);
        gridElement.set('id', res.qcodeId);
        gridElement.set('qcode', res.Id);
        gridElement.set('reworkCode', res['Rework Code']);
        gridElement.set('mfAllOther', mapResult.mfAllOther);
        gridElement.set('RdOnly', res.RdOnly);

        if (res.qcodeId === "0") {
          if (selection.length > 0) {
            var mypos = store.indexOf(selection[0]);
            gridElement.set('id', store.count() + 2);
            controller.V.grid.getStore().insert(mypos + 1, gridElement);
          } else {
            var lastRec = store.getAt(store.findBy(
              function (record) {
                if (record.get('qcode') === "128" && record.get('RdOnly') === true) {
                  return true;
                }
              }
            ));
            var mypos2 = store.indexOf(lastRec);
            gridElement.set('id', store.count() + 2);
            controller.V.grid.getStore().insert(mypos2, gridElement);
          }
        }
      } else {
        gridElement.set('qcode', res.Id);
        gridElement.set('reworkCode', res['Rework Code']);
      }
    }

    var foundQCode = store.qcodeAlreadyDefined(res.Id, res.qcodeId);
    var checkConfirm = function (arg) {
      if (arg === "yes") {
        transferDataToGrid();
        me.view.close();
      }
    };

    var isEqual = [];
    store.each(function (item) {
      if (parseInt(res.qcodeId, 10) !== item.internalId) {

        if (item.get('category') === mapResult.category &&
            item.get('mfNok') === mapResult.mfNok &&
            item.get('mfOk') === mapResult.mfOk &&
            item.get('mfAllOther') === mapResult.mfAllOther) {
          isEqual.push(item.get('qcode'));
        }
      }
    });
    BS350.custom.Utils.qcodeDoubletteConfirmation(foundQCode, isEqual, res.Id, checkConfirm);
  },

  setAndClose: function () {

    var me = this,
      tree = this.V.generalTree,
      startNode = tree.getRootNode(),
      stepData = this.qcode.getData(),

      stepDataCopy = Ext.decode(Ext.encode(stepData)),
      guiDataEdited = me.serialize(startNode);

    me.copyFromToStep(guiDataEdited, stepDataCopy);
  },


  serialize: function (rootNode) {
    var me = this,
      result = Ext.data.writer.Json.prototype.getRecordData(rootNode),
      childNodes = rootNode.childNodes,
      len = childNodes.length,
      children,
      i;

    if (len > 0) {
      children = [];
      for (i = 0; i < len; i++) {
        children.push(me.serialize(childNodes[i]));
      }
      result.children = children;
    }
    return result;
  },

  close: function () {
    this.view.close();
  },

  updateButtons: function () {
    var formPanelValid = this.V.formPanel.getForm().isValid();
    if (!formPanelValid || this.invalid) {
      this.V.btnOk.setDisabled(true);
    } else {
      this.V.btnOk.setDisabled(false);
    }
  }

});
