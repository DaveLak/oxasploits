/**
 * Created by kai on 27.11.14.
 */
/*global Ext: false, TR: false, BS350: false */
Ext.define('BS350.controller.AssignmentCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['AssignmentView'],
  stores: ['AssignStore'],

  items: [
    { name: 'assignForm', query: '#assignForm', actions: { /*collapse: 'targetCollapsed', expand: 'targetCollapsed',*/ validitychange: 'updateAssignButtons'}},
    { name: 'assignGrid', query: '#assignGrid'},
    { name: 'resetBtn', query: '#btnReset', actions: {click: 'resetToFactory'} },
    { name: 'saveAssignBtn', query: '#btnSave', actions: {click: 'saveAssignData'}},
    { name: 'discardAssignBtn', query: '#btnDiscard', actions: {click: 'discardAssignData'} },
    { name: 'addAssignBtn', query: '#addRow', actions: {click: 'addAssign'}},
    { name: 'removeAssignBtn', query: '#removeRow', actions: {click: 'removeAssign'}},
    { name: 'btnImport', query: '#btnImport', actions: {click: 'importAssignment'} },
    { name: 'btnExport', query: '#btnExport', actions: {click: 'exportAssignment'} }

  ],
  forceClose: false,

  data: {},

  initView: function () {
    var me = this;
    if (me.access !== 'w') {
      Ext.each(Ext.ComponentQuery.query('checkbox, combobox, textfield, numberfield', this.view), function (e) {
        e.setReadOnly(true);
      });
      this.view.getDockedItems()[0].hide();
      this.V.assignGrid.getDockedItems()[2].hide();
      this.V.assignGrid.plugins[0].on('beforeedit', function (e) {
        return false;
      });
      Ext.each(Ext.ComponentQuery.query('togglecolumn', this.V.assignGrid), function (e) {
        e.editable = false;
      });
    }
    this.forceClose = false;

    me.assignStore = me.V.assignGrid.getStore();
    me.assignStore.on('update', me.updateAssignButtons, me);
    me.assignStore.on('remove', me.updateAssignButtons, me);
    me.assignStore.on('add', me.updateAssignButtons, me);

    var me = this;
    me.view.getEl().mask(TR("Loading..."));
    this.updateAssignData();
  },

  checkDoublettes: function() {
    var grid = Ext.ComponentQuery.query('#assignGrid')[0];
    var store = grid.getStore();
    var found = false;
    var asciiMap = {};
    store.each(function (record) {
      if (asciiMap.hasOwnProperty(record.data['ascii'])) {
        found = record.data['ascii'];
        return false;
      }
      asciiMap[record.data['ascii']] = true;
    });
    return found;
  },

  saveAssignData: function (button, event, eOpts) {
    var me = this;
    var assignView = me.V.assignForm;
    //assignView.setLoading(TR("Saving..."), true);
    me.view.getEl().mask(TR("Saving..."));
    var assign = [];
    var rec = me.V.assignGrid.getSelectionModel().getSelection()[0];
    var value = rec.get('ascii');
    var doublettes = me.checkDoublettes();
    if (doublettes) {
      me.V.assignGrid.getStore().each(function (rec) {
        if (rec.get('ascii') === doublettes) {
          rec.set('error', true);
        }
      });
      Ext.Msg.alert(TR("Warning"), TR('Duplicate ASCII entries are forbidden.'));
      return;
    }
    me.assignStore.each(function (item)
    {
      if(item.data['jobChecked'] === "true"){
        item.data['jobno'] = item.data['assignNumber'];
      }
      else{
        item.data['prgno'] = item.data['assignNumber'];
      }
      delete item.data['jobChecked'];
      delete item.data['progChecked'];
      delete item.data['assignNumber'];
      delete item.data['error'];
      assign.push(item.data);
    });

    var settings = { assignment: assign};



    Ext.Ajax.request({
      url: '/BS350/assignment/assignCfg',
      method: 'POST',
      params: Ext.JSON.encode(settings),
      success: function (res) {
        //me.getController('NavigationCtrl').updateActives();
        if (eOpts.callback) { eOpts.callback(); } else { me.updateAssignData(); };
        me.view.getEl().unmask();
      },
      failure: function () {
        me.view.getEl().unmask();
      }
    });
    me.V.saveAssignBtn.setDisabled(true);
    me.V.discardAssignBtn.setDisabled(true);
    me.V.btnImport.setDisabled(false);
    me.V.btnExport.setDisabled(false);
  },

  discardAssignData: function () {
    var me = this;
    me.view.getEl().mask(TR("Discarding..."));
    me.updateAssignData();
  },

  updateAssignData: function () {
    var me = this;
    var assignView = me.V.assignForm;
    Ext.Ajax.request({
      url: '/BS350/assignment/assignCfg',
      success: function (res) {
        var data = Ext.JSON.decode(res.responseText);
        me.assignStore.removeAll();

        Ext.Array.each(data.assignment, function (item)
        {
            if(item['prgno'] === undefined)
            {
               item['jobChecked'] = "true";
               item['progChecked'] = "false";
               item['assignNumber'] = item['jobno'];
            }
            else
            {
               item['jobChecked'] = "false";
               item['progChecked'] = "true";
               item['assignNumber'] = item['prgno'];
            }

        });

        me.assignStore.loadRawData(data.assignment);
        /* me.assignStore.sync(); */
        me.V.saveAssignBtn.setDisabled(true);
        me.V.discardAssignBtn.setDisabled(true);
        //me.getController('NavigationCtrl').updateActives();
        me.view.getEl().unmask();
        me.assignStore.fireEvent('load', me.assignStore);
        me.V.btnImport.setDisabled(false);
        me.V.btnExport.setDisabled(false);
      }
    });
  },

  addAssign: function () {
    var me  = this;
    var chnValue = null;
    me.V.addAssignBtn.setDisabled(true);
    var newRow = {'ascii': '-', 'jobChecked': 'false', 'progChecked': 'true', 'assignNumber': '0' };
    var index = me.addNewRow(newRow);
    var grid = me.V.assignGrid;
    var selectionModel = me.V.assignGrid.getSelectionModel();
    var selectedRec = me.assignStore.getAt(index);
    var cellEditing = grid.getPlugin('assignCellEditing');
    cellEditing.startEdit(index, 0);
    //selectionModel.select(selectedRec);
    me.V.addAssignBtn.setDisabled(false);
  },


  addNewRow: function (newRow) {
    if (this.V.assignGrid.getSelectionModel().hasSelection()) {
      var selection = this.V.assignGrid.getSelectionModel().getSelection();
      var indexOf = this.assignStore.indexOf(selection[0]);
      this.assignStore.insert(indexOf + 1, newRow);
      this.V.assignGrid.getView().select(indexOf+1);
      return indexOf + 1;
      //this.V.assignGrid.plugins[0].startEditByPosition({row: indexOf + 1, column: 3});
    } else {
      this.assignStore.add(newRow);
      var last = this.assignStore.last();
      var lastIndex = this.assignStore.indexOf(last);
      return lastIndex;
      //this.V.assignGrid.plugins[0].startEditByPosition({row: this.store.count() - 1, column: 3});
    }
  },

  removeAssign: function () {
    var selection = this.V.assignGrid.getSelectionModel().getSelection();
    var indexOf;
    if (selection.length > 0) {
      indexOf = this.assignStore.indexOf(selection[0]);
      this.assignStore.remove(selection[0]);
      if(indexOf === this.assignStore.getCount()){
        this.V.assignGrid.getView().select(indexOf-1);
      }
      else {
        this.V.assignGrid.getView().select(indexOf);
      }
    }
  },

  updateAssignButtons: function () {
    var grid = Ext.ComponentQuery.query('#assignGrid')[0];
    var store = grid.getStore();
    var asciiMap = {};
    var duplicates = [];
    store.each(function (record) {
      if (asciiMap.hasOwnProperty(record.get('ascii'))) {
        duplicates.push(record.get('ascii'));
      }
      asciiMap[record.get('ascii')] = true;
    });
    var btnSave = Ext.ComponentQuery.query('#btnSave')[0];
    btnSave.setDisabled(false);
    var addRow = Ext.ComponentQuery.query('#addRow')[0];
    addRow.setDisabled(false);
    var dirty = this.assignStore.isDirty();
    this.V.saveAssignBtn.setDisabled(!dirty);
    this.V.discardAssignBtn.setDisabled(!dirty);
    this.V.btnImport.setDisabled(dirty);
    this.V.btnExport.setDisabled(dirty);
    store.each(function (record) {
      if (Ext.Array.indexOf(duplicates, record.get('ascii')) > -1) {
        record.set('error', true);
        btnSave.setDisabled(true);
        addRow.setDisabled(true);
      } else {
        record.set('error', false);
      }
    });

  },


   importAssignment: function (button, event, eOpts) {
    var me = this;
    var win = Ext.create('Ext.window.Window', {
      title: 'Upload',
      height: 110, width: 400,
      layout: 'fit',
      items: {
        xtype: 'form',
        items: [
          {
            xtype: 'filefield',
            margin: 10,
            name: 'cfg',
            itemId: 'cfg',
            fieldLabel: TR('Configuration'),
            labelWidth: 150,
            msgTarget: 'side',
            allowBlank: false,
            anchor: '100%',
            buttonText: TR('Browse...'),
            listeners:{
                afterrender: function(cmp){
                  cmp.fileInputEl.set({
                    accept: '.nxida'
                  });
                },
                validitychange: function(cmp, valid) {
                  if (valid === true){
                    try {
                      Ext.ComponentQuery.query("#uploadBtn")[0].handler();
                    }catch(err){}
                  }
                }
            },
            validator: function (value) {
              if (value.match(/^.*\.nxida$/g)) {
                if (me.frmVersion !== '') {
                  var idx = value.lastIndexOf('\\');
                  if (idx !== -1) {
                    var val = value.substr(idx + 1);
                    if (val.indexOf(me.frmVersion) !== 0) {
                      return true;
                    }
                  } else if (value.indexOf(me.frmVersion) !== 0) {
                    return true;
                  }
                }
                return true;
              }
              return TR('Must be a *.nxida file');
            }
          }
        ],
        buttons: [
          {
            itemId: 'uploadBtn', text: TR('Upload'),
            handler: function () {
              var form = this.up('form').getForm();
              if (form.isValid()) {
                Ext.ComponentQuery.query('#cfg')[0].hide();
                var assignView = me.V.assignForm;
                //assignView.setLoading(TR("Importing..."), true);
                me.view.getEl().mask(TR("Importing..."));
                form.submit({
                  url: '/BS350/assignment/importAssignment',
                  timeout: 120000,
                  waitMsg: TR('Uploading Assignment table'),
                  success: function (form, action) {
                    win.close();
                    me.updateAssignData();
                  },
                  failure: function (form, action) {

                    win.close();
                    me.view.getEl().unmask();
                    action.result.msg = Ext.String.trim(action.result.msg);
                    var msg = action.result.msg;
                    if (msg !== 'Importer not found' &&
                        msg !== 'Password required' &&
                        msg !== 'No empty password' &&
                        msg !== 'Import file name required' &&
                        msg !== 'Empty import file name given' &&
                        msg !== 'No SD card' &&
                        msg !== 'SD card not mounted' &&
                        msg !== 'Configuration file not found' &&
                        msg !== 'Wrong configuration version') {
                      if (msg.indexOf('No or more than one *.cfg file found') > -1) {
                        action.result.msg = 'No or more than one *.cfg file found';
                      } else {
                        //a system error
                        action.result.msg = 'System error';
                      }
                    }
                    /* CR16016 start */
                    var res = Ext.JSON.decode(action.response.responseText);
                    if ((typeof res !== "undefined") && (typeof res.rev_marker !== "undefined")) {
                      Ext.MessageBox.alert(TR('Failure'), TR(res.msg));
                    }
                    /* CR16016 end */
                    //me.setButtonStatus('File', 'import', true, TR(action.result.msg), true, false);
                  }
                });
              }
            }
          },
          { itemId: 'cancelBtn', text: TR('Cancel'), handler: function () {this.up('window').close(); } }
        ]
      }
    });
    win.on('show', function(){
      try{
        if (!Ext.isIE10m) {
          win.down('form').down('filefield').fileInputEl.dom.click();
        }
      }catch(err){}
    }, this);
    win.show();
  },

  exportAssignment: function (button, event, eOpts) {
    var me = this;
    me.view.getEl().mask(TR("Exporting..."));
    Ext.Ajax.request({
      url: "/assignment/exportAssignment",
      success: function (res) {
        var resData = Ext.JSON.decode(res.responseText);
        if (!resData.success) {
          Ext.Msg.alert('Export failed:', resData.msg);
        } else {
          window.location.href = '/BS350/fs/downloadR?f=' + encodeURIComponent(resData.msg);
        }
        me.view.getEl().unmask();
      },
      failure: function (res) {
        me.view.getEl().unmask();
        Ext.Msg.alert('Export failure:', res);
      }
    });
  },



  resetToFactory: function(){
    var me = this;
    var reset = function () {
      me.view.getEl().mask(TR("Resetting..."));
      Ext.Ajax.request({
        url: '/BS350/assignment/resetAssignToFactory',
        success: function (res) {
          me.updateAssignData();
        }
      });
    };
    me.V.saveAssignBtn.setDisabled(true);
    me.V.discardAssignBtn.setDisabled(true);

    var title = TR('Reset to factory');
    var msg = TR('Do you want to discard the current configuration and reset to factory? All relevant configuration files are to be overwritten.');
    BS350.custom.Utils.showResetToFactoryConfirmation(reset, title, msg);
  },

  askclose: function (panel) {
    var me = this;
    if (me.assignStore.isDirty() && !me.forceClose) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') { me.saveAssignData(null, null, {callback: function () {me.forceClose = true; panel.close(); }}); }
          if (btn === 'no') {me.forceClose=true;  panel.close(); }
        },
        icon: Ext.Msg.QUESTION
      });
      return false;
    }
    return true;
  }
});
