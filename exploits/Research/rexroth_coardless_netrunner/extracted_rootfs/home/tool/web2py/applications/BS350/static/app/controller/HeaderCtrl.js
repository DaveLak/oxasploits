/*global BS350: false, Ext: false, TR: false, window: false, setTimeout: false, APP: false, document: false */
Ext.define('BS350.controller.HeaderCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['HeaderView', 'BS350.custom.RTrayClock'],

  timeDelta: 0,
  status:     {connected: false, time: 0, cycleId: -1, battery: 0, ready: true, sysfault: false, enabled: false, wlanConnection: false, wlanRssiLevel: 0, shutdownSig: -1, conn_status: 0},
  lastStatus: {connected: true, time: 0, cycleId: -1, battery: 0, ready: true, sysfault: false, enabled: false, wlanConnection: false, wlanRssiLevel: 0, shutdownSig: -1,  conn_status: 0},
  disconnectedMsgEnabled: true,
  showOnce: true,
  wlanActive: false,
  title: document.title,
  showenOnce: false,
  retrieve: "",
  items: [
    { name: 'headertoolbar', query: '#headertoolbar' },
    { name: 'connection', query: '#lblConnection'},
    { name: 'clock', query: '#lblClock'},
    { name: 'cycle', query: '#lblCycle'},
    { name: 'battery', query: '#battery'},
    { name: 'wlan', query: '#wlan'},
    { name: 'conn_status', query: '#conn_status'},
    { name: 'led1', query: '#led1' },
    { name: 'led2', query: '#led2', actions: { click: 'showSysErrors' } },
    { name: 'user', query: '#lblUser'},
    { name: 'logout', query: '#btnLogout', actions: { click: 'logout' }},
    { name: 'kanalname', query: '#kanalname' }
  ],

  init: function () {
    this.updateClock.scope = this;
    this.addEvents('updatestatus');
    this.addEvents('updateGraph');
    this.addEvents('cfgChanged');
  },

  initView: function () {
    var me = this;
    me.V.headertoolbar.setDisabled(false);
    this.qtip = Ext.create('Ext.tip.ToolTip', {
      target: me.V.battery.el,
      listeners: {
        beforeshow: function (ttip) {
          ttip.update(TR('Battery') + ': ' + me.V.battery.value + ' %');
        }
      }
    });

    //poweroff/reboot dialog
    this.downDialog = Ext.create('Ext.window.Window', {
      modal: true,
      resizable: false,
      autoSize: true,
      closable: false,
      draggable: false,
      style: 'background: white;',
      items: [
        { xtype: 'container', layout: { type: 'vbox', align: 'stretch'}, style: 'background: white;',
          items: [
            {
              xtype: 'container',
              layout: { type: 'hbox', pack: 'start', align: 'left'},
              style: 'background: white;',
              items: [
                {
                  xtype: 'image',
                  margin: 20,
                  src: BS350.custom.Utils.addMediaVersion('BS350/static/images/rexroth-logo_20.png')
                },
                {
                  xtype: 'label',
                  itemId: 'nameVersion',
                  margin: '22 20 18 20',
                  style: 'font-weight: normal; font-size: 15pt; line-height: 20px;',
                  text: 'NEXO-OS'
                }
              ]
            },
            {
              xtype: 'toolbar',
              cls: 'header-toolbar',
              height: 30
            },
            {
              xtype: 'label',
              itemId: 'msg',
              style: 'font-weight: normal; font-size: 15pt; line-height: 20px;',
              margin: '20 0 20 20'
            }
          ]}
      ],

      showMe : function (msg) {
        this.setHeight(APP.viewport.getHeight());
        this.setWidth(APP.viewport.getWidth());
        this.setPosition(0, 0);
        this.down('#msg').setText(msg);
        this.show();
      }
    });

    //Offline mask
    //this.offlineMask = new Ext.LoadMask(Ext.getBody(), {msg: TR('NEXO-OS offline.')});
    // Offline dialog
    this.offlineDialog = Ext.create('Ext.window.Window', {
      modal: true,
      resizable: false,
      autoSize: true,
      closable: false,
      layout: { type: 'vbox', align: 'middle', padding: 10, defaultMargin: 10 },
      items: [
        { xtype: 'label', itemId: 'msg'},
        { xtype: 'container', layout: { type: 'hbox', pack: 'stretch', align: 'bottom', padding: 10},
          items: [
          { xtype: 'button', margin: '0 0 0 10', autoSize: true, text: TR('Reconnect'), itemId: 'reconnectButton',
              handler: function () {
                me.offlineDialog.hide();
                //me.lastStatus.connected = true;
                me.offlineScreenState(true);
            }
          },
          { xtype: 'button', margin: '0 0 0 10', autoSize: true, text: TR('Close session'),
              handler: function () {
                me.offlineDialog.hide();
                Ext.util.Cookies.clear('session_id_admin');
                Ext.util.Cookies.clear('session_id_bs350');
                window.location = './logout';
            }
          }
        ]}
      ],

      showMe : function (data) {
        this.title = data.title;
        this.down('#msg').setText(data.msg);
        this.show();
      }
    });

    this.on('updatestatus', function (event) {
      if (event.connected) {
        if (!this.offlineDialog.isHidden()) {

          this.offlineDialog.hide();
        }
        me.V.headertoolbar.setDisabled(false);
      } else {
        me.V.headertoolbar.setDisabled(true);
      }
    }, this);

    this.updateStatus(this);
    Ext.TaskManager.start(this.updateClock);

    this.updateKanalname();
  },

  newStatus: function (status) {
    var me = this;
    this.V.connection.setValue(status.connected);
    this.V.cycle.setValue(status.cycle);
    this.V.battery.setValue(status.battery);
    this.V.user.setValue(status.user);
    this.V.wlan.setValue(status.wlanConnection, status.wlanRssiLevel, status['fcc-test-mode'], status.wlanActive);
    this.V.led1.setValue(status.enabled);
    this.V.led2.setValue(status.ready, status.sysfault, status.connected);
    this.V.conn_status.setValue(status.conn_status);
    this.status = status;

    if (status.battery > 0 ) {
      me.showOnce = true;
    }
    try{
      if (status['cfgFileChanged'] == true) {
        this.fireEvent('cfgChanged');
      }
    } catch (err) {}

    if (status.connected) {
      if (status.battery === 0 && me.showOnce && !APP.getController('HardwareCtrl').client_running) {
        Ext.Msg.show({title: TR('Warning'), msg: TR('Battery removed'),  buttons: Ext.Msg.OK,
            fn: function (btn) {
              me.showOnce = false;
          }, icon: Ext.Msg.WARNING });
      } else if (status.battery < 10 && this.lastStatus.battery >= 10 && !APP.getController('HardwareCtrl').client_running) {
        Ext.Msg.show({title: TR('Warning'), msg: TR('Battery under 10%. Please save your work and change the battery'),  buttons: Ext.Msg.OK, icon: Ext.Msg.WARNING});
      }
      var rDate = new Date(status.time.year, status.time.month-1, status.time.day, status.time.hour, status.time.min, status.time.sec);
      this.timeDelta = rDate.getTime()-(new Date()).getTime();

    } else if (this.lastStatus.connected) {
      if (this.disconnectedMsgEnabled) {
        if (status.shutdownSig === 0 || status.shutdownSig === 1) {
          this.downDialog.showMe(TR('Offline'));
        } else {
          this.offlineDialog.showMe({title: TR('Warning'), msg: TR('NEXO-OS offline.')});
        }
      }
    }
    if (this.disconnectedMsgEnabled && status.shutdownSig === 1) {
      this.downDialog.showMe(TR('Offline'));
    }

    // Wlan Haken update
    if (this.wlanActive != status.wlanActive) {
      this.wlanActive = status.wlanActive;
      APP.getController('NavigationCtrl').checkActive(null, null, 'WlanCtrl')
    }

    this.fireEvent('updateGraph', status);
    this.fireEvent('updatestatus', status);
    this.lastStatus = Ext.clone(status);

  },

  logout: function () {
      Ext.Msg.confirm(
          TR('Logout'),
          TR('Are you sure you want to logout?'),
          function (btn) {
              if (btn === 'yes') {
                  var ctrl = APP.getController('HardwareCtrl');
                  if (ctrl.client_running)
                  {
                      ctrl.closeClient(true);
                  }
                  else window.location = './logout';
              }
          }
      );
  },

  updateKanalname: function () {
    var me = this;
    Ext.Ajax.request({
      url: 'BS350/channel/kanalname',
      success: function (response) {
        var res = Ext.JSON.decode(response.responseText);
        var kanalname = res['Kanalname'];
        me.V.kanalname.setValue(kanalname);
        document.title = me.title;
        if (kanalname !== null && Ext.String.trim(kanalname).length > 0) {
          document.title = me.title + ' / ' + kanalname;
        }
      }
    });
  },

  updateStatus: function (ctrl) {
    var me = this;
    // set statustime to block export requests at the same time CR16194
    APP.statusTime = new Date();
    if (me.oldReq !== undefined) {
      if (Ext.Ajax.isLoading(me.oldReq)) {
        setTimeout(function () {ctrl.updateStatus(ctrl); }, APP.updateDelay);
        return;
      }
    }

    me.oldReq = Ext.Ajax.request({
      url: '/BS350/status/status',
      params: {
        retrieve: me.retrieve
      },
      method: "GET",
      timeout: this.status.shutdownSig < 0 ? 20000 : 5000,
      success: function (response) {
        try {
          /**
           * CR16194 only more than one failed status request in a row are leading to logout. One failure is tolerated.
           * This avoids annoying logouts on downloading files.
           */
          if (!me.lastStatus.connected && me.lastStatus.number_of_failed > 3) {
            me.offlineScreenState(false);
          }
          var status = Ext.JSON.decode(response.responseText);
        } catch (e) {
          // We got a response that is not in json format.
          // We assume this is a redirect to logout.
          // Uncomment to check what response you got:
          // alert("stop before redirection");
          // console.log('catch error in status success', response);
          window.location.href = './logout';
          return;
        }
        try {
          status['connected'] = true;
          if (status['expired']) {
            window.location.href = './logout';
            return;
          }
          ctrl.newStatus(status);
        } catch (err) {}
        setTimeout(function () {ctrl.updateStatus(ctrl); }, APP.updateDelay);
      },
      failure: function (response, opts) {
        var status = {connected: false, time: 0, cycle: -1, battery: 0, ready: true, sysfault: false, enabled: false, wlanConnection: false, wlanRssiLevel: 0, 'fcc-test-mode': false };
        status.cycle = '-';
        status.shutdownSig = me.status.shutdownSig;
        try {
          /**
           * CR16194 failures on export log files happens sporadically.
           * We avoid logout in such cases. Only reconnect / logout dialog is shown.
           * More than one failure is not tolerated and leads to logout.
           */
          status['number_of_failed'] = me.lastStatus['number_of_failed'] + 1;
        } catch (e) { }
        ctrl.newStatus(status);
        setTimeout(function () {ctrl.updateStatus(ctrl); }, APP.updateDelay);
      }
    });
  },

  updateClock: {
    run: function () {
      this.V.clock.setValue(new Date(this.timeDelta + (new Date()).getTime()));
    },
    interval: 500
  },

  showSysErrors: function () {
    if (this.V.led2.data.sysfault) {
      this.getController('NavigationCtrl').setPath('/home/diagnosis/syserrors');
    } else if ( ! this.V.led2.data.ready) {
      this.getController('NavigationCtrl').setPath('/home/diagnosis/readystatus');
    }
  },

  offlineScreenState: function (flag) {
    if (flag) {
      //this.offlineMask.show();
      //APP.viewport.setDisabled(true);
      APP.viewport.setVisible(false);
    } else {
      //this.offlineMask.hide();
      //APP.viewport.setDisabled(false);
      window.location = '/login';
      /*this.downDialog.hide();
      this.showenOnce = false;
      if (!APP.viewport.isVisible()) {
        APP.viewport.setVisible(true);
      }*/
    }
  }
});

