__author__ = 'kai'


def Requires():
    data = []
    data.append('c = require "constants"')
    data.append('f = require "runFunctions"')
    data.append('plc = require "plcsignals"')
    data.append('codes = require "scancodes"')
    data.append('idsrc = require "idcodesources"')
    data.append('')
    return data


def RepeatScan():
    data = []
    data.append('local nokcount = 2')
    data.append(' ')
    data.append('local function scanFailed(oknode, noknode)')
    data.append('  cpp.job:logMsg("scanFailed" .. nokcount )')
    data.append('  if( nokcount > 0 )then')
    data.append('    nokcount=nokcount-1')
    data.append('    return oknode')
    data.append('  else')
    data.append('    nokcount=nokcount-1')
    data.append('    return noknode')
    data.append('  end')
    data.append('end')
    return data


def InitNode(user, comment, date, display_time, id_input_name1, id_input_comment1):
    data = []
    data.append('local initNode = {')
    data.append('   name = "initNode",')
    data.append('   timeout = 300,')
    data.append('   type = c.TypeIdleStartNode,')
    data.append('   selectsCw = 0,')
    data.append('   selectsEn = 0,')
    data.append('   displayJobSteps = 1,')
    data.append('   displayTime = %s,' % display_time)
    data.append('   clearIDCode = 0,')
    data.append('   ignoreResults = 0,')
    data.append('   jobComment = \'%s\',' % comment)
    data.append('   jobUser = \'%s\',' % user)
    data.append('   jobDate = %d,' % date)
    data.append('   id_input_name1 = \'%s\',' % id_input_name1)
    data.append('   id_input_comment1 = \'%s\',' % id_input_comment1)
    data.append('   id_input_name2 = \'\',')
    data.append('   id_input_comment2 = \'\'')
    data.append('}')
    return data


def Local():
    data = []
    data.append('-- Atoms for Idle Script ---')
    data.append('atoms  = {}')
    data.append('')
    data.append('-- Lokaler Knoten --')
    data.append('atoms["$Local"] = {')
    data.append('   type = c.TypeDevice, ')
    data.append('   mode = c.DeviceModeLocal,')
    data.append('   dest = "1"')
    data.append('}')
    data.append('')
    return data


def WaitHMIInput(atom=""):
    data = []

    data.append('atoms["$WaitHMIInput%s"] = {' % atom)
    data.append('   type = c.TypeTriggerIn, -- TriggerIn --')
    data.append('   mode = c.TriggerInModeHMIInput, -- Warten auf Job Cw --')
    data.append('   dest = 0,')
    data.append('   state = 0,')
    data.append('   range = 0,')
    data.append('   valueList = {}')
    data.append('}')
    data.append('')

    return data


def PrgNr():
    data = []

    data.append('atoms["$PrgNr"] = {')
    data.append('   text = "",')
    data.append('   type = c.TypeTriggerOut, -- TriggerIn --')
    data.append('   mode = c.TriggerOutModeBmsIn, -- Warten auf Job Cw --')
    data.append('   dest = plc.In.Prog0,')
    data.append('   state = 0,')
    data.append('   action = "atoms[\'$PrgNr\'].state = tonumber(cpp.job:getJobSeqParams(\'assign\')); ENABLE=\'1\'",')
    data.append('   range = 8,')
    data.append('   valueList = {}')
    data.append('}')
    data.append('')

    return data


def ResetBatchCounter(op_mode=0):
    data = []

    data.append('atoms["$ResetBatchCounter"] = {')
    data.append('   text = "",')
    data.append('   type = c.TypeTriggerOut,')
    data.append('   mode = c.TriggerOutModeResetOkNok,')
    data.append('   dest = {}, --    del OkNok-counter'.format(op_mode))
    data.append('   range = 0,')
    data.append('   state = 0,')
    data.append('   valueList = {}')
    data.append('}')
    data.append('')

    return data


def DisplayPrgNrTimeDelay(target=0, hmi=False):

    if target == 5:
        text = "\'{{{Prg: [[[\' .. cpp.job:getJobSeqParams(\'assign\') .. \']]] + " \
               "IDCode: [[[\' .. cpp.job:getJobSeqParams(\'idcode\') .. \']]] received\'"
    else:
        text = "\'{{{Prg: [[[\' .. cpp.job:getJobSeqParams(\'assign\') .. \']]] received\'"

    data = []
    data.append('atoms["${}DisplayPrgNrTimeDelay"] = {{'.format("HMI" if hmi else ""))
    data.append('   text = "",')
    data.append('   type = c.TypeTriggerIn,')
    data.append('   mode = c.TriggerInModeTimeDelay,')
    data.append('   dest = 0, --    wait for delayed time')
    data.append('   range= 0,')
    data.append('   state= 0,')
    data.append('   action = "atoms[\'${}DisplayPrgNrTimeDelay\'].text =  {}",'.format("HMI" if hmi else "", text))
    data.append('   valueList = {}')
    data.append('}')
    data.append('')

    return data


def JobNr():
    data = []

    data.append('atoms["$JobNr"] = {')
    data.append('   text = "",')
    data.append('   type = c.TypeTriggerOut, -- TriggerIn --')
    data.append('   mode = c.TriggerOutModeBmsIn, -- Warten auf Job Cw --')
    data.append('   dest = plc.In.Job0,')
    data.append('   state = 0,')
    data.append('   action = "atoms[\'$JobNr\'].state = tonumber(cpp.job:getJobSeqParams(\'assign\')); ENABLE=\'0\'",')
    data.append('   range = 8,')
    data.append('   valueList = {}')
    data.append('}')
    data.append('')

    return data


def DisplayJobNrTimeDelay(target=0, hmi=False):

    if target == 5:
        text = "\'{{{Job: [[[\' .. cpp.job:getJobSeqParams(\'assign\') .. \']]] + " \
               "IDCode: [[[\' .. cpp.job:getJobSeqParams(\'idcode\') .. \']]] received\'"
    else:
        text = "\'{{{Job: [[[\' .. cpp.job:getJobSeqParams(\'assign\') .. \']]] received\'"

    data = []
    data.append('atoms["${}DisplayJobNrTimeDelay"] = {{'.format("HMI" if hmi else ""))
    data.append('   text = "",')
    data.append('   type = c.TypeTriggerIn,')
    data.append('   mode = c.TriggerInModeTimeDelay,')
    data.append('   dest = 0, --    wait for delayed time')
    data.append('   range= 0,')
    data.append('   state= 0,')
    data.append('   action = "atoms[\'${}DisplayJobNrTimeDelay\'].text = {}",'.format("HMI" if hmi else "", text))
    data.append('   valueList = {}')
    data.append('}')
    data.append('')
    return data

def DisplayMsgTimeDelay(time_delay):
    data = []

    data.append('atoms["$DisplayMsgTimeDelay"]={')
    data.append('   text ="",')
    data.append('   type = c.TypeTriggerOut,')
    data.append('   mode = c.TriggerOutModeTimeDelay,')
    data.append('   dest =  %s,    --    set time for delay' % int(float(time_delay)*1000))
    data.append('   range= 0,')
    data.append('   state= 3,')
    data.append('   valueList = {}')
    data.append('}')
    data.append('')

    return data

def ScanFinalJobOK():
    data = []

    data.append('atoms["$ScanFinalJobOK"]={')
    data.append('   text = "",')
    data.append('   type = c.TypeTriggerOut,')
    data.append('   mode = c.TriggerOutModeScanFinal,')
    data.append('   dest = 0,    --   state: 0= hide Scan Icon, 1= still display Scan Icon')
    data.append('   range= 0,')
    data.append('   state= 0,')
    data.append('   valueList = {}')
    data.append('}')
    data.append('')

    return data

def DoNokResult():
    data = []

    data.append('--nok result ausspucken, damit skrip wieder von vorne lauft')
    data.append('atoms["$DoNokResult"] = {')
    data.append('   text ="",')
    data.append('   type = c.TypeTriggerOut,		-- TriggerIn --')
    data.append('   mode = c.TriggerOutModeJobResult, 		-- Warten auf Job Cw --')
    data.append('   dest = 0,')
    data.append('   range= 0,')
    data.append('   state= 0,')
    data.append('   valueList = {}')
    data.append('}')
    data.append('')

    return data

def TriggerInGrp(members, atom="2"):
    data = []

    data.append('atoms["$TriggerInGrp%s"] = {' % atom)
    data.append('   type=c.TypeTriggerInGrp, ')
    data.append('   members = {%s}' % members)
    data.append('}')
    data.append('')

    return data

def SetEnable():
    data = []
    data.append('atoms["$SetEnable"] = {')
    data.append('   text = "",')
    data.append('   type = c.TypeTriggerOut,')
    data.append('   mode = c.TriggerOutModeBmsIn,')
    data.append('   dest = plc.In.En, --    BMS_SE_E_EN')
    data.append('   state = 1,')
    data.append('   range = 1,')
    data.append('   valueList = {}')
    data.append('}')
    data.append('')
    return data

def UnsetEnable():
    data = []
    data.append('atoms["$UnsetEnable"] = {')
    data.append('   text = "",')
    data.append('   type = c.TypeTriggerOut,')
    data.append('   mode = c.TriggerOutModeBmsIn,')
    data.append('   dest = plc.In.En, --    BMS_SE_E_EN')
    data.append('   state = 0,')
    data.append('   range = 1,')
    data.append('   valueList = {}')
    data.append('}')
    data.append('')
    return data

def DelOkNokCounter():
    data = []
    data.append('atoms["$DelOkNokCounter"]={')
    data.append('   text = "",')
    data.append('   type = c.TypeTriggerOut,')
    data.append('   mode = c.TriggerOutModeDelOkNok,')
    data.append('   dest = 0,    --    del OkNok-counter')
    data.append('   range= 0,')
    data.append('   state= 7,')
    data.append('   valueList = {')
    data.append('     Counters = {{Nr=-1, SocketTrayNr=-1, Ok=0, Nok=0}},')
    data.append('     Src = 5,')
    data.append('     EnablePrg99 = false,')
    data.append('     SocketTrayCoding = 4712,')
    data.append('     LockCtrl = false,')
    data.append('     CountOverAllCounters = false,')
    data.append('     DecrementOkCounter = false,')
    data.append('     BlockPrg99AfterNok = false,')
    data.append('     BlockPrg99AfterOk = false')
    data.append('   }')
    data.append('}')
    return data


def SetOkNokCounter():
    data = []
    data.append('atoms["$SetOkNokCounter"]={')
    data.append('   text ="",')
    data.append('   type = c.TypeTriggerOut,')
    data.append('   mode = c.TriggerOutModeSetOkNok,')
    data.append('   dest = 0,    --    set OkNok-counter')
    data.append('   range= 0,')
    data.append('   state= 7,')
    data.append('   action = "atoms[\'$SetOkNokCounter\'].valueList.Counters[1].Nr = tonumber(cpp.job:getJobSeqParams(\'assign\')); ENABLE=\'1\'",')
    data.append('   valueList = {')
    data.append('     Counters = {{Nr=0, SocketTrayNr=-1, Ok=1, Nok=1}},')
    data.append('     Src = 5,')
    data.append('     EnablePrg99 = false,')
    data.append('     SocketTrayCoding = 4712,')
    data.append('     LockCtrl = true,')
    data.append('     CountOverAllCounters = false,')
    data.append('     DecrementOkCounter = false,')
    data.append('     BlockPrg99AfterNok = false,')
    data.append('     BlockPrg99AfterOk = false')
    data.append('   }')
    data.append('}')
    return data


def DisplayIDCode(display_time):
    data = []
    data.append('--Anzeige gescannter Code auf dem Display')
    data.append('atoms["$DisplayIDCode"]={')
    data.append('    text ="",')
    data.append('    type = c.TypeTriggerOut,')
    data.append('    mode = c.TriggerOutModeTimeDelay,')
    data.append('    dest = %s,    --    set time for delay' % int(float(display_time) * 1000))
    data.append('    range= 0,')
    data.append('    state= 2,')
    data.append('    valueList = {}')
    data.append('}')
    data.append('')
    return data


def DisplayIDCodeTimeDelay():
    data = []
    data.append('atoms["$DisplayIDCodeTimeDelay"]={')
    data.append('    text ="",')
    data.append('    type = c.TypeTriggerIn,')
    data.append('    mode = c.TriggerInModeTimeDelay,')
    data.append('    dest = 0,    --    wait for delayed time')
    data.append('    range= 0,')
    data.append('    state= 0,')
    data.append('    action = "atoms[\'$DisplayIDCodeTimeDelay\'].text = \'{{{IDCode: [[[\' .. cpp.job:getJobSeqParams(\'idcode\') .. \']]] received\'",')
    data.append('    valueList = {}')
    data.append('}')
    return data


def ScanFinalOK(state):
    data = []
    data.append('atoms["$ScanFinalOK"]={')
    data.append('    text = "",')
    data.append('    type = c.TypeTriggerOut,')
    data.append('    mode = c.TriggerOutModeScanFinal,')
    data.append('    dest = 0,    --   state: 0= hide Scan Icon, 1= still display Scan Icon')
    data.append('    range= 0,')
    data.append('    state= %s,' % state)
    data.append('    valueList = {}')
    data.append('}')
    data.append('')
    return data


def ScanTimeoutMsg(id=""):
    data = []
    data.append('--Anzeige Code not supported')
    data.append('atoms["$ScanTimeoutMsg%s"]={' % id)
    data.append('    text = "{{{Scan Failed",')
    data.append('    type = c.TypeTriggerIn,')
    data.append('    mode = c.TriggerInModeTimeDelay,')
    data.append('    dest = 0,    --    wait for delayed time')
    data.append('    range= 0,')
    data.append('    state= 0,')
    data.append('    valueList = {}')
    data.append('}')
    data.append('')
    return data


def CodeNotSupportedMsg(id=""):
    data = []
    data.append('atoms["$CodeNotSupportedMsg%s"]={' % id)
    data.append('    text ="{{{Barcode not supported",')
    data.append('    type = c.TypeTriggerIn,')
    data.append('    mode = c.TriggerInModeTimeDelay,')
    data.append('    dest = 0,    --    wait for delayed time')
    data.append('    range= 0,')
    data.append('    state= 0,')
    data.append('    valueList = {}')
    data.append('}')
    data.append('')
    return data


def CodeNotActiveMsg(id=""):
    data = []
    data.append('atoms["$CodeNotActiveMsg%s"]={' % id)
    data.append('    text ="{{{Barcode not active in Job",')
    data.append('    type = c.TypeTriggerIn,')
    data.append('    mode = c.TriggerInModeTimeDelay,')
    data.append('    dest = 0,    --    wait for delayed time')
    data.append('    range= 0,')
    data.append('    state= 0,')
    data.append('    valueList = {}')
    data.append('}')
    data.append('')
    return data

def CodeNotAssignedMsg(id=""):
    data = []
    data.append('atoms["$DisplayNoAssignment%s"]={' % id)
    data.append('    text ="{{{Code not found in assignment table",')
    data.append('    type = c.TypeTriggerIn,')
    data.append('    mode = c.TriggerInModeTimeDelay,')
    data.append('    dest = 0,    --    wait for delayed time')
    data.append('    range= 0,')
    data.append('    state= 0,')
    data.append('    valueList = {}')
    data.append('}')
    data.append('')
    return data


def ScanTimeoutDelay(timeout_text, id=""):
    data = []
    data.append('atoms["$ScanTimeoutDelay%s"]={' % id)
    data.append('    text ="%s",' % timeout_text)
    data.append('    type = c.TypeTriggerIn,')
    data.append('    mode = c.TriggerInModeTimeDelay,')
    data.append('    dest = 0,    --')
    data.append('    range= 0,')
    data.append('    state= 0,')
    data.append('    valueList = {}')
    data.append('}')
    data.append('')
    return data


def WaitJobEnable():
    data = []
    data.append('atoms["$WaitJobEnable"] = {')
    data.append('    text ="",')
    data.append('    type = c.TypeTriggerIn,		-- TriggerIn --')
    data.append('    mode = c.TriggerInModeEnableJob, 		-- Warten auf Job Cw --')
    data.append('    dest  = 0,')
    data.append('    state = 0,')
    data.append('    range = 0,')
    data.append('    valueList = {}')
    data.append('}')
    return data

def BmsEnable():
    data = []
    data.append('atoms["$BmsEnable"] = {')
    data.append('   text ="",')
    data.append('   type = c.TypeTriggerOut,		-- TriggerIn --')
    data.append('   mode = c.TriggerOutModeBmsIn, 		-- Warten auf Job Cw --')
    data.append('   dest  = plc.In.En,')
    data.append('   state = 1,')
    data.append('   range = 0,')
    data.append('   valueList = {}')
    data.append('}')
    data.append('')
    return data


def WaitIDCode(id=""):
    data = []
    data.append('--auf Ergebnis warten')
    data.append('atoms["$WaitIdCode%s"]={' % id)
    data.append('   type = c.TypeTriggerIn,		-- TriggerIn --')
    data.append('   mode = c.TriggerInModeIdCode, 	-- Warten auf Job Cw --')
    data.append('   dest = 0,')
    data.append('   state = 0,')
    data.append('   range = 0,')
    data.append('   valueList = {}')
    data.append('}')
    data.append('')
    return data


def WaitIDCodeTimeout(timeout, text, source, id=""):
    data = []
    data.append('atoms["$WaitIdCodeTimeout%s"]={' % id)
    data.append('  type=c.TypeTriggerIn,')
    data.append('  mode=c.TriggerInModeTimeoutAtom,')
    data.append('  text= "%s",' % (text if source == 1 or source == 5 else ""))
    data.append('  dest=0,')
    data.append('  range=1,')
    data.append('  state=c.TriggerInModeIdCode,')
    data.append('  timeout=%d,' % timeout)
    data.append('}')
    return data


def DoScan(id=""):
    data = []
    data.append('--scannen')
    data.append('atoms["$DoScan%s"]={' % id)
    data.append('  text= "",')
    data.append('  type = c.TypeTriggerOut,')
    data.append('  mode = c.TriggerOutModeDoScan, --c.TriggerOutScanPrg')
    data.append('  dest = 0,')
    data.append('  range= 0,')
    data.append('  state= 0,')
    data.append('  valueList = {}')
    data.append('}')
    data.append('')
    return data


def DisplayNoScanner():
    data = []
    data.append('atoms["$DisplayNoScanner"]={')
    data.append('  text= "{{{Scanner initialization failed",')
    data.append('  type = c.TypeTriggerIn,')
    data.append('  mode = c.TriggerInModeScanInitAck,')
    data.append('  dest = 0,')
    data.append('  range= 0,')
    data.append('  state= 1,')
    data.append('  valueList = {}')
    data.append('}')
    return data

def DisplayScannerNotActive():
    data = []
    data.append('atoms["$DisplayScannerNotActive"]={')
    data.append('  text= "{{{Scanner not active",')
    data.append('  type = c.TypeTriggerIn,')
    data.append('  mode = c.TriggerInModeScanInitAck,')
    data.append('  dest = 0,')
    data.append('  range= 0,')
    data.append('  state= 1,')
    data.append('  valueList = {}')
    data.append('}')
    data.append('')
    return data


def WaitScanInitAck(id=""):
    data = []
    data.append('atoms["$WaitScanInitAck%s"]={' % id)
    data.append('  text= "",')
    data.append('  type = c.TypeTriggerIn,')
    data.append('  mode = c.TriggerInModeScanInitAck, --c.TriggerOutScanPrg')
    data.append('  dest = 0,')
    data.append('  range= 0,')
    data.append('  state= 0,')
    data.append('  valueList = {}')
    data.append('}')
    return data


def IDCodeInit(source, fire_idcode, range, target, id=""):
    if source == 0:
        src = 'scanner'
    elif source == 1:
        src = 'openprotocol'
    else:
        src = 'vwxml'

    data = []
    data.append('atoms["$IdCodeInit%s"]={' % id)
    data.append('  text= "",')
    data.append('  type = c.TypeTriggerOut,')
    data.append('  mode = c.TriggerOutModeIdCodeInit, --c.TriggerOutScanPrg')
    data.append('  dest = 0,')
    data.append('  range= 0,')
    data.append('  state= 0,')
    data.append('  valueList={')
    data.append('    id = "$Mode",  --id code id ')
    data.append('    fire_idcode = %d,  --Im master Job muss Id code propagiert werden' % fire_idcode)
    data.append('    src = idsrc.%s,  --idsrc.openprotocol, idsrc.scanner, idsrc.vwxml' % src)
    data.append('    target = %d, -- Was soll gescannt werden? - 1=IDCode, 4=ID Input Assignment' % target)
    data.append('    range=%s' % range)
    data.append('  }')
    data.append('}')
    data.append('')
    return data


def InitScanner(codes, laserontime, trigger, play_sound, id=""):
    data = []
    data.append('atoms["$InitScanner%s"]={' % id)
    data.append('  text= "",')
    data.append('  type = c.TypeTriggerOut,')
    data.append('  mode = c.TriggerOutModeScanInit, --c.TriggerOutScanPrg')
    data.append('  dest = 0,')
    data.append('  range= 0,')
    data.append('  state= 0,')
    data.append('  valueList={')
    data.append('    trigger=%d, -- Ausloesebedingung:  MenuBtn=1, LeftBtn=2, RightBtn=3, Plc=4, StartButton=5' % trigger)
    data.append('    laserontime=%s,' % laserontime)
    data.append('    play_sound=%d, --soll sound abgespielt werden' % play_sound)
    data.append('    codes={%s} --erlaubte Codes' % codes)
    data.append('  }')
    data.append('}')
    data.append('')
    return data