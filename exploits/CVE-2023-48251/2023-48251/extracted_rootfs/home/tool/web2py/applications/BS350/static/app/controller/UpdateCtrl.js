/**
 * Created by rick on 11.04.16.
 */
Ext.define('BS350.controller.UpdateCtrl',
{
    extend: 'BS350.custom.ViewController',
    views: ['UpdateView'],
    items: [
        {name: 'cbFwName', query: '#cbFw', actions: { select: 'selectFirmware' } },
        {name: 'updateBtn', query: '#btnUpdate', actions: {click: 'updateFw'}},
        {name: 'btnImportFw', query: '#btnimportFwPack', actions: {click: 'importFwPack'}},
        {name: 'btnRemoveFw', query: '#btnremoveFwPack', actions: {click: 'removeFw'}},
        {name: 'msg_lbl_bbar', query: '#msg_lbl_bbar'}
    ],
    LoadingMask: null,
    MsgBox: null,
    timeoutCounter: 0,


    initView: function () {
        var me = this;
        me.getFwDirs();

        var store = me.V.cbFwName.getStore();
        store.on("load", function() {
           me.V.cbFwName.setValue(store.getAt(0));
        });

    },

    getFwDirs: function () {
        var me = APP.getController('UpdateCtrl');
        Ext.Ajax.request({
            url: 'BS350/servicediagnosis/getFwDirs',
            timeout: 2000,
            success: function (response) {
                var data = Ext.JSON.decode(response.responseText);
                me.V.cbFwName.store.loadRawData(data);
            },
            failure: function () {
                console.log('getFwDirs finished with failure');
                setTimeout(me.getFwDirs, 20);
            }
        });
    },

    importFwPack: function() {
        var me = this;
        me.V.uploadWin = Ext.create('Ext.window.Window', {
            title: TR('Import'),
            layout: 'fit',
            modal : true,
            width : 400,
            height: 120,
            closable: false,
            items: [{
                xtype: 'form',
                itemId : 'uploadForm',
                bodyPadding : 15,
                layout : 'anchor',
                defaults: { anchor: '100%' },
                items: [{
                    xtype: 'filefield',
                    name: 'fileupload',
                    fieldLabel: TR('Firmware package'),
                    labelWidth: 130,
                    buttonText: TR('Browse...'),
                    listeners: {
                        afterrender: function (cmp) {
                            cmp.fileInputEl.set({
                                accept: '.zip'
                            });
                        },
                        validitychange: function(cmp, valid) {
                            if (valid === true){
                                try {
                                    Ext.ComponentQuery.query("#uploadBtn")[0].handler();
                                }catch(err){}
                            }
                        }
                    },
                    validator: function (value) {
                        var valid = false;
                        if (value.match(/NxFw.*\.zip$/) ) {
                            Ext.ComponentQuery.query("#uploadBtn")[0].setDisabled(false);
                            valid = true;
                        }else {
                            Ext.ComponentQuery.query("#uploadBtn")[0].setDisabled(true);
                            return TR('have to be a NxFw-*.zip file');
                        }

                        var filename = value.slice(0,-4);
                        // filter C:\fakepath\ in IE & Chrome
                        if (navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0 || /chrome/i.test( navigator.userAgent )) {
                            /* Microsoft Internet Explorer detected */
                            filename = value.slice(12,-4);  // for IE11
                        }

                        filename = filename.replace(/\s/g, '');
                        var store = me.V.cbFwName.getStore();
                        store.each(function (record) {
                            var name = record.get("text");
                            if (name === filename){
                                valid = "Package already exists";
                            }
                        });
                        return valid;
                    }
                }]
            }],
            buttons: [
            {   text: TR('Cancel'),
                handler: function () { this.up('window').close(); }
            },
            {   itemId: 'uploadBtn',
                text: TR('Upload'),
                handler: function() {
                    var win = this.up('window');
                    var form = win.down('form').getForm();
                    if (form.isValid()) {
                        var filename = form.getFields().getAt(0).value.match(/NxFw.+(?=.zip)/gi)[0];
                        filename = filename.replace(/\s/g, '');
                        form.submit({
                            url: '/BS350/serviceup/serviceup/?' + filename,
                            waitMsg: TR('uploading package... could last several minutes'),
                            success: function (form, action) {
                                me.V.cbFwName.store.reload();
                                me.V.updateBtn.setDisabled(false);
                                me.V.btnRemoveFw.setDisabled(false);
                                me.V.uploadWin.close();
                                //Ext.Ajax.request({url:'/BS350/servicediagnosis/clear_cache'});
                            },
                            failure: function (form, action) {
                                switch (action.failureType) {
                                    case Ext.form.action.Action.CLIENT_INVALID:
                                        Ext.Msg.alert(TR('Failure'), TR('Form fields may not be submitted with invalid values'));
                                        break;
                                    case Ext.form.action.Action.CONNECT_FAILURE:
                                        Ext.Msg.alert(TR('Failure2', TR('Ajax communication failed')));
                                        break;
                                    case Ext.form.action.Action.SERVER_INVALID:
                                        Ext.Msg.alert(TR('Failure3'), TR(action.result.msg));
                                        break;
                                    default:
                                        Ext.Msg.alert(TR('Failure4'), TR(action.result.msg));
                                        break;
                                }
                                me.V.uploadWin.close();
                            }
                    });
                    me.V.uploadWin.hide();
                    }
                }
            }]
        });

        me.V.uploadWin.on('show', function(){
            try{
                if (!Ext.isIE10m) {
                    me.V.uploadWin.down('form').down('filefield').fileInputEl.dom.click();
                }
            }catch(err){}
        }, this);
        me.V.uploadWin.show();
    },

    removeFw: function(cmp) {
        var combobox = this.V.cbFwName;
        var selPackName = combobox.getValue();
        var v = this.V;

        Ext.Msg.show({
            title: TR('Firmware Update'),
            msg: TR('Do you want to remove the selected Firmware package?'),
            icon: Ext.Msg.QUESTION,
            buttons: Ext.Msg.OKCANCEL,
            fn: function (btnUpdate) {
                if (btnUpdate === 'ok') {
                    Ext.Ajax.request({
                        url: 'BS350/servicediagnosis/removeFwPack',
                        method: 'POST',
                        params: {selPackName: selPackName},
                        success: function () {
                            combobox.store.reload();
                        },
                        failure: function () {
                            console.warn('Remove Firmware package finished with failure');
                        }
                    });
                }
            }
        });
    },

    updateFw: function() {
        Ext.Msg.show({
            title: TR('Firmware Update'),
            msg: TR('Do you want to install new Firmware?'),
            icon: Ext.Msg.QUESTION,
            buttons: Ext.Msg.OKCANCEL,
            fn: function (btnUpdate) {
                if (btnUpdate === 'ok') {
                    Ext.Msg.show({
                        title: TR('Firmware Update'),
                        msg: TR('ARE YOU REALLY SURE?<br>All data will be cleared!'),
                        icon: Ext.Msg.WARNING,
                        buttons: Ext.Msg.OKCANCEL,
                        fn: function (btnUpdate) {
                            if (btnUpdate === 'ok') {
                                var me = APP.getController('UpdateCtrl');
                                var version = me.V.cbFwName.getValue();

                                Ext.Ajax.request({
                                    url: 'BS350/servicediagnosis/updateFirmware',
                                    method: 'POST',
                                    params: {'version': version},
                                    success: function() {
                                        me.checkUpdateStatus();
                                        me.MsgBox = Ext.MessageBox.show({
                                            msg: 'Firmware is being updated...',
                                            closable: false,
                                            progress:true,
                                            progressText: "0 %",
                                            width:300
                                        });
                                    },
                                    failure: function() {
                                        console.warn('Update firmware finished with failure');
                                        me.V.msg_lbl_bbar.setText(TR("start Update failed"));
                                    }
                                });
                            }
                        }
                    });
                }
            }
        });
    },

    checkUpdateStatus: function () {
        var me = APP.getController('UpdateCtrl');
        Ext.Ajax.request({
            url: 'BS350/servicediagnosis/readFromClient',
            timeout: 5000,
            success: function (response) {
                var res = Ext.JSON.decode(response.responseText);
                if( res !== null) {
                    var parser = new DOMParser();
                    var xmlDoc = parser.parseFromString(res,"text/xml");
                    var nodeName = xmlDoc.childNodes[0].nodeName;

                    switch (nodeName) {
                        case 'PrintProgressBar':
                            var newVal = parseInt(xmlDoc.childNodes[0].childNodes[1].childNodes[0].nodeValue, 10);
                            me.MsgBox.updateProgress(newVal/100,newVal.toString()+" %");
                            break;
                        case 'Timeout':
                            break;
                        case 'PrintMainText':
                            break;
                        case 'Rueckgabewert':
                            var info = xmlDoc.childNodes[0].attributes[1].nodeValue;
                            var errorcode = xmlDoc.getElementsByTagName("Wert")[0].childNodes[0].nodeValue;
                            if (errorcode == 0) {
                                me.V.msg_lbl_bbar.el.replaceCls('', "service-color-ok");
                            }else {
                                me.V.msg_lbl_bbar.el.replaceCls('', "service-color-nok");
                            }
                            me.V.msg_lbl_bbar.setText(info+" ("+errorcode+")");
                            me.MsgBox.close();
                    }
                    // read until rueckgabewert
                    if (nodeName != 'Rueckgabewert')
                        me.checkUpdateStatus();
                }else {
                    setTimeout(me.checkUpdateStatus, 1000);
                }
            },
            failure: function (res) {
                // console.log('Exception while checkUpdateStatus',res);
                // restart because while updating occur some communication failures
                setTimeout(me.checkUpdateStatus, 1000);
            }
        });
    },

    selectFirmware: function (myself, value, lastValue, handle) {
        if (myself.value.match(/^no FwPack/) === null) {
            this.V.updateBtn.setDisabled(false);
            this.V.btnRemoveFw.setDisabled(false);
        }
    }
});