/*global Ext: false, TR: false */
Ext.define('BS350.controller.DatabaseCtrl',
  {
    extend: 'BS350.custom.ViewController',

    views: ['DatabaseView'],

    items: [
      { name: 'pathChk', query: '#prPath', actions: {change: 'changePath'} },
      { name: 'maxResult', query: '#prMaxRes', actions: {change: 'changeMaxResult'} },
      { name: 'ringBuffer', query: '#prRing', actions: {change: 'changeRingBuffer'} },
      { name: 'rmDb', query: '#rmDb', actions: {click: 'rmvData'} },
      { name: 'format', query: '#format', actions: {change: 'changeFormat'} },

      { name: 'btnSave', query: '#btnSave', actions: {click: 'save'} },
      { name: 'btnDiscard', query: '#btnDiscard', actions: {click: 'reset'} }
    ],

    cLocalPath:'/mnt/data/',
    cSdPath: '/mnt/mmc/',

    backup: {},
    changes: {},
    currdata: {},
    blockCheck: false,
    forceClose: false,

    init: function () {
      this.addEvents('resultdbdeleted');
    },

    initView: function () {
      this.forceClose = false;
      this.getData();
      if (this.access !== 'w') {
        //this.V.pathChk.setReadOnly(true);
        this.V.maxResult.setReadOnly(true);
        this.V.ringBuffer.setReadOnly(true);
        this.V.rmDb.hide();
        //this.V.format.setReadOnly(true);
        this.view.getDockedItems()[0].hide();
      }
    },

    getData: function () {
      var me = this;
      Ext.Ajax.request({
        url: '/BS350/ressrv/resultstorage',
        success: function (res) {
          var data = Ext.JSON.decode(res.responseText).database;
          me.setValues(data);
        }
      });
    },

    setValues: function (data) {
      this.backup = Ext.clone(data);
      this.changes = Ext.clone(data);
      //this.V.pathChk.setValue(data.path === this.cSdPath);
      this.V.maxResult.setValue(data.max_results);
      this.V.ringBuffer.setValue(data.ring_buffer);
      //this.V.format.setValue(data.format);
      this.V.btnSave.setDisabled(true);
      this.V.btnDiscard.setDisabled(true);
    },

    changePath: function (chk, value) {
      if (value === true) {
        this.changes.path = this.cSdPath;
      } else {
        this.changes.path = this.cLocalPath;
      }
      this.checkChanges();
    },

    changeMaxResult: function (numberfield, value) {
      this.changes.max_results = value;
      this.checkChanges();
    },

    changeRingBuffer: function (checkbox, value) {
      this.changes.ring_buffer = value;
      this.checkChanges();
    },
    changeFormat: function (combo, value) {
      this.changes.format = value;
      this.checkChanges();
    },

    checkChanges: function () {
      var isDirty = this.isDirty();
      this.V.btnSave.setDisabled(!isDirty);
      this.V.btnDiscard.setDisabled(!isDirty);
    },

    isDirty: function () {
      var k;
      for (k in this.changes) {
        if (this.backup[k] !== this.changes[k]) { return true; }
      }
      return false;
    },

    reset: function () {
      this.getData();
    },

    rmvData: function() {
      var me = this;
      Ext.Msg.show({
        title: TR('Warning'),
        msg: TR('All result data will be removed'),
        buttons : Ext.MessageBox.OKCANCEL,
        fn: function(buttonId) {
          if (buttonId == 'ok')
          {
            Ext.Ajax.request({
              url: '/BS350/ressrv/removeResDb',
              success: function (res) {
                  me.fireEvent('resultdbdeleted');
                }
              }
            );
          }
        },
        icon: Ext.Msg.WARNING
      });
    },

    getChangedData: function (){
      if (this.changes.path === this.backup.path) {
        return ({database: this.changes});
      }
      return ({database: this.changes, trgtProc: {name: 'FtpToSD', active: (this.changes.path === this.cSdPath)}});
    },

    save: function (button, event, eOpts) {
      var me = this;
      Ext.Ajax.request({
        url: '/BS350/ressrv/resultstorage',
        method: 'POST',
        jsonData: this.getChangedData(),
        success: function (res) {
          me.setValues(me.changes);
          if (eOpts.callback) {
            eOpts.callback();
          }
        }
      });
    },

    askclose: function (panel) {
      var me = this;
      if (!me.forceClose && me.isDirty()) {
        Ext.Msg.show({
          title: TR('Save changes?'),
          msg: TR('Do you want to save the changes?'),
          buttons: Ext.Msg.YESNOCANCEL,
          fn: function (btn) {
            if (btn === 'yes') { me.save(null, null, {callback: function () {panel.close(); }}); }
            if (btn === 'no') { me.forceClose = true; panel.close(); }
          },
          icon: Ext.Msg.QUESTION
        });
        return false;
      }
      return true;
    }
  });

