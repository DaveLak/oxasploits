/*global Ext: false, TR: false, BS350: false */
Ext.define('BS350.controller.BatchCounterCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['BatchCounterView', 'BS350.custom.ToggleColumn'],

  items: [
    { name: 'bmsselAuto', query: '#bmsselAuto', actions: {change: 'changeBMSSelection'} },
    { name: 'prCounterAuto', query: '#prCounterAuto', actions: {} },
    { name: 'addmenuAuto', query: '#addmenuAuto', actions: {click: 'addCounter', beforeshow: 'fillCounterMenu'} },
    { name: 'btnRemoveAuto', query: '#btnRemoveAuto', actions: {click: 'removeCounter'} },
    { name: 'btnMenuUpAuto', query: '#btnMenuUpAuto', actions: {click: 'moveupMenuEntry'} },
    { name: 'btnMenuDownAuto', query: '#btnMenuDownAuto', actions: {click: 'movedownMenuEntry'} },

    { name: 'bmsselManual', query: '#bmsselManual', actions: {change: 'changeBMSSelectionManual'} },
    { name: 'prCounterManual', query: '#prCounterManual', actions: {} },
    { name: 'addmenuManual', query: '#addmenuManual', actions: {click: 'addCounterManual', beforeshow: 'fillCounterMenuManual'} },
    { name: 'btnRemoveManual', query: '#btnRemoveManual', actions: {click: 'removeCounterManual'} },
    { name: 'btnMenuUpManual', query: '#btnMenuUpManual', actions: {click: 'moveupMenuEntryManual'} },
    { name: 'btnMenuDownManual', query: '#btnMenuDownManual', actions: {click: 'movedownMenuEntryManual'} },

    { name: 'btnSave', query: '#btnSave', actions: {click: 'save'} },
    { name: 'btnDiscard', query: '#btnDiscard', actions: {click: 'reset'} },
    { name: 'btnReset', query: '#btnReset', actions: {click: 'resetToFactory'} }
  ],

  backupAuto: {},
  changesAuto: {},
  backupManual: {},
  changesManual: {},

  accordionPanel: null,

  blockCheck: false,
  forceClose: false,
  resortedFlag: false,

  initView: function () {
    if (this.access !== 'w') {
      this.V.bmsselAuto.setDisabled(true);
      this.V.bmsselManual.setDisabled(true);
      this.V.prCounterAuto.getPlugin('editing').on('beforeedit', function() { return false; });
      this.V.prCounterManual.getPlugin('editing').on('beforeedit', function() { return false; });

      Ext.each(Ext.ComponentQuery.query('toolbar', this.view), function (e) { e.hide(); });

      this.V.prCounterAuto.getView().on('beforedrop', function (e) {return false;});
      this.V.prCounterManual.getView().on('beforedrop', function (e) {return false;});
    }
    this.forceClose = false;
    this.counterStoreAuto = this.V.prCounterAuto.getStore();
    this.counterStoreManual = this.V.prCounterManual.getStore();

    this.counterStoreAuto.on('update', this.checkChanges, this);
    this.counterStoreManual.on('update', this.checkChanges, this);

    this.V.prCounterAuto.getView().on('drop', this.reOrder, this);
    this.V.prCounterManual.getView().on('drop', this.reOrder, this);

    this.V.prCounterAuto.on('sortchange', this.reOrder, this);
    this.V.prCounterManual.on('sortchange', this.reOrder, this);

    this.getDataAuto();
    this.getDataManual();
    this.autoHeaderWidth(this.V.prCounterAuto);
    this.autoHeaderWidth(this.V.prCounterManual);

    this.accordionPanel = Ext.ComponentQuery.query('#accordionPanel')[0]

    for (var i = 0; i < this.accordionPanel.items.items.length; i++) {
      this.accordionPanel.items.items[i].on('beforecollapse', this.saveBeforeCollapse, this);
      this.accordionPanel.items.items[i].on('beforeexpand', this.saveBeforeExpand, this);
      this.accordionPanel.items.items[i].on('collapse', this.setActiveTitle, this);
    }

    var panel = this.accordionPanel.getActivePanel();
    panel.setTitle("<b>" + panel.orig_title + "</b>");

  },

  reOrder: function () {
    this.V.btnSave.setDisabled(false);
    this.V.btnDiscard.setDisabled(false);
    this.resortedFlag = true;
  },

  getDataAuto: function () {
    var me = this;
    Ext.Ajax.request({
      url: '/BS350/bcounter/cfg',
      params: {data : "auto"},
      method: "GET",
      success: function (res) {
        me.backupAuto = Ext.JSON.decode(res.responseText).auto;
        me.resetAuto();
      }
    });
  },

  getDataManual: function () {
    var me = this;
    Ext.Ajax.request({
      url: '/BS350/bcounter/cfg',
      params: {data : "manual"},
      method: "GET",
      success: function (res) {
        me.backupManual = Ext.JSON.decode(res.responseText).manual;
        me.resetManual();
      }
    });
  },

  changeBMSSelection: function (radiogroup, value) {
    this.counterStoreAuto.bmsSelect = value.bmsselect;
    this.V.prCounterAuto.getView().refresh();
    this.checkChanges();
  },

  changeBMSSelectionManual: function (radiogroup, value) {
    this.counterStoreManual.bmsSelect = value.bmsselect;
    this.V.prCounterManual.getView().refresh();
    this.checkChanges();
  },

  addCounter: function (menu, item) {
    if (item != undefined)
    {
      var countId = item.countId;
      var prgname = this.backupAuto.prgs[countId].Name;
      var id = this.backupAuto.prgs[countId].id;
      this.counterStoreAuto.add({countId: id, prgname: prgname, MaxOk: 0, DirectionOk: 'up', MaxNok: 0, DirectionNok: 'up', LockTool: true, LockCcw: true, LockCcwAfterOk: false, LockCcwAfterNok: false, pos: this.counterStoreAuto.data.length});
      this.checkChanges();
    }
  },

  addCounterManual: function (menu, item) {
    if (item != undefined)
    {
      var countId = item.countId;
      var prgname = this.backupManual.prgs[countId].Name;
      var id = this.backupManual.prgs[countId].id;
      this.counterStoreManual.add({countId: id, prgname: prgname, MaxOk: 0, DirectionOk: 'up', MaxNok: 0, DirectionNok: 'up', LockTool: true, LockCcw: true, LockCcwAfterOk: false, LockCcwAfterNok: false, pos: this.counterStoreManual.data.length});
      this.checkChanges();
    }
  },

  fillCounterMenu: function (menu) {
    menu.removeAll();
    var i;
    menu.add({text: "&nbsp;", countId: 0, disabled: true});
    for (i = 0; i < this.backupAuto.prgs.length; i++) {
      if (this.counterStoreAuto.findExact('countId', this.backupAuto.prgs[i].id) < 0) {
        if (this.counterStoreAuto.bmsSelect) {
          menu.add({text: this.backupAuto.prgs[i].id, countId: i});
        } else {
          menu.add({text: this.backupAuto.prgs[i].id + ': ' + this.backupAuto.prgs[i].Name, countId: i});
        }
      }
    }
    menu.add({text: "&nbsp;", countId: 0, disabled: true});
  },


  fillCounterMenuManual: function (menu) {
    menu.removeAll();
    var i;
    menu.add({text: "&nbsp;", countId: 0, disabled: true});
    for (i = 0; i < this.backupManual.prgs.length; i++) {
      if (this.counterStoreManual.findExact('countId', this.backupManual.prgs[i].id) < 0) {
        if (this.counterStoreManual.bmsSelect) {
          menu.add({text: this.backupManual.prgs[i].id, countId: i});
        } else {
          menu.add({text: this.backupManual.prgs[i].id + ': ' + this.backupManual.prgs[i].Name, countId: i});
        }
      }
    }
    menu.add({text: "&nbsp;", countId: 0, disabled: true});
  },

  moveupMenuEntry: function () {
    var sel = this.V.prCounterAuto.getSelectionModel().selected;
    if (sel.length > 0) {
      var item = sel.getAt(0);
      var pos = item.get('pos');
      if (pos > 0) {
        var store = this.V.prCounterAuto.getStore();
        item.set('pos', item.get('pos') - 1);
        store.getAt(pos - 1).set('pos', pos);
        store.sort('pos', 'ASC');
      }
      this.checkChanges();
    }
  },

  moveupMenuEntryManual: function () {
    var sel = this.V.prCounterManual.getSelectionModel().selected;
    if (sel.length > 0) {
      var item = sel.getAt(0);
      var pos = item.get('pos');
      if (pos > 0) {
        var store = this.V.prCounterManual.getStore();
        item.set('pos', item.get('pos') - 1);
        store.getAt(pos - 1).set('pos', pos);
        store.sort('pos', 'ASC');
      }
      this.checkChanges();
    }
  },

  movedownMenuEntry: function () {
    var sel = this.V.prCounterAuto.getSelectionModel().selected;
    if (sel.length > 0) {
      var item = sel.getAt(0);
      var pos = item.get('pos');
      var store = this.V.prCounterAuto.getStore();
      if (pos < store.count() - 1) {
        item.set('pos', item.get('pos') + 1);
        store.getAt(pos + 1).set('pos', pos);
        store.sort('pos', 'ASC');
      }
    }
    this.checkChanges();
  },


  movedownMenuEntryManual: function () {
    var sel = this.V.prCounterManual.getSelectionModel().selected;
    if (sel.length > 0) {
      var item = sel.getAt(0);
      var pos = item.get('pos');
      var store = this.V.prCounterManual.getStore();
      if (pos < store.count() - 1) {
        item.set('pos', item.get('pos') + 1);
        store.getAt(pos + 1).set('pos', pos);
        store.sort('pos', 'ASC');
      }
    }
    this.checkChanges();
  },

  removeCounter: function () {
    var sel = this.V.prCounterAuto.getSelectionModel().selected;
    var selection = this.V.prCounterAuto.getSelectionModel().getSelection();
    var indexOf;
    if (sel.length > 0) {
      indexOf = this.counterStoreAuto.indexOf(selection[0]);
      this.counterStoreAuto.remove(sel.getAt(0));
      if(indexOf === this.counterStoreAuto.getCount()){
        this.V.prCounterAuto.getView().select(indexOf-1);
      }
      else {
        this.V.prCounterAuto.getView().select(indexOf);
      }
      this.checkChanges();
    }
  },

  removeCounterManual: function () {
    var sel = this.V.prCounterManual.getSelectionModel().selected;
    var selection = this.V.prCounterManual.getSelectionModel().getSelection();
    var indexOf;
    if (sel.length > 0) {
      indexOf = this.counterStoreManual.indexOf(selection[0]);
      this.counterStoreManual.remove(sel.getAt(0));
      if(indexOf === this.counterStoreManual.getCount()){
        this.V.prCounterManual.getView().select(indexOf-1);
      }
      else {
        this.V.prCounterManual.getView().select(indexOf);
      }
      this.checkChanges();
    }
  },


  reset: function () {
    var panel = this.accordionPanel.getActivePanel();
    if(panel.itemId === "autoModeView") {
      this.resetAuto();
    }
    else if(panel.itemId === "manualModeView") {
      this.resetManual();
    }
  },


  resetAuto: function () {
    this.blockCheck = true;
    this.counterStoreAuto.sorters.clear();
    this.resortedFlag = false;
    var data = this.backupAuto;
    this.V.bmsselAuto.setValue({bmsselect: data.BmsSelect});

    this.counterStoreAuto.bmsSelect = data.BmsSelect;
    this.counterStoreAuto.removeAll();
    var i;
    for (i = 0; i < data.CntrSets.length; i++) {
      var s = data.CntrSets[i];
      var countId = s.Id;
      var prgname = 'n.a';
      var j;
      for (j = 0; j < data.prgs.length; j++)
      {
        if (data.prgs[j].id == countId) {
          prgname = data.prgs[j].Name;
          break;
        }
      }
      this.counterStoreAuto.add({countId: countId, prgname: prgname, MaxOk: s.MaxOk, DirectionOk: s.DirectionOk, MaxNok: s.MaxNok, DirectionNok: s.DirectionNok, LockTool: s.LockTool, LockCcw: s.LockCcw, LockCcwAfterOk: s.LockCcwAfterOk, LockCcwAfterNok: s.LockCcwAfterNok, pos: i});
    }
    this.counterStoreAuto.sync();
    this.blockCheck = false;
    this.V.btnSave.setDisabled(true);
    this.V.btnDiscard.setDisabled(true);
  },


  resetManual: function () {
    this.blockCheck = true;
    this.counterStoreManual.sorters.clear();
    this.resortedFlag = false;
    var dataManual = this.backupManual;
    this.V.bmsselManual.setValue({bmsselect: dataManual.BmsSelect});

    this.counterStoreManual.bmsSelect = dataManual.BmsSelect;
    this.counterStoreManual.removeAll();
    var k;
    for (k = 0; k < dataManual.CntrSets.length; k++) {
      var s_m = dataManual.CntrSets[k];
      var countId_m = s_m.Id;
      var prgname_m = 'n.a';
      var m;
      for (m = 0; m < dataManual.prgs.length; m++)
      {
        if (dataManual.prgs[m].id == countId_m) {
          prgname_m = dataManual.prgs[m].Name;
          break;
        }
      }
      this.counterStoreManual.add({countId: countId_m, prgname: prgname_m, MaxOk: s_m.MaxOk, DirectionOk: s_m.DirectionOk, MaxNok: s_m.MaxNok, DirectionNok: s_m.DirectionNok, LockTool: s_m.LockTool, LockCcw: s_m.LockCcw, LockCcwAfterOk: s_m.LockCcwAfterOk, LockCcwAfterNok: s_m.LockCcwAfterNok, pos: k});
    }
    this.counterStoreManual.sync();
    this.blockCheck = false;
    this.V.btnSave.setDisabled(true);
    this.V.btnDiscard.setDisabled(true);
  },


  resetToFactory: function () {
    var me = this;
    var param, panel = this.accordionPanel.getActivePanel();

    if(panel.itemId === "autoModeView") {
      param = "auto"
    }
    else if(panel.itemId === "manualModeView") {
      param = "manual"
    }

    var reset = function () {
      var box = Ext.MessageBox.wait(TR('Resetting to factory..'), '');
      Ext.Ajax.request({
        url: '/BS350/bcounter/resetToFactory',
        params: {data: param},
        success: function (res) {
          box.hide();
          me.resortedFlag = false;
          var resData = Ext.JSON.decode(res.responseText);
          if (resData.success) {
            if (param === "manual") {
              me.getDataManual();
            }
            else {
              me.getDataAuto();
            }
          } else {
            Ext.Msg.show({title: TR('Error'), msg: TR('Reset failed') + '<br/>' + resData.msg, buttons: Ext.Msg.OK, icon: Ext.Msg.ERROR});
          }
        },
        failure: function (res) {
          box.hide();
          Ext.Msg.show({title: TR('Error'), msg: TR('Reset failed'), buttons: Ext.Msg.OK, icon: Ext.Msg.ERROR});
        }
      });
    };

    var title = panel.title + ": " + TR('Reset to factory');
    var msg = TR('Do you want to discard the current configuration and reset to factory? All relevant configuration files are to be overwritten.');
    BS350.custom.Utils.showResetToFactoryConfirmation(reset, title, msg);
  },


  checkChanges: function () {
    if (this.blockCheck) { return; }
    var isDirty = this.isDirty();
    this.V.btnSave.setDisabled(!isDirty);
    this.V.btnDiscard.setDisabled(!isDirty);
  },


  isDirty: function () {
    var panel = this.accordionPanel.getActivePanel();
    if(panel.itemId === "autoModeView") {
      if (this.backupAuto.BmsSelect !== this.counterStoreAuto.bmsSelect) {
        return true;
      }
      return this.counterStoreAuto.isDirty();
    }
    else if(panel.itemId === "manualModeView") {
      if (this.backupManual.BmsSelect !== this.counterStoreManual.bmsSelect) {
        return true;
      }
      return this.counterStoreManual.isDirty();
    }
  },


  save: function (button, event, eOpts, custom) {
    var panel = this.accordionPanel.getActivePanel();
    var me = this, data;

    if(panel.itemId === "autoModeView") {
      data = {BmsSelect: this.counterStoreAuto.bmsSelect};
      data.prgs = this.backupAuto.prgs;
      data.CntrSets = [];
      this.counterStoreAuto.each(function (item) { data.CntrSets.push({Id: item.get('countId'), MaxOk: item.get('MaxOk'), DirectionOk: item.get('DirectionOk'), MaxNok: item.get('MaxNok'), DirectionNok: item.get('DirectionNok'), LockTool: item.get('LockTool'), LockCcw: item.get('LockCcw'), LockCcwAfterOk: item.get('LockCcwAfterOk'), LockCcwAfterNok: item.get('LockCcwAfterNok')}); });
      data['panel'] = 'auto';
    }
    else if(panel.itemId === "manualModeView") {
      data = {BmsSelect: this.counterStoreManual.bmsSelect};
      data.prgs = this.backupManual.prgs;
      data.CntrSets = [];
      this.counterStoreManual.each(function (item) { data.CntrSets.push({Id: item.get('countId'), MaxOk: item.get('MaxOk'), DirectionOk: item.get('DirectionOk'), MaxNok: item.get('MaxNok'), DirectionNok: item.get('DirectionNok'), LockTool: item.get('LockTool'), LockCcw: item.get('LockCcw'), LockCcwAfterOk: item.get('LockCcwAfterOk'), LockCcwAfterNok: item.get('LockCcwAfterNok')}); });
      data['panel'] = 'manual';
    }

    Ext.Ajax.request({
      url: '/BS350/bcounter/cfg',
      method: 'POST',
      jsonData: data,
      success: function (res) {
        me.getController('NavigationCtrl').updateActives();
        me.resortedFlag = false;
        if (data['panel'] === 'auto')
          me.counterStoreAuto.sorters.clear();
        else if (data['panel'] === 'manual')
          me.counterStoreManual.sorters.clear();

        if (eOpts.callback) {
          if (data['panel'] === 'auto')
            me.counterStoreAuto.sync();
          else if (data['panel'] === 'manual')
            me.counterStoreManual.sync();

          me.forceClose = true;
          eOpts.callback();
        }
        else {
          if (data['panel'] === 'auto')
            me.backupAuto = Ext.JSON.decode(res.responseText);
          else if (data['panel'] === 'manual')
            me.backupManual = Ext.JSON.decode(res.responseText);

          me.reset();
        }
        if (custom) {
          custom.callback();
        }
      }
    });
  },

  askclose: function (panel) {
    var me = this;
    if ((!me.forceClose && this.isDirty()) || me.resortedFlag) {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') { me.save(null, null, {callback: function () {panel.close(); }}); }
          if (btn === 'no') { me.forceClose = true; me.resortedFlag = false; panel.close(); }
        },
        icon: Ext.Msg.QUESTION
      });
      return false;
    }
    return true;
  },


  saveBeforeCollapse: function (p, direction, animate, eOpts) {
    var me = this;
    if (this.isDirty())
    {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') { me.save(null, null, {callback: null}, {callback: function () { p.collapse(); }});}
          if (btn === 'no') { me.reset(); p.collapse();}
        },
        icon: Ext.Msg.QUESTION
      });
      return false;
    }

    return true;
  },


  saveBeforeExpand: function (p, direction, animate, eOpts) {
    var me = this;
    if (this.isDirty())
    {
      Ext.Msg.show({
        title: TR('Save changes?'),
        msg: TR('Do you want to save the changes?'),
        buttons: Ext.Msg.YESNOCANCEL,
        fn: function (btn) {
          if (btn === 'yes') { me.save(null, null, {callback: null}, {callback: function () { p.expand(); }});}
          if (btn === 'no') { me.reset(); p.expand();}
        },
        icon: Ext.Msg.QUESTION
      });
      return false;
    }
    return true;
  },


  setActiveTitle: function () {
    for (var i = 0; i < this.accordionPanel.items.items.length; i++) {
      if (this.accordionPanel.items.items[i].collapsed === false) {
        this.accordionPanel.items.items[i].setTitle("<b>" + this.accordionPanel.items.items[i].orig_title + "</b>");
      }
      else {
        this.accordionPanel.items.items[i].setTitle(this.accordionPanel.items.items[i].orig_title);
      }
    }
  },


  autoHeaderWidth: function (grid) {
    try
    {
      var cellEl = grid.getEl().down('.x-grid-cell-inner');
      var metrics = new Ext.util.TextMetrics(cellEl);

      for (var col = 0; col < grid.columns.length; col++) {
        var maxwidth = 0;
        var colHeader = grid.columns[col].text;
        var parentWidth = Math.max(0, metrics.getWidth(colHeader));
        if (grid.columns[col].isGroupHeader !== undefined)
        {
          if (grid.columns[col].isGroupHeader === true)
          {
            var cntSub = grid.columns[col].items.length;
            maxwidth = 0;
            for (var j = 0; j < cntSub; j++)
            {
              colHeader = grid.columns[col].items.items[j].text;
              maxwidth = Math.max(maxwidth, metrics.getWidth(colHeader));
            }
            if (parentWidth > (maxwidth * cntSub))
            {
              maxwidth = 30 + (parentWidth/cntSub);
            }
            for (var j = 0; j < cntSub; j++)
            {
              grid.columns[col].items.items[j].setWidth(maxwidth + 20);
            }
          }
        }
        else
        {
          grid.columns[col].setWidth(parentWidth + 30);
        }
      }
    } catch (err) { }
  }
});

