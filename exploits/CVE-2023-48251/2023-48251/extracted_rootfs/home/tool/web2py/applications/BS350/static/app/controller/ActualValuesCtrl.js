/*global Ext: false, TR: false, BS350: false */
/*
 Controller of the actual values window
 */
Ext.define('BS350.controller.ActualValuesCtrl', {
  extend: 'BS350.custom.ViewController',
  views: ['ActualValuesView'],

  items: [
    {name: 'header', query: '#avHeader'},
    {name: 'body', query: '#avBody', actions: {resize: 'resizeBody'}},
    {name: 'levelBack', query: '#levelBack', actions: {click: 'showPreviousLevel'}},
    {name: 'levelNext', query: '#levelNext', actions: {click: 'showNextLevel'}}
  ],

  currCycleNr: -1,
  levelIndex: 0,
  navpath: '/home/actualvalues',

  init: function (application) {
    this.currentValues = BS350.custom.Analysis.getAvDefaultValues();
    application.getController('HeaderCtrl').on('updatestatus', this.checkCycle, this);
  },

  initView: function () {
    this.updateValues(this.currCycleNr);
  },

  checkCycle: function (status) {
    if (this.view && this.currCycleNr !== status.cycle) {
      this.updateValues(status.cycle);
    }
  },

  actualValuesUrl: '/BS350/result/actualvalues',

  updateValues: function (cycle) {
    if (cycle < 0) {
      /*
       this.currentValues = BS350.custom.Analysis.getAvDefaultValues();
       this.showValues(-1);
       */
      return;
    }
    var me = this;
    me.currCycleNr = cycle;
    if (me.view) {
      var updateValuesFun = function () {
        Ext.Ajax.request({
          url: me.actualValuesUrl,
          params: {id: me.currCycleNr, stored: false},
          success: function (res) {
            me.currentValues = Ext.JSON.decode(res.responseText);
            Ext.Array.each(me.currentValues, function (item, idx, allItems) {
              allItems[idx].TF = TR(item.TF);
            });
            /*
             for (var i = 0; i < me.currentValues.length; i++)
             {
             var precision = me.currentValues[i]['tPrec'];
             me.currentValues[i]['T'] = me.currentValues[i]['T']/precision;
             precision = me.currentValues[i]['aPrec'];
             me.currentValues[i]['A'] = me.currentValues[i]['A']/precision;
             precision = me.currentValues[i]['dPrec'];
             me.currentValues[i]['D'] = me.currentValues[i]['D']/precision;
             }
             */

            if (me.currentValues === null) {
              me.currentValues = BS350.custom.Analysis.getAvDefaultValues();
            } else {
              //Ext.Array.each(me.currentValues, function (item) { item.LastCmdLabel = TR('LastCmd'); });
            }

            me.showValues(-1);
          }
        });
      };

      updateValuesFun();

    }
  },

  resizeBody: function (body, width, height) {
    body.tableCfg['FS'] = height / 4;
    body.setValues(this.currentValues[this.levelIndex]);
  },

  showPreviousLevel: function () {
    if (this.levelIndex > 0) {
      this.showValues(this.levelIndex - 1);
    }
  },

  showNextLevel: function () {
    if (this.levelIndex < this.currentValues.length - 1) {
      this.showValues(this.levelIndex + 1);
    }
  },

  showValues: function (index) {
    if (index === -1) {
      index = this.currentValues.length - 1;
    }
    this.V.levelBack.setDisabled(index === 0);
    this.V.levelNext.setDisabled(index === this.currentValues.length - 1);
    var values = this.currentValues[index];

    this.V.header.setValues(values);
    this.V.body.setValues(values);
    this.levelIndex = index;
  }
});
