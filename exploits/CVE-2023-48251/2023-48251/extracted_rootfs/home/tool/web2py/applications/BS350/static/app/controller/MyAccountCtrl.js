/*global Ext: false, TR: false */
Ext.define('BS350.controller.MyAccountCtrl', {
  extend: 'BS350.custom.ViewController',

  views: ['MyAccountView'],

  items: [
    {name: 'username', query: '#username'},
    {name: 'firstname', query: '#firstname'},
    {name: 'lastname', query: '#lastname'},
    {name: 'email', query: '#email'},
    {name: 'changePassword', query: '#changePassword', actions: {click: 'changePassword'} },
    {name: 'exportSDBtn', query: '#exportSDBtn', actions: {click: 'exportSuperuser'} },
    {name: 'exportSDMsg', query: '#exportSDMsg'},
    {name: 'exportContainer', query: '#exportContainer'},
    {name: 'changePasswordWin', query: '#changePasswordWin'}
  ],

  sdMonitoring: false,
  rootPath: null,

  initView: function () {
    this.updateData();

    // Sub-Window
    this.V.changePasswordWin.down('#changePasswordCancel').on('click', this.cancelChanges, this);
    this.V.changePasswordWin.down('#changePasswordConfirm').on('click', this.confirmChanges, this);

    if (this.access === 'w') {
      this.isSpecialUser();
    }
  },

  cancelChanges: function () {
    this.V.changePasswordWin.hide();
  },

  confirmChanges: function () {
    var form = this.V.changePasswordWin.down('form').getForm();
    var valid = true;
    form.getFields().each(function (item) {valid = valid && item.validate(); });
    if (valid) {

      var oldPwd =  Base64.encode(this.V.changePasswordWin.down('#oldPasswordField').value);
      var newPwd =  Base64.encode(this.V.changePasswordWin.down('#newPasswordField').value);

      Ext.Ajax.request({
        url: '/BS350/accounts/changeOwnPassword',
        params: { oldPwd: oldPwd, pwd: newPwd },
        success: function (response) {
          if (response.responseText === 'OK') {
            Ext.Msg.alert(TR('Status'), TR('Password changed successfully.'));
          } else if (response.responseText === 'FAIL') {
            Ext.Msg.alert(TR('Status'), TR('Invalid password.'));
          } else if (response.responseText === 'OLD_PWD_NO_MATCH') {
            Ext.Msg.show({ title: TR('Status'), msg: TR('Old password does not match.'), buttons: Ext.Msg.OK, cls: 'passwordChangedMsgBoxCls', id: 'passwordChangedStatusBtnId' });
          }
        }
      });
      this.V.changePasswordWin.hide();
    }
  },

  changePassword: function (button, event) {
    this.V.changePasswordWin.down('#oldPasswordField').setValue('');
    this.V.changePasswordWin.down('#newPasswordField').setValue('');
    this.V.changePasswordWin.down('#newPasswordRepeatedField').setValue('');

    this.V.changePasswordWin.show();
  },


  checkSD: function () {
    var me = this;
    if (!me.sdMonitoring) { return; }
    Ext.Ajax.request({
      url: '/BS350/fs/sdPathList',
      method: 'GET',
      success: function (res) {
        var pathList = Ext.JSON.decode(res.responseText);
        if (pathList.length > 0) {
          me.setButtonStatus('SD', 'export', true, '', false);
          me.rootPath = pathList[0];
        } else {
          var errorMsg = TR('No SD card inserted');
          me.rootPath = null;
          me.setButtonStatus('SD', 'export', false, errorMsg, true);
        }
      }
    });
    setTimeout(function () { me.checkSD(); }, 4000);
  },


  exportSuperuser: function (button, event) {
    var me = this;
    Ext.MessageBox.confirm(
      TR("Export Superuser"),
      TR("Export current user with Level 5 permissions to SD?"),
      function (answer) {
        if (answer === "yes") {
          me.exportUserToSD();
        }
      }
    );
  },
  
  
  exportUserToSD: function() {
    var me = this;

    Ext.Ajax.request(
      {
        url: '/BS350/accounts/exportUserToSD',
        method: 'GET',
        params: {path: me.rootPath},
        success: function (res) {
          var resData = Ext.JSON.decode(res.responseText);
          if (!resData.success) {
            me.setButtonStatus('SD', 'export', false, TR(resData.msg), true);
          }
          else {
            me.setButtonStatus('SD', 'export', false, TR("Export successful"), false);
          }
        }
      }
    );
    me.setButtonStatus('SD', 'export', false, TR("Waiting"), false);
  },


  updateData : function () {
    var me = this;
    Ext.Ajax.request(
      {
        url: '/BS350/accounts/getCurrentUser',
        success: function (res) {
          var data = Ext.JSON.decode(res.responseText);
          me.V.username.setText(data.username);
          me.V.firstname.setText(data.firstname);
          me.V.lastname.setText(data.lastname);
          me.V.email.setText(data.email);
        }
      }
    );
  },

  isSpecialUser: function () {
    var me = this;
    Ext.Ajax.request({
      url: '/BS350/accounts/isSpecialUser',
      success: function (res) {
        if (res.responseText === 'yes')
        {
          me.V.changePassword.hide();
          me.V.exportSDBtn.hide();
          me.V.exportContainer.setWidth(0);
        }
        else if (res.responseText === 'su_perm')
        {
          me.V.changePassword.show();
           me.V.exportSDBtn.show();
           me.setButtonStatus('SD', 'export', false, TR('No SD card inserted'), true);
           me.V.exportContainer.setWidth(600);
        }
        else {
          me.V.changePassword.show();
          me.V.exportSDBtn.hide();
          //me.setButtonStatus('SD', 'export', false, TR('No SD card inserted'), true);
          me.V.exportContainer.setWidth(0);
        }
      },
      failure: function (res, opts){
        me.V.changePassword.hide();
        me.V.exportSDBtn.hide();
      }
    });
  },

  
  setButtonStatus: function (dev, func, active, text, error) {
    var button = this.V[func + dev + 'Btn'],
      label = this.V[func + dev + 'Msg'];


    if (button.isVisible()) {
      button.setDisabled(!active);
      label.setText(text);
      if (error) {
        label.el.replaceCls('black-label', 'red-label');
      } else {
        label.el.replaceCls('red-label', 'black-label');
      }
    }
  },
  

  activated: function () {
    this.sdMonitoring = true;
    if (this.access === 'w') {
      this.checkSD();
    }
  },

  deactivated: function () {
    this.sdMonitoring = false;
  }

});

