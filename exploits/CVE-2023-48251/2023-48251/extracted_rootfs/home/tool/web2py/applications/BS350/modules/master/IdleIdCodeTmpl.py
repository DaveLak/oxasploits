__author__ = 'frank'

import atoms


class IdleIdCodeTmpl:

    def __init__(self):
        self.data = []

    def requires(self):
        self.data.extend(atoms.Requires())

    def repeatScan(self):
        self.data.extend(atoms.RepeatScan())

    def initNode(self, user, comment, date, display_time, id_input_name1, id_input_comment1):
        self.data.extend(atoms.InitNode(user, comment, date, display_time, id_input_name1, id_input_comment1))

    def config(self):
        self.data.append('--globale run Einstellungen setzen')
        self.data.append('local config = {')
        self.data.append('    stopOnNok = false,')
        self.data.append('    stopOnTimeout = false')
        self.data.append('}')
        self.data.append('f.setConfiguration(config)')
        self.data.append('')

    def localNode(self):
        self.data.extend(atoms.Local())

    def setEnable(self):
        """self.data.append('atoms["$SetEnable"] = {')
              self.data.append('   text ="",')
              self.data.append('   type = c.TypeTriggerOut,')
              self.data.append('   mode = c.TriggerOutModeBmsIn,')
              self.data.append('   dest  = plc.In.En,    --    BMS_SE_E_EN')
              self.data.append('   state = 1,')
              self.data.append('   range = 1,')
              self.data.append('   valueList = {}')
              self.data.append('}')
              self.data.append('')"""

    def idCodeInit(self, source, fire_idcode, range1, target, extjobctrl):
        self.data.append('atoms["$IdCodeInit"]={')
        self.data.append('  text= "",')
        self.data.append('  type = c.TypeTriggerOut,')
        self.data.append('  mode = c.TriggerOutModeIdCodeInit, --c.TriggerOutScanPrg')
        self.data.append('  dest = 0,')
        self.data.append('  range= 0,')
        self.data.append('  state= 0,')
        self.data.append('  valueList={')
        self.data.append('    id = "$Mode",  --id code id ')
        self.data.append('    fire_idcode = %d,  --Im master Job muss Id code propagiert werden' % fire_idcode)
        if source == 0:
            src = 'scanner'
        elif source == 1:
            src = 'openprotocol'
        else:
            src = 'vwxml'
        self.data.append('    src = idsrc.%s,  --idsrc.openprotocol, idsrc.scanner, idsrc.vwxml' % src)
        self.data.append('    extjobctrl = %d,  -- 0=NokResult, 1=WaitForJobEnable' % extjobctrl)
        self.data.append('    target = %d, -- Was soll gescannt werden? - 1=IDCode, 4=ID Input Assignment' % target)
        self.data.append('    range=%s' % range1)
        self.data.append('  }')
        self.data.append('}')
        self.data.append('')

    def initScanner(self, codes, laserontime, target, trigger, play_sound):
        self.data.append('atoms["$InitScanner"]={')
        self.data.append('  text= "",')
        self.data.append('  type = c.TypeTriggerOut,')
        self.data.append('  mode = c.TriggerOutModeScanInit, --c.TriggerOutScanPrg')
        self.data.append('  dest = 0,')
        self.data.append('  range= 0,')
        self.data.append('  state= 0,')
        self.data.append('  valueList={')
        if target == 1:
            self.data.append('    id = "$Mode",')
        #self.data.append('    target = %d, -- Was soll gescannt werden? - 0=undefined, 1=IDCode, 2=PrgNr, 3=JobNr' % target)
        self.data.append('    trigger=%d, -- Ausloesebedingung: MenuBtn=1, LeftBtn=2, RightBtn=3, Plc=4, StartButton=5' % trigger)
        self.data.append('    laserontime=%s,' % laserontime)
        self.data.append('    play_sound=%d, --soll sound abgespielt werden' % play_sound)
        self.data.append('    codes={%s} --erlaubte Codes' % codes)
        #self.data.append('    range=%s' % range1)
        self.data.append('  }')
        self.data.append('}')
        self.data.append('')

    def displayNoScanner(self):
        self.data.extend(atoms.DisplayNoScanner())

    def displayScannerNotActive(self):
        self.data.extend(atoms.DisplayScannerNotActive())

    def waitScanInitAck(self):
        self.data.extend(atoms.WaitScanInitAck())


    def waitScanStartTrigger(self, text, source):
        self.data.append('--warten auf Trigger Scanner')
        self.data.append('atoms["$WaitScanStartTrigger"]={')
        if source == 0:
            self.data.append('  text= "%s",' % text)
        else:
            self.data.append('  text= "",')
        self.data.append('  type = c.TypeTriggerIn,')
        self.data.append('  mode = c.TriggerInModeScanTrigger, --c.TriggerOutScanPrg')
        self.data.append('  dest = 0,')
        self.data.append('  state= 1,')
        self.data.append('  range= 1,')
        self.data.append('  valueList = {}')
        self.data.append('}')
        self.data.append('')

    def doScan(self):
        self.data.extend(atoms.DoScan())

    def waitIDCodeTimeout(self, timeout, text, source):
        self.data.append('atoms["$WaitIdCodeTimeout"]={')
        self.data.append('  type=c.TypeTriggerIn,')
        self.data.append('  mode=c.TriggerInModeTimeoutAtom,')
        if source == 1 or source == 5:
            self.data.append('  text= "%s",' % text)
        else:
            self.data.append('  text= "",')
        self.data.append('  dest=0,')
        self.data.append('  range=1,')
        self.data.append('  state=c.TriggerInModeIdCode,')
        self.data.append('  timeout=%d,' % timeout)
        self.data.append('}')

    def waitIDCode(self):
        self.data.extend(atoms.WaitIDCode())

    def triggerInGrp(self):
        self.data.append('atoms["$TriggerInGrp1"] = {')
        self.data.append('  type=c.TypeTriggerInGrp,')
        self.data.append('  members = {"$WaitIdCode", "$WaitIdCodeTimeout"}')
        self.data.append('}')
        self.data.append('')

    def displayIdCode(self, display_time):
        self.data.extend(atoms.DisplayIDCode(display_time))

    def displayIdCodeTimeDelay(self):
        self.data.extend(atoms.DisplayIDCodeTimeDelay())

    def scanFinalOK(self, state):
        self.data.extend(atoms.ScanFinalOK(state))

    def doNokResult(self):
        self.data.extend(atoms.DoNokResult())

    def scanTimeoutMsg(self):
        self.data.extend(atoms.ScanTimeoutMsg())

    def codeNotSupportedMsg(self):
        self.data.extend(atoms.CodeNotSupportedMsg())

    def codeNotActiveMsg(self):
        self.data.extend(atoms.CodeNotActiveMsg())

    def codeNotAssignedMsg(self):
        self.data.extend(atoms.CodeNotAssignedMsg())

    def displayMsgTimeDelay(self, time_delay):
        self.data.extend(atoms.DisplayMsgTimeDelay(time_delay))


    def scanTimeoutReached(self, timeout_text):
        self.data.extend(atoms.ScanTimeoutDelay(timeout_text))


    def waitJobEnable(self):
        self.data.extend(atoms.WaitJobEnable())

    def bmsEnable(self):
        self.data.extend(atoms.BmsEnable())


    def publishAtoms(self):
        self.data.append('f.publishAtoms(atoms,function (a) cpp.job:addAtom(a) end)')
        self.data.append('')
        self.data.append('')

    def nodes(self):
        self.data.append('nodes = {}')
        self.data.append('nodes["StartWithEnable"] = {}')
        self.data.append('nodes["SetEnableStart"] = {}')
        self.data.append('nodes["StartWithoutEnable"] = {}')
        self.data.append('nodes["InitIDCode"] = {}')
        self.data.append('nodes["InitScanner"] = {}')
        self.data.append('nodes["DisplayNoScanner"] = {}')
        self.data.append('nodes["DisplayScannerNotActive"] = {}')
        self.data.append('nodes["WaitForScanInitAck"] = {}')
        self.data.append('nodes["WaitForScanStartTrigger"] = {}')
        self.data.append('nodes["Scanning"] = {}')
        self.data.append('nodes["WaitIdCodeResult"] = {}')
        self.data.append('nodes["RepeatTimeout"] = {}')
        self.data.append('nodes["RepeatTimeoutDelay"] = {}')
        self.data.append('nodes["RepeatCodeNotSupported"] = {}')
        self.data.append('nodes["RepeatCodeNotSupportedDelay"] = {}')
        self.data.append('nodes["RepeatCodeNotActive"] = {}')
        self.data.append('nodes["RepeatCodeNotActiveDelay"] = {}')
        self.data.append('nodes["RepeatCodeNoAssignment"] = {}')
        self.data.append('nodes["RepeatCodeNoAssignmentDelay"] = {}')

        self.data.append('nodes["ScanTimeout"] = {}')
        self.data.append('nodes["ScanTimeoutDelay"] = {}')

        self.data.append('nodes["DisplayNewIDCode"] = {}')
        self.data.append('nodes["DisplayNewIDCodeDelay"] = {}')
        self.data.append('nodes["ScanFinalOK"] = {}')
        self.data.append('nodes["DoNokResult"] = {}')

        self.data.append('nodes["WaitForJobEnable"] = {}')
        self.data.append('nodes["BmsEnable"] = {}')

        self.data.append('')

    def workflow(self, source, extjobctrl):
        self.data.append('------------ CS/SE System ------- Channel Signals -------------------------')
        self.data.append('nodes["StartWithEnable"].atom = atoms["$Local"]')
        self.data.append('nodes["StartWithEnable"].successor = {{var = "dummy",val = nil, next = nodes["SetEnableStart"] }}')
        self.data.append('')

        self.data.append('nodes["SetEnableStart"].atom = atoms["$BmsEnable"]')
        self.data.append('nodes["SetEnableStart"].successor = {{var = "dummy",val = nil, next = nodes["InitIDCode"] }}')
        self.data.append('')

        self.data.append('nodes["StartWithoutEnable"].atom = atoms["$Local"]')
        self.data.append('nodes["StartWithoutEnable"].successor = {{var = "dummy",val = nil, next = nodes["InitIDCode"] }}')
        self.data.append('')

        if source == 0:
            nodeJump = "InitScanner"
        else:
            nodeJump = "WaitIdCodeResult"

        self.data.append('nodes["InitIDCode"].atom = atoms["$IdCodeInit"]')
        self.data.append('nodes["InitIDCode"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('nodes["InitScanner"].atom = atoms["$InitScanner"]')
        self.data.append('nodes["InitScanner"].successor = {{var = "idcodestatus",val = c.jobResultScannerNotReady, next = nodes["DisplayScannerNotActive"]},')
        self.data.append('		                 {var = "idcodestatus",val = c.jobResultComponentHasNoScanner, next = nodes["DisplayNoScanner"]},')
        self.data.append('		                 {var = "idcodestatus",val = c.jobResultScannerRdy, next = nodes["WaitForScanInitAck"]}}')
        self.data.append('')

        self.data.append('nodes["DisplayNoScanner"].atom = atoms["$DisplayNoScanner"]')
        self.data.append('nodes["DisplayNoScanner"].successor = {{var = "dummy",val = nil, next = nodes["WaitForScanInitAck"] }}')
        self.data.append('')

        self.data.append('nodes["DisplayScannerNotActive"].atom = atoms["$DisplayScannerNotActive"]')
        self.data.append('nodes["DisplayScannerNotActive"].successor = {{var = "dummy",val = nil, next = nodes["WaitForScanInitAck"] }}')
        self.data.append('')

        self.data.append('nodes["WaitForScanInitAck"].atom = atoms["$WaitScanInitAck"]')
        self.data.append('nodes["WaitForScanInitAck"].successor = {{var = "dummy",val = nil, next = nodes["WaitForScanStartTrigger"] }}')
        self.data.append('')

        self.data.append('nodes["WaitForScanStartTrigger"].atom = atoms["$WaitScanStartTrigger"]')
        self.data.append('nodes["WaitForScanStartTrigger"].successor = {{var = "dummy",val = nil, next = nodes["Scanning"] }}')
        self.data.append('')

        self.data.append('nodes["Scanning"].atom = atoms["$DoScan"]')
        self.data.append('nodes["Scanning"].successor = {{var = "dummy",val = nil, next = nodes["WaitIdCodeResult"] }}')
        self.data.append('')

        self.data.append('--Wiederholsequenz, wenn Scanner keine Barcode gelesen hat')
        self.data.append('nodes["RepeatTimeout"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatTimeout"].successor = {{var = "dummy",val = nil, next = nodes["RepeatTimeoutDelay"]}}')
        self.data.append('nodes["RepeatTimeoutDelay"].atom = atoms["$ScanTimeoutMsg"]')
        self.data.append('nodes["RepeatTimeoutDelay"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('--Wiederholsequenz, wenn Scanner einen nicht unterstuetzten Code gelesen hat')
        self.data.append('nodes["RepeatCodeNotSupported"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatCodeNotSupported"].successor = {{var = "dummy",val = nil, next = nodes["RepeatCodeNotSupportedDelay"]}}')
        self.data.append('nodes["RepeatCodeNotSupportedDelay"].atom = atoms["$CodeNotSupportedMsg"]')
        self.data.append('nodes["RepeatCodeNotSupportedDelay"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('--Wiederholsequenz, wenn Scanner einen nicht aktiven Code gelesen hat')
        self.data.append('nodes["RepeatCodeNotActive"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatCodeNotActive"].successor = {{var = "dummy",val = nil, next = nodes["RepeatCodeNotActiveDelay"]}}')
        self.data.append('nodes["RepeatCodeNotActiveDelay"].atom = atoms["$CodeNotActiveMsg"]')
        self.data.append('nodes["RepeatCodeNotActiveDelay"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('--Wiederholsequenz, wenn Id Code nicht zugeordnet werden konnte')
        self.data.append('nodes["RepeatCodeNoAssignment"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatCodeNoAssignment"].successor = {{var = "dummy",val = nil, next = nodes["RepeatCodeNoAssignmentDelay"]}}')
        self.data.append('nodes["RepeatCodeNoAssignmentDelay"].atom = atoms["$DisplayNoAssignment"]')
        self.data.append('nodes["RepeatCodeNoAssignmentDelay"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('nodes["ScanTimeout"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["ScanTimeout"].successor = {{var = "dummy",val = nil, next = nodes["ScanTimeoutDelay"]}}')
        self.data.append('nodes["ScanTimeoutDelay"].atom = atoms["$ScanTimeoutDelay"]')
        self.data.append('nodes["ScanTimeoutDelay"].successor = {{var = "dummy",val = nil, next = nodes["DoNokResult"]}}')

        self.data.append('nodes["WaitIdCodeResult"].atom = atoms["$TriggerInGrp1"]')
        self.data.append('nodes["WaitIdCodeResult"].successor = {{var = "timeout",val = 1, next = nodes["ScanTimeout"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultScanTimeout, next = nodes["RepeatTimeout"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultScannedCodeNotActive, next = nodes["RepeatCodeNotActive"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultScannedCodeNotSupported, next = nodes["RepeatCodeNotSupported"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultNewIDCodeAssignment, next = nodes["DisplayNewIDCode"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultNoAssignmentFound, next = nodes["RepeatCodeNoAssignment"]}}')
        self.data.append('')

        self.data.append('nodes["DisplayNewIDCode"].atom = atoms["$DisplayIDCode"]')
        self.data.append('nodes["DisplayNewIDCode"].successor = {{var = "dummy",val = nil, next = nodes["DisplayNewIDCodeDelay"] }}')
        self.data.append('')
        self.data.append('nodes["DisplayNewIDCodeDelay"].atom = atoms["$DisplayIDCodeTimeDelay"]')
        self.data.append('nodes["DisplayNewIDCodeDelay"].successor = {{var = "dummy",val = nil, next = nodes["ScanFinalOK"] }}')
        self.data.append('')

        if extjobctrl == 0:
            nodeJump = "DoNokResult"
        else:
            nodeJump = "WaitForJobEnable"

        self.data.append('nodes["ScanFinalOK"].atom = atoms["$ScanFinalOK"]')
        self.data.append('nodes["ScanFinalOK"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')
        self.data.append('nodes["WaitForJobEnable"].atom = atoms["$WaitJobEnable"]')
        self.data.append('nodes["WaitForJobEnable"].successor = {{var = "dummy",val = nil, next = nodes["BmsEnable"] }}')
        self.data.append('')
        self.data.append('nodes["BmsEnable"].atom = atoms["$BmsEnable"]')
        self.data.append('nodes["BmsEnable"].successor = {{var = "dummy",val = nil, next = f.EndNode }}')
        self.data.append('')

        self.data.append('nodes["DoNokResult"].atom = atoms["$DoNokResult"]')
        self.data.append('nodes["DoNokResult"].successor = {{var = "dummy",val = nil, next = f.EndNode }}')
        self.data.append('------------ CS/SE System ------- END -------------------------------------')
        self.data.append('')
        self.data.append('')
        self.data.append('--Eigentlicher Start Code--')
        self.data.append('f.setInitNode(initNode)')
        self.data.append('f.checkPlausib(nodes)')
        self.data.append('if( ENABLE == "1") then')
        self.data.append('	f.go(nodes["StartWithEnable"])')
        self.data.append('else')
        self.data.append('	f.go(nodes["StartWithoutEnable"])')
        self.data.append('end')
        #self.data.append('if( BMS == "Channel" ) then')
        #self.data.append('	f.go(nodes[1])')
        #self.data.append('end')
        self.data.append('f.cleanUpNodes(atoms, nodes)')
        self.data.append('package.loaded["atoms"]=nil')

    def create(
        self,
        id_input_name1,
        id_input_comment1,
        target,
        trigger,
        timeout,
        codes,
        range1,
        timeouttext,
        user,
        comment,
        date,
        display_time,
        display_text,
        source,
        play_sound,
        extjobctrl,
        laserontime
    ):
        self.requires()

        self.initNode(user, comment, date, display_time, id_input_name1, id_input_comment1)
        self.config()
        self.localNode()
        self.setEnable()
        self.idCodeInit(source, 1, range1, target, extjobctrl)
        self.initScanner(codes, laserontime, target, trigger, play_sound)
        self.displayNoScanner()
        self.displayScannerNotActive()
        self.waitScanInitAck()
        self.waitScanStartTrigger(display_text, source)
        self.doScan()
        self.waitIDCodeTimeout(timeout, display_text, source)
        self.waitIDCode()
        self.triggerInGrp()
        self.displayIdCode(display_time)
        self.displayIdCodeTimeDelay()
        self.scanFinalOK(0)
        self.doNokResult()
        self.displayMsgTimeDelay(display_time)
        self.scanTimeoutReached(timeouttext)
        self.scanTimeoutMsg()
        self.codeNotSupportedMsg()
        self.codeNotActiveMsg()
        self.codeNotAssignedMsg()
        self.waitJobEnable()
        self.bmsEnable()
        self.publishAtoms()
        self.nodes()
        self.workflow(source, extjobctrl)

        return self.data







class IdleIdCodeManualTmpl:
    def __init__(self):
        self.data = []

    def config(self):
        self.data.append('--globale run Einstellungen setzen')
        self.data.append('local config = {')
        self.data.append('    stopOnNok = false,')
        self.data.append('    stopOnTimeout = false')
        self.data.append('}')
        self.data.append('f.setConfiguration(config)')
        self.data.append('')


    def idCodeInit(self, source, fire_idcode, range1, range2, target):
        self.data.extend(atoms.IDCodeInit(source=source, fire_idcode=fire_idcode, range=range2, target=target))


    def waitScanStartTrigger(self, text, source):
        self.data.append('--warten auf Trigger Scanner')
        self.data.append('atoms["$WaitScanStartTrigger"]={')
        #if source == 0:
        self.data.append('  text= "%s",' % (text if source == 0 else "") )
        #else:
        #    self.data.append('  text= "",')
        self.data.append('  type = c.TypeTriggerIn,')
        self.data.append('  mode = c.TriggerInModeScanTrigger, --c.TriggerOutScanPrg')
        self.data.append('  dest = 0,')
        self.data.append('  state= 1,')
        self.data.append('  range= 1,')
        self.data.append('  valueList = {}')
        self.data.append('}')
        self.data.append('')


    def publishAtoms(self):
        self.data.append('f.publishAtoms(atoms,function (a) cpp.job:addAtom(a) end)')
        self.data.append('')
        self.data.append('')


    def nodes(self):
        self.data.append('nodes = {}')
        self.data.append('nodes["StartWithEnable"] = {}')
        self.data.append('nodes["SetEnableStart"] = {}')
        self.data.append('nodes["StartWithoutEnable"] = {}')
        self.data.append('nodes["InitIDCode"] = {}')
        self.data.append('nodes["WaitForInputTrigger"] = {}')
        self.data.append('nodes["InitScanner"] = {}')
        self.data.append('nodes["DisplayNoScanner"] = {}')
        self.data.append('nodes["DisplayScannerNotActive"] = {}')
        self.data.append('nodes["WaitForScanInitAck"] = {}')
        self.data.append('nodes["Scanning"] = {}')
        self.data.append('nodes["WaitIdCodeResult"] = {}')
        self.data.append('nodes["RepeatTimeout"] = {}')
        self.data.append('nodes["RepeatTimeoutDelay"] = {}')
        self.data.append('nodes["RepeatCodeNotSupported"] = {}')
        self.data.append('nodes["RepeatCodeNotSupportedDelay"] = {}')
        self.data.append('nodes["RepeatCodeNotActive"] = {}')
        self.data.append('nodes["RepeatCodeNotActiveDelay"] = {}')
        self.data.append('nodes["RepeatCodeNoAssignment"] = {}')
        self.data.append('nodes["RepeatCodeNoAssignmentDelay"] = {}')

        self.data.append('nodes["ScanTimeout"] = {}')
        self.data.append('nodes["ScanTimeoutDelay"] = {}')

        self.data.append('nodes["DisplayNewIDCode"] = {}')
        self.data.append('nodes["DisplayNewIDCodeDelay"] = {}')
        self.data.append('nodes["ScanFinalOK"] = {}')

        self.data.append('nodes["SetNewJobNr"] = {}')
        self.data.append('nodes["UnsetEnableJob"] = {}')
        self.data.append('nodes["DisplayNewJobNr"] = {}')
        self.data.append('nodes["DisplayNewJobNrDelay"] = {}')
        self.data.append('nodes["JobNrFinalOK"] = {}')

        self.data.append('nodes["SetNewPrgNr"] = {}')
        self.data.append('nodes["ResetBatchCounter"] = {}')
        self.data.append('nodes["SetEnablePrg"] = {}')
        self.data.append('nodes["DisplayNewPrgNr"] = {}')
        self.data.append('nodes["DisplayNewPrgNrDelay"] = {}')
        self.data.append('nodes["DoNokResult"] = {}')

        self.data.append('')

    def workflow(self, source):
        self.data.append('------------ CS/SE System ------- Channel Signals -------------------------')
        self.data.append('nodes["StartWithEnable"].atom = atoms["$Local"]')
        self.data.append('nodes["StartWithEnable"].successor = {{var = "dummy",val = nil, next = nodes["SetEnableStart"] }}')
        self.data.append('')

        self.data.append('nodes["SetEnableStart"].atom = atoms["$SetEnable"]')
        self.data.append('nodes["SetEnableStart"].successor = {{var = "dummy",val = nil, next = nodes["InitIDCode"] }}')
        self.data.append('')

        self.data.append('nodes["StartWithoutEnable"].atom = atoms["$Local"]')
        self.data.append('nodes["StartWithoutEnable"].successor = {{var = "dummy",val = nil, next = nodes["InitIDCode"] }}')
        self.data.append('')

        if source == 0:
            nodeJump = "InitScanner"
        else:
            nodeJump = "WaitIdCodeResult"

        self.data.append('nodes["InitIDCode"].atom = atoms["$IdCodeInit"]')
        self.data.append('nodes["InitIDCode"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('nodes["InitScanner"].atom = atoms["$InitScanner"]')
        self.data.append('nodes["InitScanner"].successor = {{var = "idcodestatus",val = c.jobResultScannerNotReady, next = nodes["DisplayScannerNotActive"]},')
        self.data.append('		                 {var = "idcodestatus",val = c.jobResultComponentHasNoScanner, next = nodes["DisplayNoScanner"]},')
        self.data.append('		                 {var = "idcodestatus",val = c.jobResultScannerRdy, next = nodes["WaitForScanInitAck"]}}')
        self.data.append('')

        self.data.append('nodes["DisplayNoScanner"].atom = atoms["$DisplayNoScanner"]')
        self.data.append('nodes["DisplayNoScanner"].successor = {{var = "dummy",val = nil, next = nodes["WaitForScanInitAck"] }}')
        self.data.append('')

        self.data.append('nodes["DisplayScannerNotActive"].atom = atoms["$DisplayScannerNotActive"]')
        self.data.append('nodes["DisplayScannerNotActive"].successor = {{var = "dummy",val = nil, next = nodes["WaitForScanInitAck"] }}')
        self.data.append('')

        self.data.append('nodes["WaitForScanInitAck"].atom = atoms["$WaitScanInitAck"]')


        self.data.append('nodes["WaitForScanInitAck"].successor = {{var = "dummy", val = nil, next = nodes["WaitForInputTrigger"]}}')
        self.data.append('--Input Gruppe Prg / Job / Scan')
        self.data.append('nodes["WaitForInputTrigger"].atom = atoms["$TriggerInGrp2"]')
        self.data.append('nodes["WaitForInputTrigger"].successor = {{var = "idcodestatus", val = c.jobResultHMIPrgSelected, next = nodes["SetNewPrgNr"]},')
        self.data.append('                                          {var = "idcodestatus", val = c.jobResultHMIJobSelected, next = nodes["SetNewJobNr"]},')
        self.data.append('					                        {var = "idcodestatus", val = c.jobResultScanTrigger, next = nodes["Scanning"]}}')

        self.data.append('')

        self.data.append('nodes["Scanning"].atom = atoms["$DoScan"]')
        self.data.append('nodes["Scanning"].successor = {{var = "dummy",val = nil, next = nodes["WaitIdCodeResult"] }}')
        self.data.append('')

        self.data.append('--Wiederholsequenz, wenn Scanner keine Barcode gelesen hat')
        self.data.append('nodes["RepeatTimeout"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatTimeout"].successor = {{var = "dummy",val = nil, next = nodes["RepeatTimeoutDelay"]}}')
        self.data.append('nodes["RepeatTimeoutDelay"].atom = atoms["$ScanTimeoutMsg"]')
        self.data.append('nodes["RepeatTimeoutDelay"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('--Wiederholsequenz, wenn Scanner einen nicht unterstuetzten Code gelesen hat')
        self.data.append('nodes["RepeatCodeNotSupported"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatCodeNotSupported"].successor = {{var = "dummy",val = nil, next = nodes["RepeatCodeNotSupportedDelay"]}}')
        self.data.append('nodes["RepeatCodeNotSupportedDelay"].atom = atoms["$CodeNotSupportedMsg"]')
        self.data.append('nodes["RepeatCodeNotSupportedDelay"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('--Wiederholsequenz, wenn Scanner einen nicht aktiven Code gelesen hat')
        self.data.append('nodes["RepeatCodeNotActive"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatCodeNotActive"].successor = {{var = "dummy",val = nil, next = nodes["RepeatCodeNotActiveDelay"]}}')
        self.data.append('nodes["RepeatCodeNotActiveDelay"].atom = atoms["$CodeNotActiveMsg"]')
        self.data.append('nodes["RepeatCodeNotActiveDelay"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('--Wiederholsequenz, wenn Id Code nicht zugeordnet werden konnte')
        self.data.append('nodes["RepeatCodeNoAssignment"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["RepeatCodeNoAssignment"].successor = {{var = "dummy",val = nil, next = nodes["RepeatCodeNoAssignmentDelay"]}}')
        self.data.append('nodes["RepeatCodeNoAssignmentDelay"].atom = atoms["$DisplayNoAssignment"]')
        self.data.append('nodes["RepeatCodeNoAssignmentDelay"].successor = {{var = "dummy",val = nil, next = nodes["%s"]}}' % nodeJump)
        self.data.append('')

        self.data.append('nodes["ScanTimeout"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["ScanTimeout"].successor = {{var = "dummy",val = nil, next = nodes["ScanTimeoutDelay"]}}')
        self.data.append('nodes["ScanTimeoutDelay"].atom = atoms["$ScanTimeoutDelay"]')
        self.data.append('nodes["ScanTimeoutDelay"].successor = {{var = "dummy",val = nil, next = nodes["DoNokResult"]}}')

        self.data.append('nodes["WaitIdCodeResult"].atom = atoms["$TriggerInGrp1"]')
        self.data.append('nodes["WaitIdCodeResult"].successor = {{var = "timeout",val = 1, next = nodes["ScanTimeout"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultScanTimeout, next = nodes["RepeatTimeout"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultScannedCodeNotActive, next = nodes["RepeatCodeNotActive"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultScannedCodeNotSupported, next = nodes["RepeatCodeNotSupported"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultNewIDCodeAssignment, next = nodes["DisplayNewIDCode"]},')
        self.data.append('	                             {var = "idcodestatus", val = c.jobResultHMIPrgSelected, next = nodes["SetNewPrgNr"]},')
        self.data.append('	                             {var = "idcodestatus", val = c.jobResultHMIJobSelected, next = nodes["SetNewJobNr"]},')
        self.data.append('	                             {var = "idcodestatus",val = c.jobResultNoAssignmentFound, next = nodes["RepeatCodeNoAssignment"]}}')
        self.data.append('')

        self.data.append('--ID Code')
        self.data.append('nodes["DisplayNewIDCode"].atom = atoms["$DisplayIDCode"]')
        self.data.append('nodes["DisplayNewIDCode"].successor = {{var = "dummy", val = nil, next = nodes["DisplayNewIDCodeDelay"]}}')
        self.data.append('')
        self.data.append('nodes["DisplayNewIDCodeDelay"].atom = atoms["$DisplayIDCodeTimeDelay"]')
        self.data.append('nodes["DisplayNewIDCodeDelay"].successor = {{var = "dummy", val = nil, next = nodes["ScanFinalOK"]}}')
        self.data.append('')
        self.data.append('nodes["ScanFinalOK"].atom = atoms["$ScanFinalOK"]')
        self.data.append('nodes["ScanFinalOK"].successor = {{var = "dummy", val = nil, next = nodes["DoNokResult"]}}')

        self.data.append('--Gutfall Job')
        self.data.append('nodes["SetNewJobNr"].atom = atoms["$JobNr"]')
        self.data.append('nodes["SetNewJobNr"].successor = {{var = "dummy",val = nil, next = nodes["UnsetEnableJob"]}}')
        self.data.append('')

        self.data.append('--Enable wegnehmen')
        self.data.append('nodes["UnsetEnableJob"].atom = atoms["$UnsetEnable"]')
        self.data.append('nodes["UnsetEnableJob"].successor = {{var = "dummy",val = nil, next = nodes["DisplayNewJobNr"]}}')
        self.data.append('')

        self.data.append('--Anzeige Job Nr')
        self.data.append('nodes["DisplayNewJobNr"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["DisplayNewJobNr"].successor = {{var = "dummy",val = nil, next = nodes["DisplayNewJobNrDelay"]}}')
        self.data.append('')

        self.data.append('nodes["DisplayNewJobNrDelay"].atom = atoms["$DisplayJobNrTimeDelay"]')
        self.data.append('nodes["DisplayNewJobNrDelay"].successor = {{var = "dummy",val = nil, next = nodes["JobNrFinalOK"]}}')
        self.data.append('')

        self.data.append('nodes["JobNrFinalOK"].atom = atoms["$ScanFinalJobOK"]')
        self.data.append('nodes["JobNrFinalOK"].successor = {{var = "dummy",val = nil, next = f.EndNode }}')
        self.data.append('')

        self.data.append('--Gutfall Prg')

        self.data.append('nodes["SetNewPrgNr"].atom = atoms["$PrgNr"]')
        self.data.append('nodes["SetNewPrgNr"].successor = {{var = "dummy",val = nil, next = nodes["ResetBatchCounter"]}}')
        self.data.append('')

        self.data.append('-- reset BatchCounter')
        self.data.append('nodes["ResetBatchCounter"].atom = atoms["$ResetBatchCounter"]')
        self.data.append('nodes["ResetBatchCounter"].successor = {{var = "dummy",val = nil, next = nodes["SetEnablePrg"]}}')
        self.data.append('')

        self.data.append('--Enable setzen')
        self.data.append('nodes["SetEnablePrg"].atom = atoms["$SetEnable"]')
        self.data.append('nodes["SetEnablePrg"].successor = {{var = "dummy",val = nil, next = nodes["DisplayNewPrgNr"]}}')
        self.data.append('')

        self.data.append('--Anzeige Job Nr')
        self.data.append('nodes["DisplayNewPrgNr"].atom = atoms["$DisplayMsgTimeDelay"]')
        self.data.append('nodes["DisplayNewPrgNr"].successor = {{var = "dummy",val = nil, next = nodes["DisplayNewPrgNrDelay"]}}')
        self.data.append('')
        self.data.append('nodes["DisplayNewPrgNrDelay"].atom = atoms["$DisplayPrgNrTimeDelay"]')
        self.data.append('nodes["DisplayNewPrgNrDelay"].successor = {{var = "dummy",val = nil, next = nodes["DoNokResult"]}}')
        self.data.append('')

        self.data.append('--Kein ID Code -> Beenden Skript')
        self.data.append('nodes["DoNokResult"].atom = atoms["$DoNokResult"]')
        self.data.append('nodes["DoNokResult"].successor = {{var = "dummy",val = nil, next = f.EndNode}}')
        self.data.append('')

        self.data.append('------------ CS/SE System ------- END -------------------------------------')
        self.data.append('')
        self.data.append('')
        self.data.append('')
        self.data.append('--Eigentlicher Start Code--')
        self.data.append('f.setInitNode(initNode)')
        self.data.append('f.checkPlausib(nodes)')
        # self.data.append('cpp.job:logMsg("ENABLE=" .. ENABLE)')
        self.data.append('if( ENABLE == "1") then')
        self.data.append('	f.go(nodes["StartWithEnable"])')
        self.data.append('else')
        self.data.append('	f.go(nodes["StartWithoutEnable"])')
        self.data.append('end')
        self.data.append('f.cleanUpNodes(atoms, nodes)')
        self.data.append('package.loaded["atoms"]=nil')

    def create(
        self,
        id_input_name1,
        id_input_comment1,
        target,
        trigger,
        timeout,
        codes,
        range1,
        timeouttext,
        user,
        comment,
        date,
        display_time,
        display_text,
        range2,
        source,
        play_sound,
        laserontime
    ):

        self.data.extend(atoms.Requires())
        self.data.extend(atoms.InitNode(user, comment, date, display_time, id_input_name1, id_input_comment1))

        self.config()

        self.data.extend(atoms.Local())
        self.data.extend(atoms.SetEnable())
        self.data.extend(atoms.UnsetEnable())

        self.idCodeInit(source, 1, range1, range2, target)

        self.data.extend(atoms.InitScanner(codes, laserontime, trigger, play_sound))
        self.data.extend(atoms.DisplayNoScanner())
        self.data.extend(atoms.DisplayScannerNotActive())
        self.data.extend(atoms.WaitScanInitAck())

        self.waitScanStartTrigger(display_text, source)

        self.data.extend(atoms.DoScan())
        self.data.extend(atoms.WaitIDCodeTimeout(timeout, display_text, source))
        self.data.extend(atoms.WaitIDCode())

        if source == 1:
            self.data.extend(atoms.TriggerInGrp("\"$WaitHMIInput\", \"$WaitIdCode\", \"$WaitIdCodeTimeout\"", "1"))
        else:
            self.data.extend(atoms.TriggerInGrp("\"$WaitIdCode\", \"$WaitIdCodeTimeout\"", "1"))


        self.data.extend(atoms.WaitHMIInput())
        self.data.extend(atoms.TriggerInGrp(members="\"$WaitHMIInput\", \"$WaitScanStartTrigger\"", atom="2"))
        self.data.extend(atoms.DisplayIDCode(display_time))
        self.data.extend(atoms.DisplayIDCodeTimeDelay())
        self.data.extend(atoms.ScanFinalOK(state=0))
        self.data.extend(atoms.PrgNr())
        self.data.extend(atoms.ResetBatchCounter(op_mode=2))
        self.data.extend(atoms.DisplayPrgNrTimeDelay(target=target))
        self.data.extend(atoms.JobNr())
        self.data.extend(atoms.DisplayJobNrTimeDelay(target=target))
        self.data.extend(atoms.DisplayMsgTimeDelay(display_time))
        self.data.extend(atoms.ScanFinalJobOK())
        self.data.extend(atoms.DoNokResult())
        self.data.extend(atoms.ScanTimeoutDelay(timeouttext))
        self.data.extend(atoms.ScanTimeoutMsg())
        self.data.extend(atoms.CodeNotSupportedMsg())
        self.data.extend(atoms.CodeNotActiveMsg())
        self.data.extend(atoms.CodeNotAssignedMsg())

        self.publishAtoms()
        self.nodes()
        self.workflow(source)

        return self.data