/*global TR: false, Ext: false, BS350: false */
/*
Controller of the stored actual values window
*/
//Ext.require('BS350.custom.Analysis');
Ext.define('BS350.controller.StoredActualValuesCtrl', {
  extend: 'BS350.custom.ViewController',
  //requires: ['BS350.custom.Analysis'],
  stores: ['ActualValuesCycleStore'],

  views: ['StoredActualValuesView'],

  items: [
    { name: 'header', query: '#avHeader'},
    { name: 'body', query: '#avBody', actions: {resize: 'resizeBody'}},
    { name: 'storedactualvaluesview', query: '#storedactualvaluesview' },
    { name: 'levelBack', query: '#levelBack', actions: {click: 'showPreviousLevel'}},
    { name: 'levelNext', query: '#levelNext', actions: {click: 'showNextLevel'}},
    { name: 'firstCycle', query: '#firstCycle', actions: {click: 'firstCycleClicked'}},
    { name: 'nextCycle', query: '#nextCycle', actions: {click: 'nextCycleClicked'}},
    { name: 'cycleId', query: '#cycleId', actions: {change: 'cycleIdChanged'}},
    { name: 'prevCycle', query: '#prevCycle', actions: {click: 'prevCycleClicked'}},
    { name: 'lastCycle', query: '#lastCycle', actions: {click: 'lastCycleClicked'}},
    { name: 'rgOKStatus', query: '#rgOKStatus', actions: {change: 'rbOKStatusChanged'}},
   // { name: 'refreshCycle', query: '#refreshCycle', actions: {click: 'refreshCycleClicked'}},
    { name: 'txtDataCount', query: '#txtDataCount'}
  ],

  currCycleNr: -1,
  lastStatusCycle: -1,
  isShowing : false,
  checkresults: false,

  cycleStore: null,
  cycleOkType: 0,
  levelIndex: 0,
  navpath: '/home/storedactualvalues',

  init: function (application) {
    this.currentValues = BS350.custom.Analysis.getAvDefaultValues();
    application.getController('HeaderCtrl').on('updatestatus', this.checkCycle, this);
    application.getController('DatabaseCtrl').on('resultdbdeleted', this.checkResultDB, this);
  },

  initView: function() {
    this.getCyclesStore();
    this.cycleOkType = this.cycleStore.allCycles;
    var me = this;
    this.V.cycleId.validator = function(value) {
      return(me.validateCycleId(value));
      };
    this.updateValues(this.currCycleNr);
  },

  checkCycle: function(status) {
    if (this.view && this.currCycleNr !== status.cycle && this.isShowing) {
      if (this.lastStatusCycle !== status.cycle)
      {
        this.getCyclesStore(status.cycle);
      }
      if (this.currCycleNr < 0 || this.V.cycleId.value === '' || this.V.cycleId.value === undefined)
      {
        this.V.cycleId.setValue(status.cycle);
      }
    }
  },

  checkResultDB: function () {
    this.checkresults = true;
  },

  updateValues: function (cycle) {
    if (cycle < 0) {
      return;
    }
    var me = this;
    me.currCycleNr = cycle;
    if (me.view) {
      var updateValuesFun = function () {
        Ext.Ajax.request({
          url: '/BS350/result/actualvalues',
          params: {id: me.currCycleNr, stored: true},
          success: function (res) {
            if (res.responseText === "null") {
              //something went wrong update cycles
              me.getCyclesStore();
              return;
            }
            me.currentValues = Ext.JSON.decode(res.responseText);
            Ext.Array.each(me.currentValues, function (item, idx, allItems) {
              allItems[idx].TF = TR(item.TF);
            });
            /*Ext.Array.each(me.currentValues, function (item) {
             item.LastCmdLabel = TR('LastCmd');
             })*/
            me.showValues(-1);
          }
        });
      };
      if (APP.torqueUnitFactors === undefined) {
        var channelCtrl = me.getController('ChannelCtrl');
        channelCtrl.getTorqueUnitFactors(updateValuesFun);
      } else {
        updateValuesFun();
      }
    }
  },

  resizeBody: function (body, width, height) {
    body.tableCfg['FS'] = height / 4;
    this.currentValues[this.levelIndex]['FS'] = height / 4;
    body.setValues(this.currentValues[this.levelIndex]);
  },

  showPreviousLevel: function() {
    if (this.levelIndex > 0) {
      this.showValues(this.levelIndex-1);
    }
  },

  showNextLevel: function() {
    if (this.levelIndex < this.currentValues.length-1) {
      this.showValues(this.levelIndex+1);
    }
  },

  showValues: function(index)
  {
    if (index === -1) {
      index = this.currentValues.length-1;
    }
    this.V.levelBack.setDisabled(index === 0);
    this.V.levelNext.setDisabled(index === this.currentValues.length-1);
    var values = this.currentValues[index];
    this.V.header.setValues(values);
    values.FS = this.V.body.getHeight() / 4;
    this.V.body.setValues(values);
    this.levelIndex = index;
  },

  resetView: function () {
    this.cycleStore.loadData([]);
    this.currCycleNr = -1;
    this.lastStatusCycle = -1;
    this.cycleOkType = this.cycleStore.allCycles;
    this.currentValues = BS350.custom.Analysis.getAvDefaultValues();
    this.currentValues[0].FS = (this.V.body.getHeight() / 4);
    this.V.body.setValues(this.currentValues[0]);
    this.V.header.setValues(this.currentValues[0]);
    if (this.V.cycleId.isValid()) {this.V.cycleId.setValue(-1);}
  },
  //
  getCyclesStore: function() {
    var me = this;
    this.cycleStore = this.getActualValuesCycleStoreStore();
    this.cycleStore.load({
      callback: function(records, operation, success) {
        if (records === null && !success){me.resetView();}
        me.updateNavBtn(me.currCycleNr);
        me.setDataCount();
        me.lastStatusCycle = me.cycleStore.getLastCycle();
        if ((me.currCycleNr < 0 && me.lastStatusCycle > 0) || (me.currCycleNr > 0 && !me.cycleStore.isValid(me.cycleStore.allCycles, Number(me.currCycleNr))))
        {
          me.V.cycleId.setValue(-1);
          me.V.cycleId.setValue(me.lastStatusCycle);
        }
      }
    });
  },

  refreshCycleClicked: function() {
    this.getCyclesStore();
  },


  firstCycleClicked: function() {
    var cycleid = this.cycleStore.getFirst(this.cycleOkType);
    if (cycleid > 0)
    {
      this.V.cycleId.setValue(cycleid);
    }
  },


  nextCycleClicked: function() {
    var cycleid = this.cycleStore.getNext(this.cycleOkType);
    if (cycleid > 0)
    {
      this.V.cycleId.setValue(cycleid);
    }
  },

  prevCycleClicked: function() {
    var cycleid = this.cycleStore.getPrev(this.cycleOkType);
    if (cycleid > 0)
    {
      this.V.cycleId.setValue(cycleid);
    }
  },

  setDataCount: function() {
    this.V.txtDataCount.setValue(this.cycleStore.getCount(this.cycleOkType));
},

  lastCycleClicked: function() {
    var cycleid = this.cycleStore.getLast(this.cycleOkType);
    if (cycleid > 0)
    {
      this.V.cycleId.setValue(cycleid);
    }
  },

  cycleIdChanged: function() {
    if (this.V.cycleId.isValid())
    {
      this.updateValues(this.V.cycleId.value);
      this.cycleStore.updateIndex(Number(this.V.cycleId.value));
    }
  },


  rbOKStatusChanged: function (radiogroup, value) {
    switch (value.rbOKStatus)
    {
      case 2:
        this.cycleOkType = this.cycleStore.onlyOkCycles;
        break;
      case 3:
        this.cycleOkType = this.cycleStore.onlyNotOkCycles;
        break;
      default:
        this.cycleOkType = this.cycleStore.allCycles;
        break;
    }
    //force update and validate
    this.setDataCount();
    var cycleid = this.cycleStore.getLast(this.cycleOkType);
    this.V.cycleId.setValue(-1);
    if (cycleid > 0)
    {
      this.V.cycleId.setValue(cycleid);
    }
  },


  validationMsg: function(cycleid) {
    var limits = this.cycleStore.getLimits(this.cycleOkType, Number(cycleid));
    if (limits.length === 2)
    {
      var lower = limits[0];
      var upper = limits[1];
      if (lower < 0 && upper < 0)
      {
        return(TR('Invalid cycle value: no data available'));
      }
      if (lower < 0)
      {
        return(TR('Invalid cycle value: next valid value is:') + ' ' + upper);
      }
      if (upper < 0)
      {
        return(TR('Invalid cycle value: next valid value is:') + ' ' + lower);
      }
      return(TR('Invalid cycle value: next valid limits are:') + ' [' + lower + ', ' + upper + ']');
    }
    return(TR('Invalid cycle value'));
  },

  updateNavBtn: function(cycleid) {
    if (this.cycleStore.getCount(this.cycleOkType) < 2)
    {
      this.V.firstCycle.setDisabled(true);
      this.V.prevCycle.setDisabled(true);
      this.V.lastCycle.setDisabled(true);
      this.V.nextCycle.setDisabled(true);
    }
    else if (this.cycleStore.isFirst(this.cycleOkType, Number(cycleid)))
    {
      this.V.firstCycle.setDisabled(true);
      this.V.prevCycle.setDisabled(true);
      this.V.lastCycle.setDisabled(false);
      this.V.nextCycle.setDisabled(false);
    }
    else if (this.cycleStore.isLast(this.cycleOkType, Number(cycleid)))
    {
      this.V.firstCycle.setDisabled(false);
      this.V.prevCycle.setDisabled(false);
      this.V.lastCycle.setDisabled(true);
      this.V.nextCycle.setDisabled(true);
    }
    else
    {
      this.V.firstCycle.setDisabled(false);
      this.V.prevCycle.setDisabled(false);
      this.V.lastCycle.setDisabled(false);
      this.V.nextCycle.setDisabled(false);
    }
  },

  validateCycleId: function(cycleid) {
    if (this.cycleStore.isValid(this.cycleOkType, Number(cycleid)))
    {
      this.updateNavBtn(cycleid);
      return (true);
    }
    return (this.validationMsg(cycleid));
  },

  activated: function()
  {
    this.isShowing = true;
    if (this.checkresults === true){
      this.checkresults = false;
      this.getCyclesStore();
    }
  },

  deactivated: function()
  {
    this.isShowing = false;
    this.checkresults = false;
  }

});

